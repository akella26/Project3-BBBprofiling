
project1.elf:     file format elf64-x86-64


Disassembly of section .interp:

0000000000400238 <.interp>:
  400238:	2f                   	(bad)  
  400239:	6c                   	insb   (%dx),%es:(%rdi)
  40023a:	69 62 36 34 2f 6c 64 	imul   $0x646c2f34,0x36(%rdx),%esp
  400241:	2d 6c 69 6e 75       	sub    $0x756e696c,%eax
  400246:	78 2d                	js     400275 <_init-0x293>
  400248:	78 38                	js     400282 <_init-0x286>
  40024a:	36 2d 36 34 2e 73    	ss sub $0x732e3436,%eax
  400250:	6f                   	outsl  %ds:(%rsi),(%dx)
  400251:	2e 32 00             	xor    %cs:(%rax),%al

Disassembly of section .note.ABI-tag:

0000000000400254 <.note.ABI-tag>:
  400254:	04 00                	add    $0x0,%al
  400256:	00 00                	add    %al,(%rax)
  400258:	10 00                	adc    %al,(%rax)
  40025a:	00 00                	add    %al,(%rax)
  40025c:	01 00                	add    %eax,(%rax)
  40025e:	00 00                	add    %al,(%rax)
  400260:	47                   	rex.RXB
  400261:	4e 55                	rex.WRX push %rbp
  400263:	00 00                	add    %al,(%rax)
  400265:	00 00                	add    %al,(%rax)
  400267:	00 02                	add    %al,(%rdx)
  400269:	00 00                	add    %al,(%rax)
  40026b:	00 06                	add    %al,(%rsi)
  40026d:	00 00                	add    %al,(%rax)
  40026f:	00 20                	add    %ah,(%rax)
  400271:	00 00                	add    %al,(%rax)
	...

Disassembly of section .note.gnu.build-id:

0000000000400274 <.note.gnu.build-id>:
  400274:	04 00                	add    $0x0,%al
  400276:	00 00                	add    %al,(%rax)
  400278:	14 00                	adc    $0x0,%al
  40027a:	00 00                	add    %al,(%rax)
  40027c:	03 00                	add    (%rax),%eax
  40027e:	00 00                	add    %al,(%rax)
  400280:	47                   	rex.RXB
  400281:	4e 55                	rex.WRX push %rbp
  400283:	00 0d 94 a5 37 17    	add    %cl,0x1737a594(%rip)        # 1777a81d <__TMC_END__+0x171777b5>
  400289:	d0 4f 86             	rorb   -0x7a(%rdi)
  40028c:	7f a8                	jg     400236 <_init-0x2d2>
  40028e:	00 e0                	add    %ah,%al
  400290:	c1 e7 6c             	shl    $0x6c,%edi
  400293:	2b c0                	sub    %eax,%eax
  400295:	5b                   	pop    %rbx
  400296:	8f                   	(bad)  
  400297:	25                   	.byte 0x25

Disassembly of section .gnu.hash:

0000000000400298 <.gnu.hash>:
  400298:	01 00                	add    %eax,(%rax)
  40029a:	00 00                	add    %al,(%rax)
  40029c:	01 00                	add    %eax,(%rax)
  40029e:	00 00                	add    %al,(%rax)
  4002a0:	01 00                	add    %eax,(%rax)
	...

Disassembly of section .dynsym:

00000000004002b8 <.dynsym>:
	...
  4002d0:	46 00 00             	rex.RX add %r8b,(%rax)
  4002d3:	00 12                	add    %dl,(%rdx)
	...
  4002e5:	00 00                	add    %al,(%rax)
  4002e7:	00 10                	add    %dl,(%rax)
  4002e9:	00 00                	add    %al,(%rax)
  4002eb:	00 12                	add    %dl,(%rdx)
	...
  4002fd:	00 00                	add    %al,(%rax)
  4002ff:	00 15 00 00 00 12    	add    %dl,0x12000000(%rip)        # 12400305 <__TMC_END__+0x11dfd29d>
	...
  400315:	00 00                	add    %al,(%rax)
  400317:	00 26                	add    %ah,(%rsi)
  400319:	00 00                	add    %al,(%rax)
  40031b:	00 12                	add    %dl,(%rdx)
	...
  40032d:	00 00                	add    %al,(%rax)
  40032f:	00 34 00             	add    %dh,(%rax,%rax,1)
  400332:	00 00                	add    %al,(%rax)
  400334:	12 00                	adc    (%rax),%al
	...
  400346:	00 00                	add    %al,(%rax)
  400348:	4b 00 00             	rex.WXB add %al,(%r8)
  40034b:	00 20                	add    %ah,(%rax)
	...
  40035d:	00 00                	add    %al,(%rax)
  40035f:	00 2d 00 00 00 12    	add    %ch,0x12000000(%rip)        # 12400365 <__TMC_END__+0x11dfd2fd>
	...
  400375:	00 00                	add    %al,(%rax)
  400377:	00 0b                	add    %cl,(%rbx)
  400379:	00 00                	add    %al,(%rax)
  40037b:	00 12                	add    %dl,(%rdx)
	...

Disassembly of section .dynstr:

0000000000400390 <.dynstr>:
  400390:	00 6c 69 62          	add    %ch,0x62(%rcx,%rbp,2)
  400394:	63 2e                	movslq (%rsi),%ebp
  400396:	73 6f                	jae    400407 <_init-0x101>
  400398:	2e 36 00 65 78       	cs add %ah,%ss:0x78(%rbp)
  40039d:	69 74 00 70 75 74 73 	imul   $0x737475,0x70(%rax,%rax,1),%esi
  4003a4:	00 
  4003a5:	5f                   	pop    %rdi
  4003a6:	5f                   	pop    %rdi
  4003a7:	73 74                	jae    40041d <_init-0xeb>
  4003a9:	61                   	(bad)  
  4003aa:	63 6b 5f             	movslq 0x5f(%rbx),%ebp
  4003ad:	63 68 6b             	movslq 0x6b(%rax),%ebp
  4003b0:	5f                   	pop    %rdi
  4003b1:	66 61                	data16 (bad) 
  4003b3:	69 6c 00 70 72 69 6e 	imul   $0x746e6972,0x70(%rax,%rax,1),%ebp
  4003ba:	74 
  4003bb:	66 00 6d 61          	data16 add %ch,0x61(%rbp)
  4003bf:	6c                   	insb   (%dx),%es:(%rdi)
  4003c0:	6c                   	insb   (%dx),%es:(%rdi)
  4003c1:	6f                   	outsl  %ds:(%rsi),(%dx)
  4003c2:	63 00                	movslq (%rax),%eax
  4003c4:	5f                   	pop    %rdi
  4003c5:	5f                   	pop    %rdi
  4003c6:	6c                   	insb   (%dx),%es:(%rdi)
  4003c7:	69 62 63 5f 73 74 61 	imul   $0x6174735f,0x63(%rdx),%esp
  4003ce:	72 74                	jb     400444 <_init-0xc4>
  4003d0:	5f                   	pop    %rdi
  4003d1:	6d                   	insl   (%dx),%es:(%rdi)
  4003d2:	61                   	(bad)  
  4003d3:	69 6e 00 66 72 65 65 	imul   $0x65657266,0x0(%rsi),%ebp
  4003da:	00 5f 5f             	add    %bl,0x5f(%rdi)
  4003dd:	67 6d                	insl   (%dx),%es:(%edi)
  4003df:	6f                   	outsl  %ds:(%rsi),(%dx)
  4003e0:	6e                   	outsb  %ds:(%rsi),(%dx)
  4003e1:	5f                   	pop    %rdi
  4003e2:	73 74                	jae    400458 <_init-0xb0>
  4003e4:	61                   	(bad)  
  4003e5:	72 74                	jb     40045b <_init-0xad>
  4003e7:	5f                   	pop    %rdi
  4003e8:	5f                   	pop    %rdi
  4003e9:	00 47 4c             	add    %al,0x4c(%rdi)
  4003ec:	49                   	rex.WB
  4003ed:	42                   	rex.X
  4003ee:	43 5f                	rex.XB pop %r15
  4003f0:	32 2e                	xor    (%rsi),%ch
  4003f2:	34 00                	xor    $0x0,%al
  4003f4:	47                   	rex.RXB
  4003f5:	4c                   	rex.WR
  4003f6:	49                   	rex.WB
  4003f7:	42                   	rex.X
  4003f8:	43 5f                	rex.XB pop %r15
  4003fa:	32 2e                	xor    (%rsi),%ch
  4003fc:	32 2e                	xor    (%rsi),%ch
  4003fe:	35                   	.byte 0x35
	...

Disassembly of section .gnu.version:

0000000000400400 <.gnu.version>:
  400400:	00 00                	add    %al,(%rax)
  400402:	02 00                	add    (%rax),%al
  400404:	02 00                	add    (%rax),%al
  400406:	03 00                	add    (%rax),%eax
  400408:	02 00                	add    (%rax),%al
  40040a:	02 00                	add    (%rax),%al
  40040c:	00 00                	add    %al,(%rax)
  40040e:	02 00                	add    (%rax),%al
  400410:	02 00                	add    (%rax),%al

Disassembly of section .gnu.version_r:

0000000000400418 <.gnu.version_r>:
  400418:	01 00                	add    %eax,(%rax)
  40041a:	02 00                	add    (%rax),%al
  40041c:	01 00                	add    %eax,(%rax)
  40041e:	00 00                	add    %al,(%rax)
  400420:	10 00                	adc    %al,(%rax)
  400422:	00 00                	add    %al,(%rax)
  400424:	00 00                	add    %al,(%rax)
  400426:	00 00                	add    %al,(%rax)
  400428:	14 69                	adc    $0x69,%al
  40042a:	69 0d 00 00 03 00 5a 	imul   $0x5a,0x30000(%rip),%ecx        # 430434 <__FRAME_END__+0x2e42c>
  400431:	00 00 00 
  400434:	10 00                	adc    %al,(%rax)
  400436:	00 00                	add    %al,(%rax)
  400438:	75 1a                	jne    400454 <_init-0xb4>
  40043a:	69 09 00 00 02 00    	imul   $0x20000,(%rcx),%ecx
  400440:	64 00 00             	add    %al,%fs:(%rax)
  400443:	00 00                	add    %al,(%rax)
  400445:	00 00                	add    %al,(%rax)
	...

Disassembly of section .rela.dyn:

0000000000400448 <.rela.dyn>:
  400448:	f8                   	clc    
  400449:	2f                   	(bad)  
  40044a:	60                   	(bad)  
  40044b:	00 00                	add    %al,(%rax)
  40044d:	00 00                	add    %al,(%rax)
  40044f:	00 06                	add    %al,(%rsi)
  400451:	00 00                	add    %al,(%rax)
  400453:	00 06                	add    %al,(%rsi)
	...

Disassembly of section .rela.plt:

0000000000400460 <.rela.plt>:
  400460:	18 30                	sbb    %dh,(%rax)
  400462:	60                   	(bad)  
  400463:	00 00                	add    %al,(%rax)
  400465:	00 00                	add    %al,(%rax)
  400467:	00 07                	add    %al,(%rdi)
  400469:	00 00                	add    %al,(%rax)
  40046b:	00 01                	add    %al,(%rcx)
	...
  400475:	00 00                	add    %al,(%rax)
  400477:	00 20                	add    %ah,(%rax)
  400479:	30 60 00             	xor    %ah,0x0(%rax)
  40047c:	00 00                	add    %al,(%rax)
  40047e:	00 00                	add    %al,(%rax)
  400480:	07                   	(bad)  
  400481:	00 00                	add    %al,(%rax)
  400483:	00 02                	add    %al,(%rdx)
	...
  40048d:	00 00                	add    %al,(%rax)
  40048f:	00 28                	add    %ch,(%rax)
  400491:	30 60 00             	xor    %ah,0x0(%rax)
  400494:	00 00                	add    %al,(%rax)
  400496:	00 00                	add    %al,(%rax)
  400498:	07                   	(bad)  
  400499:	00 00                	add    %al,(%rax)
  40049b:	00 03                	add    %al,(%rbx)
	...
  4004a5:	00 00                	add    %al,(%rax)
  4004a7:	00 30                	add    %dh,(%rax)
  4004a9:	30 60 00             	xor    %ah,0x0(%rax)
  4004ac:	00 00                	add    %al,(%rax)
  4004ae:	00 00                	add    %al,(%rax)
  4004b0:	07                   	(bad)  
  4004b1:	00 00                	add    %al,(%rax)
  4004b3:	00 04 00             	add    %al,(%rax,%rax,1)
	...
  4004be:	00 00                	add    %al,(%rax)
  4004c0:	38 30                	cmp    %dh,(%rax)
  4004c2:	60                   	(bad)  
  4004c3:	00 00                	add    %al,(%rax)
  4004c5:	00 00                	add    %al,(%rax)
  4004c7:	00 07                	add    %al,(%rdi)
  4004c9:	00 00                	add    %al,(%rax)
  4004cb:	00 05 00 00 00 00    	add    %al,0x0(%rip)        # 4004d1 <_init-0x37>
  4004d1:	00 00                	add    %al,(%rax)
  4004d3:	00 00                	add    %al,(%rax)
  4004d5:	00 00                	add    %al,(%rax)
  4004d7:	00 40 30             	add    %al,0x30(%rax)
  4004da:	60                   	(bad)  
  4004db:	00 00                	add    %al,(%rax)
  4004dd:	00 00                	add    %al,(%rax)
  4004df:	00 07                	add    %al,(%rdi)
  4004e1:	00 00                	add    %al,(%rax)
  4004e3:	00 07                	add    %al,(%rdi)
	...
  4004ed:	00 00                	add    %al,(%rax)
  4004ef:	00 48 30             	add    %cl,0x30(%rax)
  4004f2:	60                   	(bad)  
  4004f3:	00 00                	add    %al,(%rax)
  4004f5:	00 00                	add    %al,(%rax)
  4004f7:	00 07                	add    %al,(%rdi)
  4004f9:	00 00                	add    %al,(%rax)
  4004fb:	00 08                	add    %cl,(%rax)
	...

Disassembly of section .init:

0000000000400508 <_init>:
  400508:	48 83 ec 08          	sub    $0x8,%rsp
  40050c:	48 8b 05 e5 2a 20 00 	mov    0x202ae5(%rip),%rax        # 602ff8 <_DYNAMIC+0x1d0>
  400513:	48 85 c0             	test   %rax,%rax
  400516:	74 05                	je     40051d <_init+0x15>
  400518:	e8 93 00 00 00       	callq  4005b0 <exit@plt+0x10>
  40051d:	48 83 c4 08          	add    $0x8,%rsp
  400521:	c3                   	retq   

Disassembly of section .plt:

0000000000400530 <free@plt-0x10>:
  400530:	ff 35 d2 2a 20 00    	pushq  0x202ad2(%rip)        # 603008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400536:	ff 25 d4 2a 20 00    	jmpq   *0x202ad4(%rip)        # 603010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40053c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400540 <free@plt>:
  400540:	ff 25 d2 2a 20 00    	jmpq   *0x202ad2(%rip)        # 603018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400546:	68 00 00 00 00       	pushq  $0x0
  40054b:	e9 e0 ff ff ff       	jmpq   400530 <_init+0x28>

0000000000400550 <puts@plt>:
  400550:	ff 25 ca 2a 20 00    	jmpq   *0x202aca(%rip)        # 603020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400556:	68 01 00 00 00       	pushq  $0x1
  40055b:	e9 d0 ff ff ff       	jmpq   400530 <_init+0x28>

0000000000400560 <__stack_chk_fail@plt>:
  400560:	ff 25 c2 2a 20 00    	jmpq   *0x202ac2(%rip)        # 603028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400566:	68 02 00 00 00       	pushq  $0x2
  40056b:	e9 c0 ff ff ff       	jmpq   400530 <_init+0x28>

0000000000400570 <printf@plt>:
  400570:	ff 25 ba 2a 20 00    	jmpq   *0x202aba(%rip)        # 603030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400576:	68 03 00 00 00       	pushq  $0x3
  40057b:	e9 b0 ff ff ff       	jmpq   400530 <_init+0x28>

0000000000400580 <__libc_start_main@plt>:
  400580:	ff 25 b2 2a 20 00    	jmpq   *0x202ab2(%rip)        # 603038 <_GLOBAL_OFFSET_TABLE_+0x38>
  400586:	68 04 00 00 00       	pushq  $0x4
  40058b:	e9 a0 ff ff ff       	jmpq   400530 <_init+0x28>

0000000000400590 <malloc@plt>:
  400590:	ff 25 aa 2a 20 00    	jmpq   *0x202aaa(%rip)        # 603040 <_GLOBAL_OFFSET_TABLE_+0x40>
  400596:	68 05 00 00 00       	pushq  $0x5
  40059b:	e9 90 ff ff ff       	jmpq   400530 <_init+0x28>

00000000004005a0 <exit@plt>:
  4005a0:	ff 25 a2 2a 20 00    	jmpq   *0x202aa2(%rip)        # 603048 <_GLOBAL_OFFSET_TABLE_+0x48>
  4005a6:	68 06 00 00 00       	pushq  $0x6
  4005ab:	e9 80 ff ff ff       	jmpq   400530 <_init+0x28>

Disassembly of section .plt.got:

00000000004005b0 <.plt.got>:
  4005b0:	ff 25 42 2a 20 00    	jmpq   *0x202a42(%rip)        # 602ff8 <_DYNAMIC+0x1d0>
  4005b6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000000004005c0 <_start>:
  4005c0:	31 ed                	xor    %ebp,%ebp
  4005c2:	49 89 d1             	mov    %rdx,%r9
  4005c5:	5e                   	pop    %rsi
  4005c6:	48 89 e2             	mov    %rsp,%rdx
  4005c9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4005cd:	50                   	push   %rax
  4005ce:	54                   	push   %rsp
  4005cf:	49 c7 c0 50 19 40 00 	mov    $0x401950,%r8
  4005d6:	48 c7 c1 e0 18 40 00 	mov    $0x4018e0,%rcx
  4005dd:	48 c7 c7 83 15 40 00 	mov    $0x401583,%rdi
  4005e4:	e8 97 ff ff ff       	callq  400580 <__libc_start_main@plt>
  4005e9:	f4                   	hlt    
  4005ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004005f0 <deregister_tm_clones>:
  4005f0:	b8 6f 30 60 00       	mov    $0x60306f,%eax
  4005f5:	55                   	push   %rbp
  4005f6:	48 2d 68 30 60 00    	sub    $0x603068,%rax
  4005fc:	48 83 f8 0e          	cmp    $0xe,%rax
  400600:	48 89 e5             	mov    %rsp,%rbp
  400603:	76 1b                	jbe    400620 <deregister_tm_clones+0x30>
  400605:	b8 00 00 00 00       	mov    $0x0,%eax
  40060a:	48 85 c0             	test   %rax,%rax
  40060d:	74 11                	je     400620 <deregister_tm_clones+0x30>
  40060f:	5d                   	pop    %rbp
  400610:	bf 68 30 60 00       	mov    $0x603068,%edi
  400615:	ff e0                	jmpq   *%rax
  400617:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40061e:	00 00 
  400620:	5d                   	pop    %rbp
  400621:	c3                   	retq   
  400622:	0f 1f 40 00          	nopl   0x0(%rax)
  400626:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40062d:	00 00 00 

0000000000400630 <register_tm_clones>:
  400630:	be 68 30 60 00       	mov    $0x603068,%esi
  400635:	55                   	push   %rbp
  400636:	48 81 ee 68 30 60 00 	sub    $0x603068,%rsi
  40063d:	48 c1 fe 03          	sar    $0x3,%rsi
  400641:	48 89 e5             	mov    %rsp,%rbp
  400644:	48 89 f0             	mov    %rsi,%rax
  400647:	48 c1 e8 3f          	shr    $0x3f,%rax
  40064b:	48 01 c6             	add    %rax,%rsi
  40064e:	48 d1 fe             	sar    %rsi
  400651:	74 15                	je     400668 <register_tm_clones+0x38>
  400653:	b8 00 00 00 00       	mov    $0x0,%eax
  400658:	48 85 c0             	test   %rax,%rax
  40065b:	74 0b                	je     400668 <register_tm_clones+0x38>
  40065d:	5d                   	pop    %rbp
  40065e:	bf 68 30 60 00       	mov    $0x603068,%edi
  400663:	ff e0                	jmpq   *%rax
  400665:	0f 1f 00             	nopl   (%rax)
  400668:	5d                   	pop    %rbp
  400669:	c3                   	retq   
  40066a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400670 <__do_global_dtors_aux>:
  400670:	80 3d ed 29 20 00 00 	cmpb   $0x0,0x2029ed(%rip)        # 603064 <_edata>
  400677:	75 11                	jne    40068a <__do_global_dtors_aux+0x1a>
  400679:	55                   	push   %rbp
  40067a:	48 89 e5             	mov    %rsp,%rbp
  40067d:	e8 6e ff ff ff       	callq  4005f0 <deregister_tm_clones>
  400682:	5d                   	pop    %rbp
  400683:	c6 05 da 29 20 00 01 	movb   $0x1,0x2029da(%rip)        # 603064 <_edata>
  40068a:	f3 c3                	repz retq 
  40068c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400690 <frame_dummy>:
  400690:	bf 20 2e 60 00       	mov    $0x602e20,%edi
  400695:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  400699:	75 05                	jne    4006a0 <frame_dummy+0x10>
  40069b:	eb 93                	jmp    400630 <register_tm_clones>
  40069d:	0f 1f 00             	nopl   (%rax)
  4006a0:	b8 00 00 00 00       	mov    $0x0,%eax
  4006a5:	48 85 c0             	test   %rax,%rax
  4006a8:	74 f1                	je     40069b <frame_dummy+0xb>
  4006aa:	55                   	push   %rbp
  4006ab:	48 89 e5             	mov    %rsp,%rbp
  4006ae:	ff d0                	callq  *%rax
  4006b0:	5d                   	pop    %rbp
  4006b1:	e9 7a ff ff ff       	jmpq   400630 <register_tm_clones>

00000000004006b6 <my_itoa>:
 *
 */
 

uint8_t my_itoa(int32_t data, uint8_t * ptr, uint32_t base)
{
  4006b6:	55                   	push   %rbp
  4006b7:	48 89 e5             	mov    %rsp,%rbp
  4006ba:	89 7d ec             	mov    %edi,-0x14(%rbp)
  4006bd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4006c1:	89 55 e8             	mov    %edx,-0x18(%rbp)
	uint32_t check=data; //data is copied into check to find out the length of the string without affecting data
  4006c4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4006c7:	89 45 fc             	mov    %eax,-0x4(%rbp)
	uint8_t stringsize=0;
  4006ca:	c6 45 f9 00          	movb   $0x0,-0x7(%rbp)
	uint8_t length = 0;
  4006ce:	c6 45 fa 00          	movb   $0x0,-0x6(%rbp)
	uint8_t sign=0;      // sign=0 means the given signed integer is positive and sign=1 means the given signed integer is negative
  4006d2:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
	if(data<0)
  4006d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  4006da:	79 27                	jns    400703 <my_itoa+0x4d>
	{
		data=-data;  //data is made positive so that calculations become easier , the minus sign is added later on in the code
  4006dc:	f7 5d ec             	negl   -0x14(%rbp)
		sign=1;
  4006df:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
                check = data;
  4006e3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4006e6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	}		
                while(check!=0)  //the number is divided by the base until the quotient is zero , this helps in finding out the length of the string
  4006e9:	eb 18                	jmp    400703 <my_itoa+0x4d>
		{
                  check=check/base;
  4006eb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4006ee:	ba 00 00 00 00       	mov    $0x0,%edx
  4006f3:	f7 75 e8             	divl   -0x18(%rbp)
  4006f6:	89 45 fc             	mov    %eax,-0x4(%rbp)
                  stringsize ++;
  4006f9:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  4006fd:	83 c0 01             	add    $0x1,%eax
  400700:	88 45 f9             	mov    %al,-0x7(%rbp)
	{
		data=-data;  //data is made positive so that calculations become easier , the minus sign is added later on in the code
		sign=1;
                check = data;
	}		
                while(check!=0)  //the number is divided by the base until the quotient is zero , this helps in finding out the length of the string
  400703:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400707:	75 e2                	jne    4006eb <my_itoa+0x35>
		{
                  check=check/base;
                  stringsize ++;
		}
		length = stringsize; 
  400709:	0f b6 45 f9          	movzbl -0x7(%rbp),%eax
  40070d:	88 45 fa             	mov    %al,-0x6(%rbp)
		ptr = ptr+stringsize+sign;
  400710:	0f b6 55 f9          	movzbl -0x7(%rbp),%edx
  400714:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  400718:	48 01 d0             	add    %rdx,%rax
  40071b:	48 01 45 e0          	add    %rax,-0x20(%rbp)
                *(ptr)='\0'; //the last byte of the string is NULL	
  40071f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400723:	c6 00 00             	movb   $0x0,(%rax)
		while(length>0)
  400726:	eb 71                	jmp    400799 <my_itoa+0xe3>
	          {
			  if(data!=0)
  400728:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  40072c:	74 05                	je     400733 <my_itoa+0x7d>
			  {
				  ptr--;
  40072e:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
			  }
		       if(data%base>=10)
  400733:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400736:	ba 00 00 00 00       	mov    $0x0,%edx
  40073b:	f7 75 e8             	divl   -0x18(%rbp)
  40073e:	89 d0                	mov    %edx,%eax
  400740:	83 f8 09             	cmp    $0x9,%eax
  400743:	76 26                	jbe    40076b <my_itoa+0xb5>
		       {
		       *ptr=(data%base)+55;  //this moves the ASCII values of numbers between 10 and 15 into the pointer location
  400745:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400748:	ba 00 00 00 00       	mov    $0x0,%edx
  40074d:	f7 75 e8             	divl   -0x18(%rbp)
  400750:	89 d0                	mov    %edx,%eax
  400752:	8d 50 37             	lea    0x37(%rax),%edx
  400755:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400759:	88 10                	mov    %dl,(%rax)
			data=data/base;
  40075b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40075e:	ba 00 00 00 00       	mov    $0x0,%edx
  400763:	f7 75 e8             	divl   -0x18(%rbp)
  400766:	89 45 ec             	mov    %eax,-0x14(%rbp)
  400769:	eb 24                	jmp    40078f <my_itoa+0xd9>
		       }	
		       else
		       {
		        *ptr=(data%base)+48; //this moves the ASCII values of numbers between 0 and 9 into the pointer location
  40076b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40076e:	ba 00 00 00 00       	mov    $0x0,%edx
  400773:	f7 75 e8             	divl   -0x18(%rbp)
  400776:	89 d0                	mov    %edx,%eax
  400778:	8d 50 30             	lea    0x30(%rax),%edx
  40077b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40077f:	88 10                	mov    %dl,(%rax)
			 data=data/base;
  400781:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400784:	ba 00 00 00 00       	mov    $0x0,%edx
  400789:	f7 75 e8             	divl   -0x18(%rbp)
  40078c:	89 45 ec             	mov    %eax,-0x14(%rbp)
		       }
                    length--;
  40078f:	0f b6 45 fa          	movzbl -0x6(%rbp),%eax
  400793:	83 e8 01             	sub    $0x1,%eax
  400796:	88 45 fa             	mov    %al,-0x6(%rbp)
                  stringsize ++;
		}
		length = stringsize; 
		ptr = ptr+stringsize+sign;
                *(ptr)='\0'; //the last byte of the string is NULL	
		while(length>0)
  400799:	80 7d fa 00          	cmpb   $0x0,-0x6(%rbp)
  40079d:	75 89                	jne    400728 <my_itoa+0x72>
		        *ptr=(data%base)+48; //this moves the ASCII values of numbers between 0 and 9 into the pointer location
			 data=data/base;
		       }
                    length--;
                   }
                 if (sign==1)
  40079f:	80 7d fb 01          	cmpb   $0x1,-0x5(%rbp)
  4007a3:	75 0c                	jne    4007b1 <my_itoa+0xfb>
                {
		     ptr = ptr-1;
  4007a5:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
                     *ptr=45; //ASCII value of minus sign
  4007aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4007ae:	c6 00 2d             	movb   $0x2d,(%rax)
                }
                return(stringsize+sign+1);
  4007b1:	0f b6 55 f9          	movzbl -0x7(%rbp),%edx
  4007b5:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  4007b9:	01 d0                	add    %edx,%eax
  4007bb:	83 c0 01             	add    $0x1,%eax
}
  4007be:	5d                   	pop    %rbp
  4007bf:	c3                   	retq   

00000000004007c0 <my_atoi>:
 * @return - the signed integer
 *
 */

int32_t my_atoi(uint8_t * ptr, uint8_t digits, uint32_t base)
{
  4007c0:	55                   	push   %rbp
  4007c1:	48 89 e5             	mov    %rsp,%rbp
  4007c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4007c8:	89 f0                	mov    %esi,%eax
  4007ca:	89 55 e0             	mov    %edx,-0x20(%rbp)
  4007cd:	88 45 e4             	mov    %al,-0x1c(%rbp)
 uint8_t i=0,j=0,n=0;
  4007d0:	c6 45 f4 00          	movb   $0x0,-0xc(%rbp)
  4007d4:	c6 45 f5 00          	movb   $0x0,-0xb(%rbp)
  4007d8:	c6 45 f6 00          	movb   $0x0,-0xa(%rbp)
 uint8_t sign=0;
  4007dc:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
 uint32_t b=1;
  4007e0:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
 int32_t number=0;
  4007e7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   if(*ptr==45)
  4007ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4007f2:	0f b6 00             	movzbl (%rax),%eax
  4007f5:	3c 2d                	cmp    $0x2d,%al
  4007f7:	75 13                	jne    40080c <my_atoi+0x4c>
   {
   ptr++;
  4007f9:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
   sign=1;
  4007fe:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
   digits--;
  400802:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  400806:	83 e8 01             	sub    $0x1,%eax
  400809:	88 45 e4             	mov    %al,-0x1c(%rbp)
   }
   for(i=digits-1;i!=0;i--)
  40080c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  400810:	83 e8 01             	sub    $0x1,%eax
  400813:	88 45 f4             	mov    %al,-0xc(%rbp)
  400816:	eb 7f                	jmp    400897 <my_atoi+0xd7>
   {
     b=1;
  400818:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
     if(*ptr>=65)
  40081f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400823:	0f b6 00             	movzbl (%rax),%eax
  400826:	3c 40                	cmp    $0x40,%al
  400828:	76 0f                	jbe    400839 <my_atoi+0x79>
      {
      n=*ptr-55;  // n is between A to F
  40082a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40082e:	0f b6 00             	movzbl (%rax),%eax
  400831:	83 e8 37             	sub    $0x37,%eax
  400834:	88 45 f6             	mov    %al,-0xa(%rbp)
  400837:	eb 0d                	jmp    400846 <my_atoi+0x86>
      }
     else
      {
      n=*ptr-48; // n is between 0 to 9   
  400839:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40083d:	0f b6 00             	movzbl (%rax),%eax
  400840:	83 e8 30             	sub    $0x30,%eax
  400843:	88 45 f6             	mov    %al,-0xa(%rbp)
      } 
     for(j=i-1;j!=0;j--)
  400846:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  40084a:	83 e8 01             	sub    $0x1,%eax
  40084d:	88 45 f5             	mov    %al,-0xb(%rbp)
  400850:	eb 14                	jmp    400866 <my_atoi+0xa6>
     {
     b=b*base;
  400852:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400855:	0f af 45 e0          	imul   -0x20(%rbp),%eax
  400859:	89 45 f8             	mov    %eax,-0x8(%rbp)
      }
     else
      {
      n=*ptr-48; // n is between 0 to 9   
      } 
     for(j=i-1;j!=0;j--)
  40085c:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  400860:	83 e8 01             	sub    $0x1,%eax
  400863:	88 45 f5             	mov    %al,-0xb(%rbp)
  400866:	80 7d f5 00          	cmpb   $0x0,-0xb(%rbp)
  40086a:	75 e6                	jne    400852 <my_atoi+0x92>
     {
     b=b*base;
     }
    number=(n*b)+number;
  40086c:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  400870:	0f af 45 f8          	imul   -0x8(%rbp),%eax
  400874:	89 c2                	mov    %eax,%edx
  400876:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400879:	01 d0                	add    %edx,%eax
  40087b:	89 45 fc             	mov    %eax,-0x4(%rbp)
    digits--;
  40087e:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  400882:	83 e8 01             	sub    $0x1,%eax
  400885:	88 45 e4             	mov    %al,-0x1c(%rbp)
    ptr++;
  400888:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
   {
   ptr++;
   sign=1;
   digits--;
   }
   for(i=digits-1;i!=0;i--)
  40088d:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  400891:	83 e8 01             	sub    $0x1,%eax
  400894:	88 45 f4             	mov    %al,-0xc(%rbp)
  400897:	80 7d f4 00          	cmpb   $0x0,-0xc(%rbp)
  40089b:	0f 85 77 ff ff ff    	jne    400818 <my_atoi+0x58>
     }
    number=(n*b)+number;
    digits--;
    ptr++;
   }
   if(sign==1)
  4008a1:	80 7d f7 01          	cmpb   $0x1,-0x9(%rbp)
  4008a5:	75 03                	jne    4008aa <my_atoi+0xea>
   {
   number=-number;
  4008a7:	f7 5d fc             	negl   -0x4(%rbp)
   }
  return(number);
  4008aa:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  4008ad:	5d                   	pop    %rbp
  4008ae:	c3                   	retq   

00000000004008af <big_to_little32>:
 *          2nd argument :length of the data array,
 * @return - 0 for successful conversion , 1 for NULL pointer and 2 for an empty array 
 */
 
int8_t big_to_little32(uint32_t * data, uint32_t length)
{
  4008af:	55                   	push   %rbp
  4008b0:	48 89 e5             	mov    %rsp,%rbp
  4008b3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4008b7:	89 75 e4             	mov    %esi,-0x1c(%rbp)
int8_t i=length-1;
  4008ba:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  4008bd:	83 e8 01             	sub    $0x1,%eax
  4008c0:	88 45 fb             	mov    %al,-0x5(%rbp)
uint32_t t;
 if(data==NULL)
  4008c3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4008c8:	75 07                	jne    4008d1 <big_to_little32+0x22>
 {
  return 1;
  4008ca:	b8 01 00 00 00       	mov    $0x1,%eax
  4008cf:	eb 69                	jmp    40093a <big_to_little32+0x8b>
 }
 if(*data=='\0')
  4008d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4008d5:	8b 00                	mov    (%rax),%eax
  4008d7:	85 c0                	test   %eax,%eax
  4008d9:	75 54                	jne    40092f <big_to_little32+0x80>
 {
  return 2;
  4008db:	b8 02 00 00 00       	mov    $0x2,%eax
  4008e0:	eb 58                	jmp    40093a <big_to_little32+0x8b>
 }
 else
 {
  while(i>0)
  {
   t=*(data+i);
  4008e2:	48 0f be 45 fb       	movsbq -0x5(%rbp),%rax
  4008e7:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  4008ee:	00 
  4008ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4008f3:	48 01 d0             	add    %rdx,%rax
  4008f6:	8b 00                	mov    (%rax),%eax
  4008f8:	89 45 fc             	mov    %eax,-0x4(%rbp)
   *(data+i)=*data;
  4008fb:	48 0f be 45 fb       	movsbq -0x5(%rbp),%rax
  400900:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  400907:	00 
  400908:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40090c:	48 01 c2             	add    %rax,%rdx
  40090f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400913:	8b 00                	mov    (%rax),%eax
  400915:	89 02                	mov    %eax,(%rdx)
   *data =t;
  400917:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40091b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40091e:	89 10                	mov    %edx,(%rax)
   data++;
  400920:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
   i=i-2;
  400925:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  400929:	83 e8 02             	sub    $0x2,%eax
  40092c:	88 45 fb             	mov    %al,-0x5(%rbp)
 {
  return 2;
 }
 else
 {
  while(i>0)
  40092f:	80 7d fb 00          	cmpb   $0x0,-0x5(%rbp)
  400933:	7f ad                	jg     4008e2 <big_to_little32+0x33>
   *(data+i)=*data;
   *data =t;
   data++;
   i=i-2;
  }
 return 0;
  400935:	b8 00 00 00 00       	mov    $0x0,%eax
 }
}
  40093a:	5d                   	pop    %rbp
  40093b:	c3                   	retq   

000000000040093c <little_to_big32>:
 *          2nd argument :length of the data array,
 * @return - 0 for successful conversion , 1 for NULL pointer and 2 for an empty array 
 */

int8_t little_to_big32(uint32_t * data, uint32_t length)
{
  40093c:	55                   	push   %rbp
  40093d:	48 89 e5             	mov    %rsp,%rbp
  400940:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400944:	89 75 e4             	mov    %esi,-0x1c(%rbp)
int8_t i=length-1;
  400947:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40094a:	83 e8 01             	sub    $0x1,%eax
  40094d:	88 45 fb             	mov    %al,-0x5(%rbp)
uint32_t t;
 if(data==NULL)
  400950:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  400955:	75 07                	jne    40095e <little_to_big32+0x22>
 {
  return 1;
  400957:	b8 01 00 00 00       	mov    $0x1,%eax
  40095c:	eb 69                	jmp    4009c7 <little_to_big32+0x8b>
 }
 if(*data=='\0')
  40095e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400962:	8b 00                	mov    (%rax),%eax
  400964:	85 c0                	test   %eax,%eax
  400966:	75 54                	jne    4009bc <little_to_big32+0x80>
 {
  return 2;
  400968:	b8 02 00 00 00       	mov    $0x2,%eax
  40096d:	eb 58                	jmp    4009c7 <little_to_big32+0x8b>
 }
 else
 {
  while(i>0)
  {
   t=*(data+i);
  40096f:	48 0f be 45 fb       	movsbq -0x5(%rbp),%rax
  400974:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40097b:	00 
  40097c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400980:	48 01 d0             	add    %rdx,%rax
  400983:	8b 00                	mov    (%rax),%eax
  400985:	89 45 fc             	mov    %eax,-0x4(%rbp)
   *(data+i)=*data;
  400988:	48 0f be 45 fb       	movsbq -0x5(%rbp),%rax
  40098d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  400994:	00 
  400995:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400999:	48 01 c2             	add    %rax,%rdx
  40099c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4009a0:	8b 00                	mov    (%rax),%eax
  4009a2:	89 02                	mov    %eax,(%rdx)
   *data =t;
  4009a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4009a8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4009ab:	89 10                	mov    %edx,(%rax)
   data++;
  4009ad:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
   i=i-2;
  4009b2:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  4009b6:	83 e8 02             	sub    $0x2,%eax
  4009b9:	88 45 fb             	mov    %al,-0x5(%rbp)
 {
  return 2;
 }
 else
 {
  while(i>0)
  4009bc:	80 7d fb 00          	cmpb   $0x0,-0x5(%rbp)
  4009c0:	7f ad                	jg     40096f <little_to_big32+0x33>
   *(data+i)=*data;
   *data =t;
   data++;
   i=i-2;
  }
  return 0;
  4009c2:	b8 00 00 00 00       	mov    $0x0,%eax
 }
}
  4009c7:	5d                   	pop    %rbp
  4009c8:	c3                   	retq   

00000000004009c9 <test_data1>:
#include "memory.h"
#include "conversion.h"
#include "debug.h"
#include "project1.h"

int8_t test_data1() {
  4009c9:	55                   	push   %rbp
  4009ca:	48 89 e5             	mov    %rsp,%rbp
  4009cd:	48 83 ec 20          	sub    $0x20,%rsp
  uint8_t * ptr;
  int32_t num = -4096;
  4009d1:	c7 45 ec 00 f0 ff ff 	movl   $0xfffff000,-0x14(%rbp)
  uint32_t digits;
  int32_t value;

  printf("\ntest_data1();\n");
  4009d8:	bf 68 19 40 00       	mov    $0x401968,%edi
  4009dd:	e8 6e fb ff ff       	callq  400550 <puts@plt>
  ptr = (uint8_t*) reserve_words( DATA_SET_SIZE_W );
  4009e2:	bf 0a 00 00 00       	mov    $0xa,%edi
  4009e7:	e8 70 0e 00 00       	callq  40185c <reserve_words>
  4009ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  if (! ptr )
  4009f0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4009f5:	75 07                	jne    4009fe <test_data1+0x35>
  {
    return TEST_ERROR;
  4009f7:	b8 01 00 00 00       	mov    $0x1,%eax
  4009fc:	eb 58                	jmp    400a56 <test_data1+0x8d>
  }

  digits = my_itoa( num, ptr, BASE_16);   
  4009fe:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  400a02:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400a05:	ba 10 00 00 00       	mov    $0x10,%edx
  400a0a:	48 89 ce             	mov    %rcx,%rsi
  400a0d:	89 c7                	mov    %eax,%edi
  400a0f:	e8 a2 fc ff ff       	callq  4006b6 <my_itoa>
  400a14:	0f b6 c0             	movzbl %al,%eax
  400a17:	89 45 f0             	mov    %eax,-0x10(%rbp)
  value = my_atoi( ptr, digits, BASE_16);
  400a1a:	8b 45 f0             	mov    -0x10(%rbp),%eax
  400a1d:	0f b6 c8             	movzbl %al,%ecx
  400a20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400a24:	ba 10 00 00 00       	mov    $0x10,%edx
  400a29:	89 ce                	mov    %ecx,%esi
  400a2b:	48 89 c7             	mov    %rax,%rdi
  400a2e:	e8 8d fd ff ff       	callq  4007c0 <my_atoi>
  400a33:	89 45 f4             	mov    %eax,-0xc(%rbp)
  #ifdef VERBOSE
  printf("  Initial number: %d\n", num);  
  printf("  Final Decimal number: %d\n", value);  
  #endif
  free_words( (uint32_t*)ptr );
  400a36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400a3a:	48 89 c7             	mov    %rax,%rdi
  400a3d:	e8 5d 0e 00 00       	callq  40189f <free_words>

  if ( value != num )
  400a42:	8b 45 f4             	mov    -0xc(%rbp),%eax
  400a45:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  400a48:	74 07                	je     400a51 <test_data1+0x88>
  {
    return TEST_ERROR;
  400a4a:	b8 01 00 00 00       	mov    $0x1,%eax
  400a4f:	eb 05                	jmp    400a56 <test_data1+0x8d>
  }
  return TEST_NO_ERROR;
  400a51:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400a56:	c9                   	leaveq 
  400a57:	c3                   	retq   

0000000000400a58 <test_data2>:

int8_t test_data2() {
  400a58:	55                   	push   %rbp
  400a59:	48 89 e5             	mov    %rsp,%rbp
  400a5c:	48 83 ec 20          	sub    $0x20,%rsp
  uint8_t * ptr;
  int32_t num = 123456;
  400a60:	c7 45 ec 40 e2 01 00 	movl   $0x1e240,-0x14(%rbp)
  uint32_t digits;
  int32_t value;

  printf("test_data2();\n");
  400a67:	bf 77 19 40 00       	mov    $0x401977,%edi
  400a6c:	e8 df fa ff ff       	callq  400550 <puts@plt>
  ptr = (uint8_t*) reserve_words( DATA_SET_SIZE_W );
  400a71:	bf 0a 00 00 00       	mov    $0xa,%edi
  400a76:	e8 e1 0d 00 00       	callq  40185c <reserve_words>
  400a7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  if (! ptr )
  400a7f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  400a84:	75 07                	jne    400a8d <test_data2+0x35>
  {
    return TEST_ERROR;
  400a86:	b8 01 00 00 00       	mov    $0x1,%eax
  400a8b:	eb 58                	jmp    400ae5 <test_data2+0x8d>
  }

  digits = my_itoa( num, ptr, BASE_10);
  400a8d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  400a91:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400a94:	ba 0a 00 00 00       	mov    $0xa,%edx
  400a99:	48 89 ce             	mov    %rcx,%rsi
  400a9c:	89 c7                	mov    %eax,%edi
  400a9e:	e8 13 fc ff ff       	callq  4006b6 <my_itoa>
  400aa3:	0f b6 c0             	movzbl %al,%eax
  400aa6:	89 45 f0             	mov    %eax,-0x10(%rbp)
  value = my_atoi( ptr, digits, BASE_10);
  400aa9:	8b 45 f0             	mov    -0x10(%rbp),%eax
  400aac:	0f b6 c8             	movzbl %al,%ecx
  400aaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400ab3:	ba 0a 00 00 00       	mov    $0xa,%edx
  400ab8:	89 ce                	mov    %ecx,%esi
  400aba:	48 89 c7             	mov    %rax,%rdi
  400abd:	e8 fe fc ff ff       	callq  4007c0 <my_atoi>
  400ac2:	89 45 f4             	mov    %eax,-0xc(%rbp)
  #ifdef VERBOSE
  printf("  Initial Decimal number: %d\n", num);  
  printf("  Final Decimal number: %d\n", value);  
  #endif
  free_words( (uint32_t*)ptr );
  400ac5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400ac9:	48 89 c7             	mov    %rax,%rdi
  400acc:	e8 ce 0d 00 00       	callq  40189f <free_words>

  if ( value != num )
  400ad1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  400ad4:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  400ad7:	74 07                	je     400ae0 <test_data2+0x88>
  {
    return TEST_ERROR;
  400ad9:	b8 01 00 00 00       	mov    $0x1,%eax
  400ade:	eb 05                	jmp    400ae5 <test_data2+0x8d>
  }
  return TEST_NO_ERROR;
  400ae0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400ae5:	c9                   	leaveq 
  400ae6:	c3                   	retq   

0000000000400ae7 <test_memmove1>:

int8_t test_memmove1() {
  400ae7:	55                   	push   %rbp
  400ae8:	48 89 e5             	mov    %rsp,%rbp
  400aeb:	48 83 ec 20          	sub    $0x20,%rsp
  uint8_t i;
  int8_t ret = TEST_NO_ERROR;
  400aef:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
  uint8_t * set;
  uint8_t * ptra;
  uint8_t * ptrb;

  printf("test_memmove1() - NO OVERLAP\n");
  400af3:	bf 85 19 40 00       	mov    $0x401985,%edi
  400af8:	e8 53 fa ff ff       	callq  400550 <puts@plt>
  set = (uint8_t*) reserve_words( MEM_SET_SIZE_W );
  400afd:	bf 08 00 00 00       	mov    $0x8,%edi
  400b02:	e8 55 0d 00 00       	callq  40185c <reserve_words>
  400b07:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

  if (! set ) 
  400b0b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  400b10:	75 0a                	jne    400b1c <test_memmove1+0x35>
  {
    return TEST_ERROR;
  400b12:	b8 01 00 00 00       	mov    $0x1,%eax
  400b17:	e9 b6 00 00 00       	jmpq   400bd2 <test_memmove1+0xeb>
  }
  
  ptra = &set[0];
  400b1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400b20:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  ptrb = &set[16];
  400b24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400b28:	48 83 c0 10          	add    $0x10,%rax
  400b2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  
  /* Initialize the set to test values */
  for( i = 0; i < MEM_SET_SIZE_B; i++)
  400b30:	c6 45 e6 00          	movb   $0x0,-0x1a(%rbp)
  400b34:	eb 1b                	jmp    400b51 <test_memmove1+0x6a>
  {
    set[i] = i;
  400b36:	0f b6 55 e6          	movzbl -0x1a(%rbp),%edx
  400b3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400b3e:	48 01 c2             	add    %rax,%rdx
  400b41:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400b45:	88 02                	mov    %al,(%rdx)
  
  ptra = &set[0];
  ptrb = &set[16];
  
  /* Initialize the set to test values */
  for( i = 0; i < MEM_SET_SIZE_B; i++)
  400b47:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400b4b:	83 c0 01             	add    $0x1,%eax
  400b4e:	88 45 e6             	mov    %al,-0x1a(%rbp)
  400b51:	80 7d e6 1f          	cmpb   $0x1f,-0x1a(%rbp)
  400b55:	76 df                	jbe    400b36 <test_memmove1+0x4f>
  {
    set[i] = i;
  }

  print_memory(set, MEM_SET_SIZE_B);
  400b57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400b5b:	be 20 00 00 00       	mov    $0x20,%esi
  400b60:	48 89 c7             	mov    %rax,%rdi
  400b63:	e8 2b 0a 00 00       	callq  401593 <print_memory>
  my_memmove(ptra, ptrb, TEST_MEMMOVE_LENGTH);
  400b68:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  400b6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400b70:	ba 10 00 00 00       	mov    $0x10,%edx
  400b75:	48 89 ce             	mov    %rcx,%rsi
  400b78:	48 89 c7             	mov    %rax,%rdi
  400b7b:	e8 21 0a 00 00       	callq  4015a1 <my_memmove>
  print_memory(set, MEM_SET_SIZE_B);
  400b80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400b84:	be 20 00 00 00       	mov    $0x20,%esi
  400b89:	48 89 c7             	mov    %rax,%rdi
  400b8c:	e8 02 0a 00 00       	callq  401593 <print_memory>

  for (i = 0; i < TEST_MEMMOVE_LENGTH; i++)
  400b91:	c6 45 e6 00          	movb   $0x0,-0x1a(%rbp)
  400b95:	eb 25                	jmp    400bbc <test_memmove1+0xd5>
  {
    if (set[i + 16] != i)
  400b97:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400b9b:	48 8d 50 10          	lea    0x10(%rax),%rdx
  400b9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400ba3:	48 01 d0             	add    %rdx,%rax
  400ba6:	0f b6 00             	movzbl (%rax),%eax
  400ba9:	3a 45 e6             	cmp    -0x1a(%rbp),%al
  400bac:	74 04                	je     400bb2 <test_memmove1+0xcb>
    {
      ret = TEST_ERROR;
  400bae:	c6 45 e7 01          	movb   $0x1,-0x19(%rbp)

  print_memory(set, MEM_SET_SIZE_B);
  my_memmove(ptra, ptrb, TEST_MEMMOVE_LENGTH);
  print_memory(set, MEM_SET_SIZE_B);

  for (i = 0; i < TEST_MEMMOVE_LENGTH; i++)
  400bb2:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400bb6:	83 c0 01             	add    $0x1,%eax
  400bb9:	88 45 e6             	mov    %al,-0x1a(%rbp)
  400bbc:	80 7d e6 0f          	cmpb   $0xf,-0x1a(%rbp)
  400bc0:	76 d5                	jbe    400b97 <test_memmove1+0xb0>
    {
      ret = TEST_ERROR;
    }
  }

  free_words( (uint32_t*)set );
  400bc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400bc6:	48 89 c7             	mov    %rax,%rdi
  400bc9:	e8 d1 0c 00 00       	callq  40189f <free_words>
  return ret;
  400bce:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
}
  400bd2:	c9                   	leaveq 
  400bd3:	c3                   	retq   

0000000000400bd4 <test_memmove2>:

int8_t test_memmove2() {
  400bd4:	55                   	push   %rbp
  400bd5:	48 89 e5             	mov    %rsp,%rbp
  400bd8:	48 83 ec 20          	sub    $0x20,%rsp
  uint8_t i;
  int8_t ret = TEST_NO_ERROR;
  400bdc:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
  uint8_t * set;
  uint8_t * ptra;
  uint8_t * ptrb;

  printf("test_memmove2() -OVERLAP END OF SRC BEGINNING OF DST\n");
  400be0:	bf a8 19 40 00       	mov    $0x4019a8,%edi
  400be5:	e8 66 f9 ff ff       	callq  400550 <puts@plt>
  set = (uint8_t*) reserve_words(MEM_SET_SIZE_W);
  400bea:	bf 08 00 00 00       	mov    $0x8,%edi
  400bef:	e8 68 0c 00 00       	callq  40185c <reserve_words>
  400bf4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

  if (! set )
  400bf8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  400bfd:	75 0a                	jne    400c09 <test_memmove2+0x35>
  {
    return TEST_ERROR;
  400bff:	b8 01 00 00 00       	mov    $0x1,%eax
  400c04:	e9 b6 00 00 00       	jmpq   400cbf <test_memmove2+0xeb>
  }
  ptra = &set[0];
  400c09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c0d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  ptrb = &set[8];
  400c11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c15:	48 83 c0 08          	add    $0x8,%rax
  400c19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  /* Initialize the set to test values */
  for( i = 0; i < MEM_SET_SIZE_B; i++) {
  400c1d:	c6 45 e6 00          	movb   $0x0,-0x1a(%rbp)
  400c21:	eb 1b                	jmp    400c3e <test_memmove2+0x6a>
    set[i] = i;
  400c23:	0f b6 55 e6          	movzbl -0x1a(%rbp),%edx
  400c27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c2b:	48 01 c2             	add    %rax,%rdx
  400c2e:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400c32:	88 02                	mov    %al,(%rdx)
  }
  ptra = &set[0];
  ptrb = &set[8];

  /* Initialize the set to test values */
  for( i = 0; i < MEM_SET_SIZE_B; i++) {
  400c34:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400c38:	83 c0 01             	add    $0x1,%eax
  400c3b:	88 45 e6             	mov    %al,-0x1a(%rbp)
  400c3e:	80 7d e6 1f          	cmpb   $0x1f,-0x1a(%rbp)
  400c42:	76 df                	jbe    400c23 <test_memmove2+0x4f>
    set[i] = i;
  }

  print_memory(set, MEM_SET_SIZE_B);
  400c44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c48:	be 20 00 00 00       	mov    $0x20,%esi
  400c4d:	48 89 c7             	mov    %rax,%rdi
  400c50:	e8 3e 09 00 00       	callq  401593 <print_memory>
  my_memmove(ptra, ptrb, TEST_MEMMOVE_LENGTH);
  400c55:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  400c59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400c5d:	ba 10 00 00 00       	mov    $0x10,%edx
  400c62:	48 89 ce             	mov    %rcx,%rsi
  400c65:	48 89 c7             	mov    %rax,%rdi
  400c68:	e8 34 09 00 00       	callq  4015a1 <my_memmove>
  print_memory(set, MEM_SET_SIZE_B);
  400c6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c71:	be 20 00 00 00       	mov    $0x20,%esi
  400c76:	48 89 c7             	mov    %rax,%rdi
  400c79:	e8 15 09 00 00       	callq  401593 <print_memory>

  for (i = 0; i < TEST_MEMMOVE_LENGTH; i++)
  400c7e:	c6 45 e6 00          	movb   $0x0,-0x1a(%rbp)
  400c82:	eb 25                	jmp    400ca9 <test_memmove2+0xd5>
  {
    if (set[i + 8] != i)
  400c84:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400c88:	48 8d 50 08          	lea    0x8(%rax),%rdx
  400c8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c90:	48 01 d0             	add    %rdx,%rax
  400c93:	0f b6 00             	movzbl (%rax),%eax
  400c96:	3a 45 e6             	cmp    -0x1a(%rbp),%al
  400c99:	74 04                	je     400c9f <test_memmove2+0xcb>
    {
      ret = TEST_ERROR;
  400c9b:	c6 45 e7 01          	movb   $0x1,-0x19(%rbp)

  print_memory(set, MEM_SET_SIZE_B);
  my_memmove(ptra, ptrb, TEST_MEMMOVE_LENGTH);
  print_memory(set, MEM_SET_SIZE_B);

  for (i = 0; i < TEST_MEMMOVE_LENGTH; i++)
  400c9f:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400ca3:	83 c0 01             	add    $0x1,%eax
  400ca6:	88 45 e6             	mov    %al,-0x1a(%rbp)
  400ca9:	80 7d e6 0f          	cmpb   $0xf,-0x1a(%rbp)
  400cad:	76 d5                	jbe    400c84 <test_memmove2+0xb0>
    {
      ret = TEST_ERROR;
    }
  }

  free_words( (uint32_t*)set );
  400caf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400cb3:	48 89 c7             	mov    %rax,%rdi
  400cb6:	e8 e4 0b 00 00       	callq  40189f <free_words>
  return ret;
  400cbb:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
}
  400cbf:	c9                   	leaveq 
  400cc0:	c3                   	retq   

0000000000400cc1 <test_memmove3>:

int8_t test_memmove3() {
  400cc1:	55                   	push   %rbp
  400cc2:	48 89 e5             	mov    %rsp,%rbp
  400cc5:	48 83 ec 20          	sub    $0x20,%rsp
  uint8_t i;
  int8_t ret = TEST_NO_ERROR;
  400cc9:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
  uint8_t * set;
  uint8_t * ptra;
  uint8_t * ptrb;

  printf("test_memove3() - OVERLAP END OF DEST BEGINNING OF SRC\n");
  400ccd:	bf e0 19 40 00       	mov    $0x4019e0,%edi
  400cd2:	e8 79 f8 ff ff       	callq  400550 <puts@plt>
  set = (uint8_t*)reserve_words( MEM_SET_SIZE_W);
  400cd7:	bf 08 00 00 00       	mov    $0x8,%edi
  400cdc:	e8 7b 0b 00 00       	callq  40185c <reserve_words>
  400ce1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

  if (! set ) 
  400ce5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  400cea:	75 0a                	jne    400cf6 <test_memmove3+0x35>
  {
    return TEST_ERROR;
  400cec:	b8 01 00 00 00       	mov    $0x1,%eax
  400cf1:	e9 bb 00 00 00       	jmpq   400db1 <test_memmove3+0xf0>
  }
  ptra = &set[8];
  400cf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400cfa:	48 83 c0 08          	add    $0x8,%rax
  400cfe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  ptrb = &set[0];
  400d02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  /* Initialize the set to test values */
  for( i = 0; i < MEM_SET_SIZE_B; i++)
  400d0a:	c6 45 e6 00          	movb   $0x0,-0x1a(%rbp)
  400d0e:	eb 1b                	jmp    400d2b <test_memmove3+0x6a>
  {
    set[i] = i;
  400d10:	0f b6 55 e6          	movzbl -0x1a(%rbp),%edx
  400d14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d18:	48 01 c2             	add    %rax,%rdx
  400d1b:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400d1f:	88 02                	mov    %al,(%rdx)
  }
  ptra = &set[8];
  ptrb = &set[0];

  /* Initialize the set to test values */
  for( i = 0; i < MEM_SET_SIZE_B; i++)
  400d21:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400d25:	83 c0 01             	add    $0x1,%eax
  400d28:	88 45 e6             	mov    %al,-0x1a(%rbp)
  400d2b:	80 7d e6 1f          	cmpb   $0x1f,-0x1a(%rbp)
  400d2f:	76 df                	jbe    400d10 <test_memmove3+0x4f>
  {
    set[i] = i;
  }

  print_memory(set, MEM_SET_SIZE_B);
  400d31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d35:	be 20 00 00 00       	mov    $0x20,%esi
  400d3a:	48 89 c7             	mov    %rax,%rdi
  400d3d:	e8 51 08 00 00       	callq  401593 <print_memory>
  my_memmove(ptra, ptrb, TEST_MEMMOVE_LENGTH);
  400d42:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  400d46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d4a:	ba 10 00 00 00       	mov    $0x10,%edx
  400d4f:	48 89 ce             	mov    %rcx,%rsi
  400d52:	48 89 c7             	mov    %rax,%rdi
  400d55:	e8 47 08 00 00       	callq  4015a1 <my_memmove>
  print_memory(set, MEM_SET_SIZE_B);
  400d5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d5e:	be 20 00 00 00       	mov    $0x20,%esi
  400d63:	48 89 c7             	mov    %rax,%rdi
  400d66:	e8 28 08 00 00       	callq  401593 <print_memory>

  for (i = 0; i < TEST_MEMMOVE_LENGTH; i++)
  400d6b:	c6 45 e6 00          	movb   $0x0,-0x1a(%rbp)
  400d6f:	eb 2a                	jmp    400d9b <test_memmove3+0xda>
  {
    if (set[i] != (i + 8))
  400d71:	0f b6 55 e6          	movzbl -0x1a(%rbp),%edx
  400d75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d79:	48 01 d0             	add    %rdx,%rax
  400d7c:	0f b6 00             	movzbl (%rax),%eax
  400d7f:	0f b6 c0             	movzbl %al,%eax
  400d82:	0f b6 55 e6          	movzbl -0x1a(%rbp),%edx
  400d86:	83 c2 08             	add    $0x8,%edx
  400d89:	39 d0                	cmp    %edx,%eax
  400d8b:	74 04                	je     400d91 <test_memmove3+0xd0>
    {
      ret = TEST_ERROR;
  400d8d:	c6 45 e7 01          	movb   $0x1,-0x19(%rbp)

  print_memory(set, MEM_SET_SIZE_B);
  my_memmove(ptra, ptrb, TEST_MEMMOVE_LENGTH);
  print_memory(set, MEM_SET_SIZE_B);

  for (i = 0; i < TEST_MEMMOVE_LENGTH; i++)
  400d91:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400d95:	83 c0 01             	add    $0x1,%eax
  400d98:	88 45 e6             	mov    %al,-0x1a(%rbp)
  400d9b:	80 7d e6 0f          	cmpb   $0xf,-0x1a(%rbp)
  400d9f:	76 d0                	jbe    400d71 <test_memmove3+0xb0>
      ret = TEST_ERROR;
    }
  }


  free_words( (uint32_t*)set );
  400da1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400da5:	48 89 c7             	mov    %rax,%rdi
  400da8:	e8 f2 0a 00 00       	callq  40189f <free_words>
  return ret;
  400dad:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax

}
  400db1:	c9                   	leaveq 
  400db2:	c3                   	retq   

0000000000400db3 <test_memcpy>:

int8_t test_memcpy() {
  400db3:	55                   	push   %rbp
  400db4:	48 89 e5             	mov    %rsp,%rbp
  400db7:	48 83 ec 20          	sub    $0x20,%rsp
  uint8_t i;
  int8_t ret = TEST_NO_ERROR;
  400dbb:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
  uint8_t * set;
  uint8_t * ptra;
  uint8_t * ptrb;

  printf("test_memcpy()\n");
  400dbf:	bf 16 1a 40 00       	mov    $0x401a16,%edi
  400dc4:	e8 87 f7 ff ff       	callq  400550 <puts@plt>
  set = (uint8_t*) reserve_words(MEM_SET_SIZE_W);
  400dc9:	bf 08 00 00 00       	mov    $0x8,%edi
  400dce:	e8 89 0a 00 00       	callq  40185c <reserve_words>
  400dd3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

  if (! set ) 
  400dd7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  400ddc:	75 0a                	jne    400de8 <test_memcpy+0x35>
  {
    return TEST_ERROR;
  400dde:	b8 01 00 00 00       	mov    $0x1,%eax
  400de3:	e9 b6 00 00 00       	jmpq   400e9e <test_memcpy+0xeb>
  }
  ptra = &set[0];
  400de8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400dec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  ptrb = &set[16];
  400df0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400df4:	48 83 c0 10          	add    $0x10,%rax
  400df8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  /* Initialize the set to test values */
  for( i = 0; i < MEM_SET_SIZE_B; i++) {
  400dfc:	c6 45 e6 00          	movb   $0x0,-0x1a(%rbp)
  400e00:	eb 1b                	jmp    400e1d <test_memcpy+0x6a>
    set[i] = i;
  400e02:	0f b6 55 e6          	movzbl -0x1a(%rbp),%edx
  400e06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e0a:	48 01 c2             	add    %rax,%rdx
  400e0d:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400e11:	88 02                	mov    %al,(%rdx)
  }
  ptra = &set[0];
  ptrb = &set[16];

  /* Initialize the set to test values */
  for( i = 0; i < MEM_SET_SIZE_B; i++) {
  400e13:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400e17:	83 c0 01             	add    $0x1,%eax
  400e1a:	88 45 e6             	mov    %al,-0x1a(%rbp)
  400e1d:	80 7d e6 1f          	cmpb   $0x1f,-0x1a(%rbp)
  400e21:	76 df                	jbe    400e02 <test_memcpy+0x4f>
    set[i] = i;
  }

  print_memory(set, MEM_SET_SIZE_B);
  400e23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e27:	be 20 00 00 00       	mov    $0x20,%esi
  400e2c:	48 89 c7             	mov    %rax,%rdi
  400e2f:	e8 5f 07 00 00       	callq  401593 <print_memory>
  my_memcpy(ptra, ptrb, TEST_MEMMOVE_LENGTH);
  400e34:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  400e38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400e3c:	ba 10 00 00 00       	mov    $0x10,%edx
  400e41:	48 89 ce             	mov    %rcx,%rsi
  400e44:	48 89 c7             	mov    %rax,%rdi
  400e47:	e8 5c 08 00 00       	callq  4016a8 <my_memcpy>
  print_memory(set, MEM_SET_SIZE_B);
  400e4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e50:	be 20 00 00 00       	mov    $0x20,%esi
  400e55:	48 89 c7             	mov    %rax,%rdi
  400e58:	e8 36 07 00 00       	callq  401593 <print_memory>

  for (i = 0; i < TEST_MEMMOVE_LENGTH; i++)
  400e5d:	c6 45 e6 00          	movb   $0x0,-0x1a(%rbp)
  400e61:	eb 25                	jmp    400e88 <test_memcpy+0xd5>
  {
    if (set[i+16] != i)
  400e63:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400e67:	48 8d 50 10          	lea    0x10(%rax),%rdx
  400e6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e6f:	48 01 d0             	add    %rdx,%rax
  400e72:	0f b6 00             	movzbl (%rax),%eax
  400e75:	3a 45 e6             	cmp    -0x1a(%rbp),%al
  400e78:	74 04                	je     400e7e <test_memcpy+0xcb>
    {
      ret = TEST_ERROR;
  400e7a:	c6 45 e7 01          	movb   $0x1,-0x19(%rbp)

  print_memory(set, MEM_SET_SIZE_B);
  my_memcpy(ptra, ptrb, TEST_MEMMOVE_LENGTH);
  print_memory(set, MEM_SET_SIZE_B);

  for (i = 0; i < TEST_MEMMOVE_LENGTH; i++)
  400e7e:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400e82:	83 c0 01             	add    $0x1,%eax
  400e85:	88 45 e6             	mov    %al,-0x1a(%rbp)
  400e88:	80 7d e6 0f          	cmpb   $0xf,-0x1a(%rbp)
  400e8c:	76 d5                	jbe    400e63 <test_memcpy+0xb0>
    {
      ret = TEST_ERROR;
    }
  }

  free_words( (uint32_t*)set );
  400e8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e92:	48 89 c7             	mov    %rax,%rdi
  400e95:	e8 05 0a 00 00       	callq  40189f <free_words>
  return ret;
  400e9a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
}
  400e9e:	c9                   	leaveq 
  400e9f:	c3                   	retq   

0000000000400ea0 <test_memset>:

int8_t test_memset() 
{
  400ea0:	55                   	push   %rbp
  400ea1:	48 89 e5             	mov    %rsp,%rbp
  400ea4:	48 83 ec 20          	sub    $0x20,%rsp
  uint8_t i;
  uint8_t ret = TEST_NO_ERROR;
  400ea8:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
  uint8_t * set;
  uint8_t * ptra;
  uint8_t * ptrb;

  printf("test_memset()\n");
  400eac:	bf 24 1a 40 00       	mov    $0x401a24,%edi
  400eb1:	e8 9a f6 ff ff       	callq  400550 <puts@plt>
  set = (uint8_t*)reserve_words(MEM_SET_SIZE_W);
  400eb6:	bf 08 00 00 00       	mov    $0x8,%edi
  400ebb:	e8 9c 09 00 00       	callq  40185c <reserve_words>
  400ec0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  if (! set )
  400ec4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  400ec9:	75 0a                	jne    400ed5 <test_memset+0x35>
  {
    return TEST_ERROR;
  400ecb:	b8 01 00 00 00       	mov    $0x1,%eax
  400ed0:	e9 ed 00 00 00       	jmpq   400fc2 <test_memset+0x122>
  }
  ptra = &set[0];
  400ed5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400ed9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  ptrb = &set[16];
  400edd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400ee1:	48 83 c0 10          	add    $0x10,%rax
  400ee5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  /* Initialize the set to test values */
  for( i = 0; i < MEM_SET_SIZE_B; i++) 
  400ee9:	c6 45 e6 00          	movb   $0x0,-0x1a(%rbp)
  400eed:	eb 1b                	jmp    400f0a <test_memset+0x6a>
  {
    set[i] = i;
  400eef:	0f b6 55 e6          	movzbl -0x1a(%rbp),%edx
  400ef3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400ef7:	48 01 c2             	add    %rax,%rdx
  400efa:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400efe:	88 02                	mov    %al,(%rdx)
  }
  ptra = &set[0];
  ptrb = &set[16];

  /* Initialize the set to test values */
  for( i = 0; i < MEM_SET_SIZE_B; i++) 
  400f00:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400f04:	83 c0 01             	add    $0x1,%eax
  400f07:	88 45 e6             	mov    %al,-0x1a(%rbp)
  400f0a:	80 7d e6 1f          	cmpb   $0x1f,-0x1a(%rbp)
  400f0e:	76 df                	jbe    400eef <test_memset+0x4f>
  {
    set[i] = i;
  }

  print_memory(set, MEM_SET_SIZE_B);
  400f10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400f14:	be 20 00 00 00       	mov    $0x20,%esi
  400f19:	48 89 c7             	mov    %rax,%rdi
  400f1c:	e8 72 06 00 00       	callq  401593 <print_memory>
  my_memset(ptra, MEM_SET_SIZE_B, 0xFF);
  400f21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400f25:	ba ff 00 00 00       	mov    $0xff,%edx
  400f2a:	be 20 00 00 00       	mov    $0x20,%esi
  400f2f:	48 89 c7             	mov    %rax,%rdi
  400f32:	e8 e2 07 00 00       	callq  401719 <my_memset>
  print_memory(set, MEM_SET_SIZE_B);
  400f37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400f3b:	be 20 00 00 00       	mov    $0x20,%esi
  400f40:	48 89 c7             	mov    %rax,%rdi
  400f43:	e8 4b 06 00 00       	callq  401593 <print_memory>
  my_memzero(ptrb, MEM_ZERO_LENGTH);
  400f48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f4c:	be 10 00 00 00       	mov    $0x10,%esi
  400f51:	48 89 c7             	mov    %rax,%rdi
  400f54:	e8 21 08 00 00       	callq  40177a <my_memzero>
  print_memory(set, MEM_SET_SIZE_B);
  400f59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400f5d:	be 20 00 00 00       	mov    $0x20,%esi
  400f62:	48 89 c7             	mov    %rax,%rdi
  400f65:	e8 29 06 00 00       	callq  401593 <print_memory>
  
  /* Validate Set & Zero Functionality */
  for (i = 0; i < MEM_ZERO_LENGTH; i++)
  400f6a:	c6 45 e6 00          	movb   $0x0,-0x1a(%rbp)
  400f6e:	eb 3c                	jmp    400fac <test_memset+0x10c>
  {
    if (set[i] != 0xFF)
  400f70:	0f b6 55 e6          	movzbl -0x1a(%rbp),%edx
  400f74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400f78:	48 01 d0             	add    %rdx,%rax
  400f7b:	0f b6 00             	movzbl (%rax),%eax
  400f7e:	3c ff                	cmp    $0xff,%al
  400f80:	74 04                	je     400f86 <test_memset+0xe6>
    {
      ret = TEST_ERROR;
  400f82:	c6 45 e7 01          	movb   $0x1,-0x19(%rbp)
    }
    if (set[16 + i] != 0)
  400f86:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400f8a:	83 c0 10             	add    $0x10,%eax
  400f8d:	48 63 d0             	movslq %eax,%rdx
  400f90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400f94:	48 01 d0             	add    %rdx,%rax
  400f97:	0f b6 00             	movzbl (%rax),%eax
  400f9a:	84 c0                	test   %al,%al
  400f9c:	74 04                	je     400fa2 <test_memset+0x102>
    {
      ret = TEST_ERROR;
  400f9e:	c6 45 e7 01          	movb   $0x1,-0x19(%rbp)
  print_memory(set, MEM_SET_SIZE_B);
  my_memzero(ptrb, MEM_ZERO_LENGTH);
  print_memory(set, MEM_SET_SIZE_B);
  
  /* Validate Set & Zero Functionality */
  for (i = 0; i < MEM_ZERO_LENGTH; i++)
  400fa2:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  400fa6:	83 c0 01             	add    $0x1,%eax
  400fa9:	88 45 e6             	mov    %al,-0x1a(%rbp)
  400fac:	80 7d e6 0f          	cmpb   $0xf,-0x1a(%rbp)
  400fb0:	76 be                	jbe    400f70 <test_memset+0xd0>
    {
      ret = TEST_ERROR;
    }
  }
  
  free_words( (uint32_t*)set );
  400fb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400fb6:	48 89 c7             	mov    %rax,%rdi
  400fb9:	e8 e1 08 00 00       	callq  40189f <free_words>
  return ret;
  400fbe:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
}
  400fc2:	c9                   	leaveq 
  400fc3:	c3                   	retq   

0000000000400fc4 <test_reverse>:

int8_t test_reverse()
{
  400fc4:	55                   	push   %rbp
  400fc5:	48 89 e5             	mov    %rsp,%rbp
  400fc8:	48 83 ec 40          	sub    $0x40,%rsp
  400fcc:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400fd3:	00 00 
  400fd5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  400fd9:	31 c0                	xor    %eax,%eax
  uint8_t i;
  int8_t ret = TEST_NO_ERROR;
  400fdb:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  uint8_t * copy;
  uint8_t set[MEM_SET_SIZE_B] = {0x3F, 0x73, 0x72, 0x33, 0x54, 0x43, 0x72, 0x26,
  400fdf:	c6 45 d0 3f          	movb   $0x3f,-0x30(%rbp)
  400fe3:	c6 45 d1 73          	movb   $0x73,-0x2f(%rbp)
  400fe7:	c6 45 d2 72          	movb   $0x72,-0x2e(%rbp)
  400feb:	c6 45 d3 33          	movb   $0x33,-0x2d(%rbp)
  400fef:	c6 45 d4 54          	movb   $0x54,-0x2c(%rbp)
  400ff3:	c6 45 d5 43          	movb   $0x43,-0x2b(%rbp)
  400ff7:	c6 45 d6 72          	movb   $0x72,-0x2a(%rbp)
  400ffb:	c6 45 d7 26          	movb   $0x26,-0x29(%rbp)
  400fff:	c6 45 d8 48          	movb   $0x48,-0x28(%rbp)
  401003:	c6 45 d9 63          	movb   $0x63,-0x27(%rbp)
  401007:	c6 45 da 20          	movb   $0x20,-0x26(%rbp)
  40100b:	c6 45 db 66          	movb   $0x66,-0x25(%rbp)
  40100f:	c6 45 dc 6f          	movb   $0x6f,-0x24(%rbp)
  401013:	c6 45 dd 00          	movb   $0x0,-0x23(%rbp)
  401017:	c6 45 de 20          	movb   $0x20,-0x22(%rbp)
  40101b:	c6 45 df 33          	movb   $0x33,-0x21(%rbp)
  40101f:	c6 45 e0 72          	movb   $0x72,-0x20(%rbp)
  401023:	c6 45 e1 75          	movb   $0x75,-0x1f(%rbp)
  401027:	c6 45 e2 74          	movb   $0x74,-0x1e(%rbp)
  40102b:	c6 45 e3 78          	movb   $0x78,-0x1d(%rbp)
  40102f:	c6 45 e4 21          	movb   $0x21,-0x1c(%rbp)
  401033:	c6 45 e5 4d          	movb   $0x4d,-0x1b(%rbp)
  401037:	c6 45 e6 20          	movb   $0x20,-0x1a(%rbp)
  40103b:	c6 45 e7 40          	movb   $0x40,-0x19(%rbp)
  40103f:	c6 45 e8 20          	movb   $0x20,-0x18(%rbp)
  401043:	c6 45 e9 24          	movb   $0x24,-0x17(%rbp)
  401047:	c6 45 ea 7c          	movb   $0x7c,-0x16(%rbp)
  40104b:	c6 45 eb 20          	movb   $0x20,-0x15(%rbp)
  40104f:	c6 45 ec 24          	movb   $0x24,-0x14(%rbp)
  401053:	c6 45 ed 69          	movb   $0x69,-0x13(%rbp)
  401057:	c6 45 ee 68          	movb   $0x68,-0x12(%rbp)
  40105b:	c6 45 ef 54          	movb   $0x54,-0x11(%rbp)
                                 0x48, 0x63, 0x20, 0x66, 0x6F, 0x00, 0x20, 0x33,
                                 0x72, 0x75, 0x74, 0x78, 0x21, 0x4D, 0x20, 0x40,
                                 0x20, 0x24, 0x7C, 0x20, 0x24, 0x69, 0x68, 0x54
                               };

  printf("test_reverse()\n");
  40105f:	bf 32 1a 40 00       	mov    $0x401a32,%edi
  401064:	e8 e7 f4 ff ff       	callq  400550 <puts@plt>
  copy = (uint8_t*)reserve_words(MEM_SET_SIZE_W);
  401069:	bf 08 00 00 00       	mov    $0x8,%edi
  40106e:	e8 e9 07 00 00       	callq  40185c <reserve_words>
  401073:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  if (! copy )
  401077:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40107c:	75 0a                	jne    401088 <test_reverse+0xc4>
  {
    return TEST_ERROR;
  40107e:	b8 01 00 00 00       	mov    $0x1,%eax
  401083:	e9 a1 00 00 00       	jmpq   401129 <test_reverse+0x165>
  }
  
  my_memcpy(set, copy, MEM_SET_SIZE_B);
  401088:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40108c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  401090:	ba 20 00 00 00       	mov    $0x20,%edx
  401095:	48 89 ce             	mov    %rcx,%rsi
  401098:	48 89 c7             	mov    %rax,%rdi
  40109b:	e8 08 06 00 00       	callq  4016a8 <my_memcpy>

  print_memory(set, MEM_SET_SIZE_B);
  4010a0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4010a4:	be 20 00 00 00       	mov    $0x20,%esi
  4010a9:	48 89 c7             	mov    %rax,%rdi
  4010ac:	e8 e2 04 00 00       	callq  401593 <print_memory>
  my_reverse(set, MEM_SET_SIZE_B);
  4010b1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4010b5:	be 20 00 00 00       	mov    $0x20,%esi
  4010ba:	48 89 c7             	mov    %rax,%rdi
  4010bd:	e8 ea 06 00 00       	callq  4017ac <my_reverse>
  print_memory(set, MEM_SET_SIZE_B);
  4010c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4010c6:	be 20 00 00 00       	mov    $0x20,%esi
  4010cb:	48 89 c7             	mov    %rax,%rdi
  4010ce:	e8 c0 04 00 00       	callq  401593 <print_memory>

  for (i = 0; i < MEM_SET_SIZE_B; i++)
  4010d3:	c6 45 c6 00          	movb   $0x0,-0x3a(%rbp)
  4010d7:	eb 3a                	jmp    401113 <test_reverse+0x14f>
  {
    if (set[i] != copy[MEM_SET_SIZE_B - i - 1])
  4010d9:	0f b6 45 c6          	movzbl -0x3a(%rbp),%eax
  4010dd:	48 98                	cltq   
  4010df:	0f b6 54 05 d0       	movzbl -0x30(%rbp,%rax,1),%edx
  4010e4:	0f b6 45 c6          	movzbl -0x3a(%rbp),%eax
  4010e8:	b9 20 00 00 00       	mov    $0x20,%ecx
  4010ed:	29 c1                	sub    %eax,%ecx
  4010ef:	89 c8                	mov    %ecx,%eax
  4010f1:	48 98                	cltq   
  4010f3:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
  4010f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4010fb:	48 01 c8             	add    %rcx,%rax
  4010fe:	0f b6 00             	movzbl (%rax),%eax
  401101:	38 c2                	cmp    %al,%dl
  401103:	74 04                	je     401109 <test_reverse+0x145>
    {
      ret = TEST_ERROR;
  401105:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)

  print_memory(set, MEM_SET_SIZE_B);
  my_reverse(set, MEM_SET_SIZE_B);
  print_memory(set, MEM_SET_SIZE_B);

  for (i = 0; i < MEM_SET_SIZE_B; i++)
  401109:	0f b6 45 c6          	movzbl -0x3a(%rbp),%eax
  40110d:	83 c0 01             	add    $0x1,%eax
  401110:	88 45 c6             	mov    %al,-0x3a(%rbp)
  401113:	80 7d c6 1f          	cmpb   $0x1f,-0x3a(%rbp)
  401117:	76 c0                	jbe    4010d9 <test_reverse+0x115>
    {
      ret = TEST_ERROR;
    }
  }

  free_words( (uint32_t*)copy );
  401119:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40111d:	48 89 c7             	mov    %rax,%rdi
  401120:	e8 7a 07 00 00       	callq  40189f <free_words>
  return ret;
  401125:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
}
  401129:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40112d:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  401134:	00 00 
  401136:	74 05                	je     40113d <test_reverse+0x179>
  401138:	e8 23 f4 ff ff       	callq  400560 <__stack_chk_fail@plt>
  40113d:	c9                   	leaveq 
  40113e:	c3                   	retq   

000000000040113f <project1>:

void project1(void) 
{
  40113f:	55                   	push   %rbp
  401140:	48 89 e5             	mov    %rsp,%rbp
  401143:	48 83 ec 20          	sub    $0x20,%rsp
  401147:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40114e:	00 00 
  401150:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  401154:	31 c0                	xor    %eax,%eax
  uint8_t i;
  int8_t failed = 0;
  401156:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  int8_t results[TESTCOUNT];

  results[0] = test_data1();
  40115a:	b8 00 00 00 00       	mov    $0x0,%eax
  40115f:	e8 65 f8 ff ff       	callq  4009c9 <test_data1>
  401164:	88 45 f0             	mov    %al,-0x10(%rbp)
  results[1] = test_data2();
  401167:	b8 00 00 00 00       	mov    $0x0,%eax
  40116c:	e8 e7 f8 ff ff       	callq  400a58 <test_data2>
  401171:	88 45 f1             	mov    %al,-0xf(%rbp)
  results[2] = test_memmove1();
  401174:	b8 00 00 00 00       	mov    $0x0,%eax
  401179:	e8 69 f9 ff ff       	callq  400ae7 <test_memmove1>
  40117e:	88 45 f2             	mov    %al,-0xe(%rbp)
  results[3] = test_memmove2();
  401181:	b8 00 00 00 00       	mov    $0x0,%eax
  401186:	e8 49 fa ff ff       	callq  400bd4 <test_memmove2>
  40118b:	88 45 f3             	mov    %al,-0xd(%rbp)
  results[4] = test_memmove3();
  40118e:	b8 00 00 00 00       	mov    $0x0,%eax
  401193:	e8 29 fb ff ff       	callq  400cc1 <test_memmove3>
  401198:	88 45 f4             	mov    %al,-0xc(%rbp)
  results[5] = test_memcpy();
  40119b:	b8 00 00 00 00       	mov    $0x0,%eax
  4011a0:	e8 0e fc ff ff       	callq  400db3 <test_memcpy>
  4011a5:	88 45 f5             	mov    %al,-0xb(%rbp)
  results[6] = test_memset();
  4011a8:	b8 00 00 00 00       	mov    $0x0,%eax
  4011ad:	e8 ee fc ff ff       	callq  400ea0 <test_memset>
  4011b2:	88 45 f6             	mov    %al,-0xa(%rbp)
  results[7] = test_reverse();
  4011b5:	b8 00 00 00 00       	mov    $0x0,%eax
  4011ba:	e8 05 fe ff ff       	callq  400fc4 <test_reverse>
  4011bf:	88 45 f7             	mov    %al,-0x9(%rbp)

  for ( i = 0; i < TESTCOUNT; i++) 
  4011c2:	c6 45 ee 00          	movb   $0x0,-0x12(%rbp)
  4011c6:	eb 3f                	jmp    401207 <project1+0xc8>
  {
    printf("%d\n",results[i]);
  4011c8:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  4011cc:	48 98                	cltq   
  4011ce:	0f b6 44 05 f0       	movzbl -0x10(%rbp,%rax,1),%eax
  4011d3:	0f be c0             	movsbl %al,%eax
  4011d6:	89 c6                	mov    %eax,%esi
  4011d8:	bf 41 1a 40 00       	mov    $0x401a41,%edi
  4011dd:	b8 00 00 00 00       	mov    $0x0,%eax
  4011e2:	e8 89 f3 ff ff       	callq  400570 <printf@plt>
    failed += results[i];
  4011e7:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  4011eb:	48 98                	cltq   
  4011ed:	0f b6 44 05 f0       	movzbl -0x10(%rbp,%rax,1),%eax
  4011f2:	89 c2                	mov    %eax,%edx
  4011f4:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  4011f8:	01 d0                	add    %edx,%eax
  4011fa:	88 45 ef             	mov    %al,-0x11(%rbp)
  results[4] = test_memmove3();
  results[5] = test_memcpy();
  results[6] = test_memset();
  results[7] = test_reverse();

  for ( i = 0; i < TESTCOUNT; i++) 
  4011fd:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  401201:	83 c0 01             	add    $0x1,%eax
  401204:	88 45 ee             	mov    %al,-0x12(%rbp)
  401207:	80 7d ee 07          	cmpb   $0x7,-0x12(%rbp)
  40120b:	76 bb                	jbe    4011c8 <project1+0x89>
  {
    printf("%d\n",results[i]);
    failed += results[i];
  }

  printf("--------------------------------\n");
  40120d:	bf 48 1a 40 00       	mov    $0x401a48,%edi
  401212:	e8 39 f3 ff ff       	callq  400550 <puts@plt>
  printf("Test Results:\n");
  401217:	bf 69 1a 40 00       	mov    $0x401a69,%edi
  40121c:	e8 2f f3 ff ff       	callq  400550 <puts@plt>
  printf("  PASSED: %d / %d\n", (TESTCOUNT - failed), TESTCOUNT);
  401221:	0f be 45 ef          	movsbl -0x11(%rbp),%eax
  401225:	ba 08 00 00 00       	mov    $0x8,%edx
  40122a:	29 c2                	sub    %eax,%edx
  40122c:	89 d0                	mov    %edx,%eax
  40122e:	ba 08 00 00 00       	mov    $0x8,%edx
  401233:	89 c6                	mov    %eax,%esi
  401235:	bf 77 1a 40 00       	mov    $0x401a77,%edi
  40123a:	b8 00 00 00 00       	mov    $0x0,%eax
  40123f:	e8 2c f3 ff ff       	callq  400570 <printf@plt>
  printf("  FAILED: %d / %d\n", failed, TESTCOUNT);
  401244:	0f be 45 ef          	movsbl -0x11(%rbp),%eax
  401248:	ba 08 00 00 00       	mov    $0x8,%edx
  40124d:	89 c6                	mov    %eax,%esi
  40124f:	bf 8a 1a 40 00       	mov    $0x401a8a,%edi
  401254:	b8 00 00 00 00       	mov    $0x0,%eax
  401259:	e8 12 f3 ff ff       	callq  400570 <printf@plt>
  printf("--------------------------------\n");
  40125e:	bf 48 1a 40 00       	mov    $0x401a48,%edi
  401263:	e8 e8 f2 ff ff       	callq  400550 <puts@plt>
}
  401268:	90                   	nop
  401269:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40126d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  401274:	00 00 
  401276:	74 05                	je     40127d <project1+0x13e>
  401278:	e8 e3 f2 ff ff       	callq  400560 <__stack_chk_fail@plt>
  40127d:	c9                   	leaveq 
  40127e:	c3                   	retq   

000000000040127f <SystemInit>:

/* ----------------------------------------------------------------------------
   -- SystemInit()
   ---------------------------------------------------------------------------- */

void SystemInit (void) {
  40127f:	55                   	push   %rbp
  401280:	48 89 e5             	mov    %rsp,%rbp
#if (DISABLE_WDOG)
  /* SIM_COPC: COPT=0,COPCLKS=0,COPW=0 */
  SIM->COPC = (uint32_t)0x00u;
  401283:	b8 00 70 04 40       	mov    $0x40047000,%eax
  401288:	c7 80 00 11 00 00 00 	movl   $0x0,0x1100(%rax)
  40128f:	00 00 00 
  /* PLL loss of lock interrupt request initialization */
  if (((SYSTEM_MCG_C6_VALUE) & MCG_C6_LOLIE0_MASK) != 0U) {
    NVIC_EnableIRQ(MCG_IRQn);          /* Enable PLL loss of lock interrupt request */
  }
#endif
}
  401292:	90                   	nop
  401293:	5d                   	pop    %rbp
  401294:	c3                   	retq   

0000000000401295 <SystemCoreClockUpdate>:

/* ----------------------------------------------------------------------------
   -- SystemCoreClockUpdate()
   ---------------------------------------------------------------------------- */

void SystemCoreClockUpdate (void) {
  401295:	55                   	push   %rbp
  401296:	48 89 e5             	mov    %rsp,%rbp
  uint32_t MCGOUTClock;                /* Variable to store output clock frequency of the MCG module */
  uint16_t Divider;

  if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x00U) {
  401299:	b8 00 40 06 40       	mov    $0x40064000,%eax
  40129e:	0f b6 00             	movzbl (%rax),%eax
  4012a1:	0f b6 c0             	movzbl %al,%eax
  4012a4:	25 c0 00 00 00       	and    $0xc0,%eax
  4012a9:	85 c0                	test   %eax,%eax
  4012ab:	0f 85 26 02 00 00    	jne    4014d7 <SystemCoreClockUpdate+0x242>
    /* Output of FLL or PLL is selected */
    if ((MCG->C6 & MCG_C6_PLLS_MASK) == 0x00U) {
  4012b1:	b8 00 40 06 40       	mov    $0x40064000,%eax
  4012b6:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  4012ba:	0f b6 c0             	movzbl %al,%eax
  4012bd:	83 e0 40             	and    $0x40,%eax
  4012c0:	85 c0                	test   %eax,%eax
  4012c2:	0f 85 be 01 00 00    	jne    401486 <SystemCoreClockUpdate+0x1f1>
      /* FLL is selected */
      if ((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U) {
  4012c8:	b8 00 40 06 40       	mov    $0x40064000,%eax
  4012cd:	0f b6 00             	movzbl (%rax),%eax
  4012d0:	0f b6 c0             	movzbl %al,%eax
  4012d3:	83 e0 04             	and    $0x4,%eax
  4012d6:	85 c0                	test   %eax,%eax
  4012d8:	0f 85 9c 00 00 00    	jne    40137a <SystemCoreClockUpdate+0xe5>
        /* External reference clock is selected */
        MCGOUTClock = CPU_XTAL_CLK_HZ; /* System oscillator drives MCG clock */
  4012de:	c7 45 fc 00 12 7a 00 	movl   $0x7a1200,-0x4(%rbp)
        if ((MCG->C2 & MCG_C2_RANGE0_MASK) != 0x00U) {
  4012e5:	b8 00 40 06 40       	mov    $0x40064000,%eax
  4012ea:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4012ee:	0f b6 c0             	movzbl %al,%eax
  4012f1:	83 e0 30             	and    $0x30,%eax
  4012f4:	85 c0                	test   %eax,%eax
  4012f6:	74 4d                	je     401345 <SystemCoreClockUpdate+0xb0>
          switch (MCG->C1 & MCG_C1_FRDIV_MASK) {
  4012f8:	b8 00 40 06 40       	mov    $0x40064000,%eax
  4012fd:	0f b6 00             	movzbl (%rax),%eax
  401300:	0f b6 c0             	movzbl %al,%eax
  401303:	83 e0 38             	and    $0x38,%eax
  401306:	83 f8 30             	cmp    $0x30,%eax
  401309:	74 0d                	je     401318 <SystemCoreClockUpdate+0x83>
  40130b:	83 f8 38             	cmp    $0x38,%eax
  40130e:	75 10                	jne    401320 <SystemCoreClockUpdate+0x8b>
          case 0x38U:
            Divider = 1536U;
  401310:	66 c7 45 fa 00 06    	movw   $0x600,-0x6(%rbp)
            break;
  401316:	eb 4f                	jmp    401367 <SystemCoreClockUpdate+0xd2>
          case 0x30U:
            Divider = 1280U;
  401318:	66 c7 45 fa 00 05    	movw   $0x500,-0x6(%rbp)
            break;
  40131e:	eb 47                	jmp    401367 <SystemCoreClockUpdate+0xd2>
          default:
            Divider = (uint16_t)(32LU << ((MCG->C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT));
  401320:	b8 00 40 06 40       	mov    $0x40064000,%eax
  401325:	0f b6 00             	movzbl (%rax),%eax
  401328:	0f b6 c0             	movzbl %al,%eax
  40132b:	83 e0 38             	and    $0x38,%eax
  40132e:	c1 e8 03             	shr    $0x3,%eax
  401331:	ba 20 00 00 00       	mov    $0x20,%edx
  401336:	89 c1                	mov    %eax,%ecx
  401338:	48 d3 e2             	shl    %cl,%rdx
  40133b:	48 89 d0             	mov    %rdx,%rax
  40133e:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
            break;
  401342:	90                   	nop
  401343:	eb 22                	jmp    401367 <SystemCoreClockUpdate+0xd2>
          }
        } else {/* ((MCG->C2 & MCG_C2_RANGE_MASK) != 0x00U) */
          Divider = (uint16_t)(1LU << ((MCG->C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT));
  401345:	b8 00 40 06 40       	mov    $0x40064000,%eax
  40134a:	0f b6 00             	movzbl (%rax),%eax
  40134d:	0f b6 c0             	movzbl %al,%eax
  401350:	83 e0 38             	and    $0x38,%eax
  401353:	c1 e8 03             	shr    $0x3,%eax
  401356:	ba 01 00 00 00       	mov    $0x1,%edx
  40135b:	89 c1                	mov    %eax,%ecx
  40135d:	48 d3 e2             	shl    %cl,%rdx
  401360:	48 89 d0             	mov    %rdx,%rax
  401363:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
        }
        MCGOUTClock = (MCGOUTClock / Divider); /* Calculate the divided FLL reference clock */
  401367:	0f b7 7d fa          	movzwl -0x6(%rbp),%edi
  40136b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40136e:	ba 00 00 00 00       	mov    $0x0,%edx
  401373:	f7 f7                	div    %edi
  401375:	89 45 fc             	mov    %eax,-0x4(%rbp)
  401378:	eb 07                	jmp    401381 <SystemCoreClockUpdate+0xec>
      } else { /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
        MCGOUTClock = CPU_INT_SLOW_CLK_HZ; /* The slow internal reference clock is selected */
  40137a:	c7 45 fc 00 80 00 00 	movl   $0x8000,-0x4(%rbp)
      } /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
      /* Select correct multiplier to calculate the MCG output clock  */
      switch (MCG->C4 & (MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS_MASK)) {
  401381:	b8 00 40 06 40       	mov    $0x40064000,%eax
  401386:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  40138a:	0f b6 c0             	movzbl %al,%eax
  40138d:	25 e0 00 00 00       	and    $0xe0,%eax
  401392:	83 f8 60             	cmp    $0x60,%eax
  401395:	0f 84 92 00 00 00    	je     40142d <SystemCoreClockUpdate+0x198>
  40139b:	83 f8 60             	cmp    $0x60,%eax
  40139e:	77 13                	ja     4013b3 <SystemCoreClockUpdate+0x11e>
  4013a0:	83 f8 20             	cmp    $0x20,%eax
  4013a3:	74 5c                	je     401401 <SystemCoreClockUpdate+0x16c>
  4013a5:	83 f8 40             	cmp    $0x40,%eax
  4013a8:	74 6c                	je     401416 <SystemCoreClockUpdate+0x181>
  4013aa:	85 c0                	test   %eax,%eax
  4013ac:	74 3e                	je     4013ec <SystemCoreClockUpdate+0x157>
          break;
        case 0xE0U:
          MCGOUTClock *= 2929U;
          break;
        default:
          break;
  4013ae:	e9 aa 01 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        MCGOUTClock = (MCGOUTClock / Divider); /* Calculate the divided FLL reference clock */
      } else { /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
        MCGOUTClock = CPU_INT_SLOW_CLK_HZ; /* The slow internal reference clock is selected */
      } /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
      /* Select correct multiplier to calculate the MCG output clock  */
      switch (MCG->C4 & (MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS_MASK)) {
  4013b3:	3d a0 00 00 00       	cmp    $0xa0,%eax
  4013b8:	0f 84 95 00 00 00    	je     401453 <SystemCoreClockUpdate+0x1be>
  4013be:	3d a0 00 00 00       	cmp    $0xa0,%eax
  4013c3:	77 0c                	ja     4013d1 <SystemCoreClockUpdate+0x13c>
  4013c5:	3d 80 00 00 00       	cmp    $0x80,%eax
  4013ca:	74 76                	je     401442 <SystemCoreClockUpdate+0x1ad>
          break;
        case 0xE0U:
          MCGOUTClock *= 2929U;
          break;
        default:
          break;
  4013cc:	e9 8c 01 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        MCGOUTClock = (MCGOUTClock / Divider); /* Calculate the divided FLL reference clock */
      } else { /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
        MCGOUTClock = CPU_INT_SLOW_CLK_HZ; /* The slow internal reference clock is selected */
      } /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
      /* Select correct multiplier to calculate the MCG output clock  */
      switch (MCG->C4 & (MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS_MASK)) {
  4013d1:	3d c0 00 00 00       	cmp    $0xc0,%eax
  4013d6:	0f 84 88 00 00 00    	je     401464 <SystemCoreClockUpdate+0x1cf>
  4013dc:	3d e0 00 00 00       	cmp    $0xe0,%eax
  4013e1:	0f 84 8e 00 00 00    	je     401475 <SystemCoreClockUpdate+0x1e0>
          break;
        case 0xE0U:
          MCGOUTClock *= 2929U;
          break;
        default:
          break;
  4013e7:	e9 71 01 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        MCGOUTClock = CPU_INT_SLOW_CLK_HZ; /* The slow internal reference clock is selected */
      } /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
      /* Select correct multiplier to calculate the MCG output clock  */
      switch (MCG->C4 & (MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS_MASK)) {
        case 0x00U:
          MCGOUTClock *= 640U;
  4013ec:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4013ef:	89 d0                	mov    %edx,%eax
  4013f1:	c1 e0 02             	shl    $0x2,%eax
  4013f4:	01 d0                	add    %edx,%eax
  4013f6:	c1 e0 07             	shl    $0x7,%eax
  4013f9:	89 45 fc             	mov    %eax,-0x4(%rbp)
          break;
  4013fc:	e9 5c 01 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        case 0x20U:
          MCGOUTClock *= 1280U;
  401401:	8b 55 fc             	mov    -0x4(%rbp),%edx
  401404:	89 d0                	mov    %edx,%eax
  401406:	c1 e0 02             	shl    $0x2,%eax
  401409:	01 d0                	add    %edx,%eax
  40140b:	c1 e0 08             	shl    $0x8,%eax
  40140e:	89 45 fc             	mov    %eax,-0x4(%rbp)
          break;
  401411:	e9 47 01 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        case 0x40U:
          MCGOUTClock *= 1920U;
  401416:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401419:	c1 e0 07             	shl    $0x7,%eax
  40141c:	89 c2                	mov    %eax,%edx
  40141e:	c1 e2 04             	shl    $0x4,%edx
  401421:	29 c2                	sub    %eax,%edx
  401423:	89 d0                	mov    %edx,%eax
  401425:	89 45 fc             	mov    %eax,-0x4(%rbp)
          break;
  401428:	e9 30 01 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        case 0x60U:
          MCGOUTClock *= 2560U;
  40142d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  401430:	89 d0                	mov    %edx,%eax
  401432:	c1 e0 02             	shl    $0x2,%eax
  401435:	01 d0                	add    %edx,%eax
  401437:	c1 e0 09             	shl    $0x9,%eax
  40143a:	89 45 fc             	mov    %eax,-0x4(%rbp)
          break;
  40143d:	e9 1b 01 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        case 0x80U:
          MCGOUTClock *= 732U;
  401442:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401445:	69 c0 dc 02 00 00    	imul   $0x2dc,%eax,%eax
  40144b:	89 45 fc             	mov    %eax,-0x4(%rbp)
          break;
  40144e:	e9 0a 01 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        case 0xA0U:
          MCGOUTClock *= 1464U;
  401453:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401456:	69 c0 b8 05 00 00    	imul   $0x5b8,%eax,%eax
  40145c:	89 45 fc             	mov    %eax,-0x4(%rbp)
          break;
  40145f:	e9 f9 00 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        case 0xC0U:
          MCGOUTClock *= 2197U;
  401464:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401467:	69 c0 95 08 00 00    	imul   $0x895,%eax,%eax
  40146d:	89 45 fc             	mov    %eax,-0x4(%rbp)
          break;
  401470:	e9 e8 00 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        case 0xE0U:
          MCGOUTClock *= 2929U;
  401475:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401478:	69 c0 71 0b 00 00    	imul   $0xb71,%eax,%eax
  40147e:	89 45 fc             	mov    %eax,-0x4(%rbp)
          break;
  401481:	e9 d7 00 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
        default:
          break;
      }
    } else { /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x00U)) */
      /* PLL is selected */
      Divider = (((uint16_t)MCG->C5 & MCG_C5_PRDIV0_MASK) + 0x01U);
  401486:	b8 00 40 06 40       	mov    $0x40064000,%eax
  40148b:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  40148f:	0f b6 c0             	movzbl %al,%eax
  401492:	83 e0 1f             	and    $0x1f,%eax
  401495:	83 c0 01             	add    $0x1,%eax
  401498:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
      MCGOUTClock = (uint32_t)(CPU_XTAL_CLK_HZ / Divider); /* Calculate the PLL reference clock */
  40149c:	0f b7 75 fa          	movzwl -0x6(%rbp),%esi
  4014a0:	b8 00 12 7a 00       	mov    $0x7a1200,%eax
  4014a5:	ba 00 00 00 00       	mov    $0x0,%edx
  4014aa:	f7 f6                	div    %esi
  4014ac:	89 45 fc             	mov    %eax,-0x4(%rbp)
      Divider = (((uint16_t)MCG->C6 & MCG_C6_VDIV0_MASK) + 24U);
  4014af:	b8 00 40 06 40       	mov    $0x40064000,%eax
  4014b4:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  4014b8:	0f b6 c0             	movzbl %al,%eax
  4014bb:	83 e0 1f             	and    $0x1f,%eax
  4014be:	83 c0 18             	add    $0x18,%eax
  4014c1:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
      MCGOUTClock *= Divider;          /* Calculate the MCG output clock */
  4014c5:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  4014c9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4014cc:	0f af c2             	imul   %edx,%eax
  4014cf:	89 45 fc             	mov    %eax,-0x4(%rbp)
  4014d2:	e9 86 00 00 00       	jmpq   40155d <SystemCoreClockUpdate+0x2c8>
    } /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x00U)) */
  } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x40U) {
  4014d7:	b8 00 40 06 40       	mov    $0x40064000,%eax
  4014dc:	0f b6 00             	movzbl (%rax),%eax
  4014df:	0f b6 c0             	movzbl %al,%eax
  4014e2:	25 c0 00 00 00       	and    $0xc0,%eax
  4014e7:	83 f8 40             	cmp    $0x40,%eax
  4014ea:	75 53                	jne    40153f <SystemCoreClockUpdate+0x2aa>
    /* Internal reference clock is selected */
    if ((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U) {
  4014ec:	b8 00 40 06 40       	mov    $0x40064000,%eax
  4014f1:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4014f5:	0f b6 c0             	movzbl %al,%eax
  4014f8:	83 e0 01             	and    $0x1,%eax
  4014fb:	85 c0                	test   %eax,%eax
  4014fd:	75 09                	jne    401508 <SystemCoreClockUpdate+0x273>
      MCGOUTClock = CPU_INT_SLOW_CLK_HZ; /* Slow internal reference clock selected */
  4014ff:	c7 45 fc 00 80 00 00 	movl   $0x8000,-0x4(%rbp)
  401506:	eb 55                	jmp    40155d <SystemCoreClockUpdate+0x2c8>
    } else { /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U)) */
      Divider = (uint16_t)(0x01LU << ((MCG->SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT));
  401508:	b8 00 40 06 40       	mov    $0x40064000,%eax
  40150d:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  401511:	0f b6 c0             	movzbl %al,%eax
  401514:	83 e0 0e             	and    $0xe,%eax
  401517:	d1 e8                	shr    %eax
  401519:	ba 01 00 00 00       	mov    $0x1,%edx
  40151e:	89 c1                	mov    %eax,%ecx
  401520:	48 d3 e2             	shl    %cl,%rdx
  401523:	48 89 d0             	mov    %rdx,%rax
  401526:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
      MCGOUTClock = (uint32_t) (CPU_INT_FAST_CLK_HZ / Divider); /* Fast internal reference clock selected */
  40152a:	0f b7 75 fa          	movzwl -0x6(%rbp),%esi
  40152e:	b8 00 09 3d 00       	mov    $0x3d0900,%eax
  401533:	ba 00 00 00 00       	mov    $0x0,%edx
  401538:	f7 f6                	div    %esi
  40153a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40153d:	eb 1e                	jmp    40155d <SystemCoreClockUpdate+0x2c8>
    } /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U)) */
  } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U) {
  40153f:	b8 00 40 06 40       	mov    $0x40064000,%eax
  401544:	0f b6 00             	movzbl (%rax),%eax
  401547:	0f b6 c0             	movzbl %al,%eax
  40154a:	25 c0 00 00 00       	and    $0xc0,%eax
  40154f:	3d 80 00 00 00       	cmp    $0x80,%eax
  401554:	75 2a                	jne    401580 <SystemCoreClockUpdate+0x2eb>
    /* External reference clock is selected */
    MCGOUTClock = CPU_XTAL_CLK_HZ;     /* System oscillator drives MCG clock */
  401556:	c7 45 fc 00 12 7a 00 	movl   $0x7a1200,-0x4(%rbp)
  } else { /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U)) */
    /* Reserved value */
    return;
  } /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U)) */
  SystemCoreClock = (MCGOUTClock / (0x01U + ((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> SIM_CLKDIV1_OUTDIV1_SHIFT)));
  40155d:	b8 00 70 04 40       	mov    $0x40047000,%eax
  401562:	8b 80 44 10 00 00    	mov    0x1044(%rax),%eax
  401568:	c1 e8 1c             	shr    $0x1c,%eax
  40156b:	8d 78 01             	lea    0x1(%rax),%edi
  40156e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401571:	ba 00 00 00 00       	mov    $0x0,%edx
  401576:	f7 f7                	div    %edi
  401578:	89 05 e2 1a 20 00    	mov    %eax,0x201ae2(%rip)        # 603060 <SystemCoreClock>
  40157e:	eb 01                	jmp    401581 <SystemCoreClockUpdate+0x2ec>
  } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U) {
    /* External reference clock is selected */
    MCGOUTClock = CPU_XTAL_CLK_HZ;     /* System oscillator drives MCG clock */
  } else { /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U)) */
    /* Reserved value */
    return;
  401580:	90                   	nop
  } /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U)) */
  SystemCoreClock = (MCGOUTClock / (0x01U + ((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> SIM_CLKDIV1_OUTDIV1_SHIFT)));
}
  401581:	5d                   	pop    %rbp
  401582:	c3                   	retq   

0000000000401583 <main>:
 */

#include "project1.h"

int main()
{
  401583:	55                   	push   %rbp
  401584:	48 89 e5             	mov    %rsp,%rbp
#ifdef PROJECT1
	project1();
  401587:	e8 b3 fb ff ff       	callq  40113f <project1>
#endif
	return 0;
  40158c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  401591:	5d                   	pop    %rbp
  401592:	c3                   	retq   

0000000000401593 <print_memory>:
 */

# include "debug.h"

void print_memory(uint8_t * start, uint32_t length)
{
  401593:	55                   	push   %rbp
  401594:	48 89 e5             	mov    %rsp,%rbp
  401597:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40159b:	89 75 f4             	mov    %esi,-0xc(%rbp)
		printf("%x   ",*(start+i));
	}
	printf("\n");
	
#else
    return;
  40159e:	90                   	nop
#endif
  40159f:	5d                   	pop    %rbp
  4015a0:	c3                   	retq   

00000000004015a1 <my_memmove>:
#include "memory.h"
#include <math.h>


uint8_t * my_memmove(uint8_t * src, uint8_t * dst, size_t length)
{
  4015a1:	55                   	push   %rbp
  4015a2:	48 89 e5             	mov    %rsp,%rbp
  4015a5:	48 83 ec 30          	sub    $0x30,%rsp
  4015a9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4015ad:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4015b1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   
    int i;                     /*Temp variable to store source contents*/
    printf("\n  src is %s\n",src);
  4015b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4015b9:	48 89 c6             	mov    %rax,%rsi
  4015bc:	bf a0 1a 40 00       	mov    $0x401aa0,%edi
  4015c1:	b8 00 00 00 00       	mov    $0x0,%eax
  4015c6:	e8 a5 ef ff ff       	callq  400570 <printf@plt>
    if(src == NULL || dst == NULL) 
  4015cb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4015d0:	74 07                	je     4015d9 <my_memmove+0x38>
  4015d2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  4015d7:	75 14                	jne    4015ed <my_memmove+0x4c>
    {
        printf("\nNothing is assigned to source..exiting\n");
  4015d9:	bf b0 1a 40 00       	mov    $0x401ab0,%edi
  4015de:	e8 6d ef ff ff       	callq  400550 <puts@plt>
        exit(1);
  4015e3:	bf 01 00 00 00       	mov    $0x1,%edi
  4015e8:	e8 b3 ef ff ff       	callq  4005a0 <exit@plt>
    }
    else 
    {    
        bool overlap = (abs(dst-src)>(length*sizeof(uint8_t))) || (src-dst>0);
  4015ed:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4015f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4015f5:	48 29 c2             	sub    %rax,%rdx
  4015f8:	48 89 d0             	mov    %rdx,%rax
  4015fb:	99                   	cltd   
  4015fc:	31 d0                	xor    %edx,%eax
  4015fe:	29 d0                	sub    %edx,%eax
  401600:	48 98                	cltq   
  401602:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  401606:	77 13                	ja     40161b <my_memmove+0x7a>
  401608:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40160c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401610:	48 29 c2             	sub    %rax,%rdx
  401613:	48 89 d0             	mov    %rdx,%rax
  401616:	48 85 c0             	test   %rax,%rax
  401619:	7e 07                	jle    401622 <my_memmove+0x81>
  40161b:	b8 01 00 00 00       	mov    $0x1,%eax
  401620:	eb 05                	jmp    401627 <my_memmove+0x86>
  401622:	b8 00 00 00 00       	mov    $0x0,%eax
  401627:	88 45 fb             	mov    %al,-0x5(%rbp)
  40162a:	80 65 fb 01          	andb   $0x1,-0x5(%rbp)
        if(overlap)         /* Check for condition where forward copy is acceptable*/
  40162e:	80 7d fb 00          	cmpb   $0x0,-0x5(%rbp)
  401632:	74 39                	je     40166d <my_memmove+0xcc>
        {
            for(i = 0;i<length;i++)
  401634:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40163b:	eb 23                	jmp    401660 <my_memmove+0xbf>
            {
                *(dst+i) = *(src+i);
  40163d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401640:	48 63 d0             	movslq %eax,%rdx
  401643:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401647:	48 01 c2             	add    %rax,%rdx
  40164a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40164d:	48 63 c8             	movslq %eax,%rcx
  401650:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401654:	48 01 c8             	add    %rcx,%rax
  401657:	0f b6 00             	movzbl (%rax),%eax
  40165a:	88 02                	mov    %al,(%rdx)
    else 
    {    
        bool overlap = (abs(dst-src)>(length*sizeof(uint8_t))) || (src-dst>0);
        if(overlap)         /* Check for condition where forward copy is acceptable*/
        {
            for(i = 0;i<length;i++)
  40165c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  401660:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401663:	48 98                	cltq   
  401665:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  401669:	72 d2                	jb     40163d <my_memmove+0x9c>
  40166b:	eb 35                	jmp    4016a2 <my_memmove+0x101>

            } 
        }        
        else         /*Carry out copy from reverse during overlapping source and destinations*/
        {
            for(i = length-1;i>=0;i--)
  40166d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401671:	83 e8 01             	sub    $0x1,%eax
  401674:	89 45 fc             	mov    %eax,-0x4(%rbp)
  401677:	eb 23                	jmp    40169c <my_memmove+0xfb>
            {
                *(dst+i) = *(src+i);
  401679:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40167c:	48 63 d0             	movslq %eax,%rdx
  40167f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401683:	48 01 c2             	add    %rax,%rdx
  401686:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401689:	48 63 c8             	movslq %eax,%rcx
  40168c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401690:	48 01 c8             	add    %rcx,%rax
  401693:	0f b6 00             	movzbl (%rax),%eax
  401696:	88 02                	mov    %al,(%rdx)

            } 
        }        
        else         /*Carry out copy from reverse during overlapping source and destinations*/
        {
            for(i = length-1;i>=0;i--)
  401698:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  40169c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4016a0:	79 d7                	jns    401679 <my_memmove+0xd8>
                *(dst+i) = *(src+i);

            }
        }
    }
    return dst;
  4016a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
}
  4016a6:	c9                   	leaveq 
  4016a7:	c3                   	retq   

00000000004016a8 <my_memcpy>:


uint8_t * my_memcpy(uint8_t * src, uint8_t * dst, size_t length)
{
  4016a8:	55                   	push   %rbp
  4016a9:	48 89 e5             	mov    %rsp,%rbp
  4016ac:	48 83 ec 30          	sub    $0x30,%rsp
  4016b0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4016b4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4016b8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t i;
	if(src == NULL || dst == NULL)
  4016bc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4016c1:	74 07                	je     4016ca <my_memcpy+0x22>
  4016c3:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  4016c8:	75 14                	jne    4016de <my_memcpy+0x36>
 	{
 		printf("\nNothing is assigned to source..exiting\n");
  4016ca:	bf b0 1a 40 00       	mov    $0x401ab0,%edi
  4016cf:	e8 7c ee ff ff       	callq  400550 <puts@plt>
 		exit(1);
  4016d4:	bf 01 00 00 00       	mov    $0x1,%edi
  4016d9:	e8 c2 ee ff ff       	callq  4005a0 <exit@plt>
 	}
 	else           /*This does not check for overlap conditions*/
 	{
    	for(i = 0;i<length;i++)
  4016de:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  4016e2:	eb 25                	jmp    401709 <my_memcpy+0x61>
 		{
 			*(dst+i) = *(src+i);
  4016e4:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  4016e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4016ec:	48 01 c2             	add    %rax,%rdx
  4016ef:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
  4016f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4016f7:	48 01 c8             	add    %rcx,%rax
  4016fa:	0f b6 00             	movzbl (%rax),%eax
  4016fd:	88 02                	mov    %al,(%rdx)
 		printf("\nNothing is assigned to source..exiting\n");
 		exit(1);
 	}
 	else           /*This does not check for overlap conditions*/
 	{
    	for(i = 0;i<length;i++)
  4016ff:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  401703:	83 c0 01             	add    $0x1,%eax
  401706:	88 45 ff             	mov    %al,-0x1(%rbp)
  401709:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40170d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  401711:	72 d1                	jb     4016e4 <my_memcpy+0x3c>
 		{
 			*(dst+i) = *(src+i);
 		}
 	}
 	return dst; 
  401713:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
}
  401717:	c9                   	leaveq 
  401718:	c3                   	retq   

0000000000401719 <my_memset>:

uint8_t * my_memset(uint8_t * src, size_t length, uint8_t value)
{ 
  401719:	55                   	push   %rbp
  40171a:	48 89 e5             	mov    %rsp,%rbp
  40171d:	48 83 ec 30          	sub    $0x30,%rsp
  401721:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401725:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  401729:	89 d0                	mov    %edx,%eax
  40172b:	88 45 dc             	mov    %al,-0x24(%rbp)
	uint8_t i;
	if(src == NULL)
  40172e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  401733:	75 14                	jne    401749 <my_memset+0x30>
 	{
 		printf("src pointer doesn't point to anything..exiting\n");
  401735:	bf d8 1a 40 00       	mov    $0x401ad8,%edi
  40173a:	e8 11 ee ff ff       	callq  400550 <puts@plt>
 		exit(1);
  40173f:	bf 01 00 00 00       	mov    $0x1,%edi
  401744:	e8 57 ee ff ff       	callq  4005a0 <exit@plt>
 	}
 	for(i = 0;i<length;i++)   
  401749:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  40174d:	eb 1b                	jmp    40176a <my_memset+0x51>
 	{
 		*(src+i) = value;
  40174f:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  401753:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401757:	48 01 c2             	add    %rax,%rdx
  40175a:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  40175e:	88 02                	mov    %al,(%rdx)
	if(src == NULL)
 	{
 		printf("src pointer doesn't point to anything..exiting\n");
 		exit(1);
 	}
 	for(i = 0;i<length;i++)   
  401760:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  401764:	83 c0 01             	add    $0x1,%eax
  401767:	88 45 ff             	mov    %al,-0x1(%rbp)
  40176a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40176e:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  401772:	72 db                	jb     40174f <my_memset+0x36>
 	{
 		*(src+i) = value;
 	}
    return src;
  401774:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  401778:	c9                   	leaveq 
  401779:	c3                   	retq   

000000000040177a <my_memzero>:

uint8_t * my_memzero(uint8_t * src, size_t length)
{
  40177a:	55                   	push   %rbp
  40177b:	48 89 e5             	mov    %rsp,%rbp
  40177e:	48 83 ec 10          	sub    $0x10,%rsp
  401782:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401786:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    src = my_memset(src, length, 0);
  40178a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  40178e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401792:	ba 00 00 00 00       	mov    $0x0,%edx
  401797:	48 89 ce             	mov    %rcx,%rsi
  40179a:	48 89 c7             	mov    %rax,%rdi
  40179d:	e8 77 ff ff ff       	callq  401719 <my_memset>
  4017a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return src;
  4017a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4017aa:	c9                   	leaveq 
  4017ab:	c3                   	retq   

00000000004017ac <my_reverse>:

uint8_t * my_reverse(uint8_t * src, size_t length)
{
  4017ac:	55                   	push   %rbp
  4017ad:	48 89 e5             	mov    %rsp,%rbp
  4017b0:	48 83 ec 20          	sub    $0x20,%rsp
  4017b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4017b8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint8_t i;
    if(src == NULL)
  4017bc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  4017c1:	75 14                	jne    4017d7 <my_reverse+0x2b>
    {
        printf("src pointer doesn't point to anything..exiting\n");
  4017c3:	bf d8 1a 40 00       	mov    $0x401ad8,%edi
  4017c8:	e8 83 ed ff ff       	callq  400550 <puts@plt>
        exit(1);
  4017cd:	bf 01 00 00 00       	mov    $0x1,%edi
  4017d2:	e8 c9 ed ff ff       	callq  4005a0 <exit@plt>
    }
    for(i = 0;i<(length/2);i++)  /*Reverse copy*/
  4017d7:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  4017db:	eb 39                	jmp    401816 <my_reverse+0x6a>
    { 
  		swap((src+i),(src+(length-i)-1));
  4017dd:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4017e1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4017e5:	48 29 c2             	sub    %rax,%rdx
  4017e8:	48 89 d0             	mov    %rdx,%rax
  4017eb:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  4017ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4017f3:	48 01 c2             	add    %rax,%rdx
  4017f6:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
  4017fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4017fe:	48 01 c8             	add    %rcx,%rax
  401801:	48 89 d6             	mov    %rdx,%rsi
  401804:	48 89 c7             	mov    %rax,%rdi
  401807:	e8 20 00 00 00       	callq  40182c <swap>
    if(src == NULL)
    {
        printf("src pointer doesn't point to anything..exiting\n");
        exit(1);
    }
    for(i = 0;i<(length/2);i++)  /*Reverse copy*/
  40180c:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  401810:	83 c0 01             	add    $0x1,%eax
  401813:	88 45 ff             	mov    %al,-0x1(%rbp)
  401816:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  40181a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40181e:	48 d1 ea             	shr    %rdx
  401821:	48 39 d0             	cmp    %rdx,%rax
  401824:	72 b7                	jb     4017dd <my_reverse+0x31>
    { 
  		swap((src+i),(src+(length-i)-1));
    }
    return src;
  401826:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  40182a:	c9                   	leaveq 
  40182b:	c3                   	retq   

000000000040182c <swap>:

void swap(uint8_t*a, uint8_t*b) 
{
  40182c:	55                   	push   %rbp
  40182d:	48 89 e5             	mov    %rsp,%rbp
  401830:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401834:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint8_t temp;
	temp = *a;
  401838:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40183c:	0f b6 00             	movzbl (%rax),%eax
  40183f:	88 45 ff             	mov    %al,-0x1(%rbp)
	*a = *b;
  401842:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401846:	0f b6 10             	movzbl (%rax),%edx
  401849:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40184d:	88 10                	mov    %dl,(%rax)
	*b = temp;
  40184f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401853:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  401857:	88 10                	mov    %dl,(%rax)
}
  401859:	90                   	nop
  40185a:	5d                   	pop    %rbp
  40185b:	c3                   	retq   

000000000040185c <reserve_words>:

uint32_t * reserve_words(size_t length)
{
  40185c:	55                   	push   %rbp
  40185d:	48 89 e5             	mov    %rsp,%rbp
  401860:	48 83 ec 20          	sub    $0x20,%rsp
  401864:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	uint32_t *ptr = (uint32_t*) malloc(length * sizeof(uint32_t));  //memory allocated using malloc
  401868:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40186c:	48 c1 e0 02          	shl    $0x2,%rax
  401870:	48 89 c7             	mov    %rax,%rdi
  401873:	e8 18 ed ff ff       	callq  400590 <malloc@plt>
  401878:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if(ptr == NULL)                     
  40187c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  401881:	75 16                	jne    401899 <reserve_words+0x3d>
    {
        printf("Error! memory not allocated.");
  401883:	bf 07 1b 40 00       	mov    $0x401b07,%edi
  401888:	b8 00 00 00 00       	mov    $0x0,%eax
  40188d:	e8 de ec ff ff       	callq  400570 <printf@plt>
        return NULL;
  401892:	b8 00 00 00 00       	mov    $0x0,%eax
  401897:	eb 04                	jmp    40189d <reserve_words+0x41>
    }
    else
    	return ptr;
  401899:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40189d:	c9                   	leaveq 
  40189e:	c3                   	retq   

000000000040189f <free_words>:

void free_words(uint32_t * src)
{
  40189f:	55                   	push   %rbp
  4018a0:	48 89 e5             	mov    %rsp,%rbp
  4018a3:	48 83 ec 10          	sub    $0x10,%rsp
  4018a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if(src == NULL)
  4018ab:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  4018b0:	75 14                	jne    4018c6 <free_words+0x27>
    {
        printf("src pointer doesn't point to anything..exiting\n");
  4018b2:	bf d8 1a 40 00       	mov    $0x401ad8,%edi
  4018b7:	e8 94 ec ff ff       	callq  400550 <puts@plt>
        exit(1);
  4018bc:	bf 01 00 00 00       	mov    $0x1,%edi
  4018c1:	e8 da ec ff ff       	callq  4005a0 <exit@plt>
    }
	free(src);
  4018c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4018ca:	48 89 c7             	mov    %rax,%rdi
  4018cd:	e8 6e ec ff ff       	callq  400540 <free@plt>
}
  4018d2:	90                   	nop
  4018d3:	c9                   	leaveq 
  4018d4:	c3                   	retq   
  4018d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4018dc:	00 00 00 
  4018df:	90                   	nop

00000000004018e0 <__libc_csu_init>:
  4018e0:	41 57                	push   %r15
  4018e2:	41 56                	push   %r14
  4018e4:	41 89 ff             	mov    %edi,%r15d
  4018e7:	41 55                	push   %r13
  4018e9:	41 54                	push   %r12
  4018eb:	4c 8d 25 1e 15 20 00 	lea    0x20151e(%rip),%r12        # 602e10 <__frame_dummy_init_array_entry>
  4018f2:	55                   	push   %rbp
  4018f3:	48 8d 2d 1e 15 20 00 	lea    0x20151e(%rip),%rbp        # 602e18 <__init_array_end>
  4018fa:	53                   	push   %rbx
  4018fb:	49 89 f6             	mov    %rsi,%r14
  4018fe:	49 89 d5             	mov    %rdx,%r13
  401901:	4c 29 e5             	sub    %r12,%rbp
  401904:	48 83 ec 08          	sub    $0x8,%rsp
  401908:	48 c1 fd 03          	sar    $0x3,%rbp
  40190c:	e8 f7 eb ff ff       	callq  400508 <_init>
  401911:	48 85 ed             	test   %rbp,%rbp
  401914:	74 20                	je     401936 <__libc_csu_init+0x56>
  401916:	31 db                	xor    %ebx,%ebx
  401918:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40191f:	00 
  401920:	4c 89 ea             	mov    %r13,%rdx
  401923:	4c 89 f6             	mov    %r14,%rsi
  401926:	44 89 ff             	mov    %r15d,%edi
  401929:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40192d:	48 83 c3 01          	add    $0x1,%rbx
  401931:	48 39 eb             	cmp    %rbp,%rbx
  401934:	75 ea                	jne    401920 <__libc_csu_init+0x40>
  401936:	48 83 c4 08          	add    $0x8,%rsp
  40193a:	5b                   	pop    %rbx
  40193b:	5d                   	pop    %rbp
  40193c:	41 5c                	pop    %r12
  40193e:	41 5d                	pop    %r13
  401940:	41 5e                	pop    %r14
  401942:	41 5f                	pop    %r15
  401944:	c3                   	retq   
  401945:	90                   	nop
  401946:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40194d:	00 00 00 

0000000000401950 <__libc_csu_fini>:
  401950:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000401954 <_fini>:
  401954:	48 83 ec 08          	sub    $0x8,%rsp
  401958:	48 83 c4 08          	add    $0x8,%rsp
  40195c:	c3                   	retq   

Disassembly of section .rodata:

0000000000401960 <_IO_stdin_used>:
  401960:	01 00                	add    %eax,(%rax)
  401962:	02 00                	add    (%rax),%al
  401964:	00 00                	add    %al,(%rax)
  401966:	00 00                	add    %al,(%rax)
  401968:	0a 74 65 73          	or     0x73(%rbp,%riz,2),%dh
  40196c:	74 5f                	je     4019cd <_IO_stdin_used+0x6d>
  40196e:	64 61                	fs (bad) 
  401970:	74 61                	je     4019d3 <_IO_stdin_used+0x73>
  401972:	31 28                	xor    %ebp,(%rax)
  401974:	29 3b                	sub    %edi,(%rbx)
  401976:	00 74 65 73          	add    %dh,0x73(%rbp,%riz,2)
  40197a:	74 5f                	je     4019db <_IO_stdin_used+0x7b>
  40197c:	64 61                	fs (bad) 
  40197e:	74 61                	je     4019e1 <_IO_stdin_used+0x81>
  401980:	32 28                	xor    (%rax),%ch
  401982:	29 3b                	sub    %edi,(%rbx)
  401984:	00 74 65 73          	add    %dh,0x73(%rbp,%riz,2)
  401988:	74 5f                	je     4019e9 <_IO_stdin_used+0x89>
  40198a:	6d                   	insl   (%dx),%es:(%rdi)
  40198b:	65 6d                	gs insl (%dx),%es:(%rdi)
  40198d:	6d                   	insl   (%dx),%es:(%rdi)
  40198e:	6f                   	outsl  %ds:(%rsi),(%dx)
  40198f:	76 65                	jbe    4019f6 <_IO_stdin_used+0x96>
  401991:	31 28                	xor    %ebp,(%rax)
  401993:	29 20                	sub    %esp,(%rax)
  401995:	2d 20 4e 4f 20       	sub    $0x204f4e20,%eax
  40199a:	4f 56                	rex.WRXB push %r14
  40199c:	45 52                	rex.RB push %r10
  40199e:	4c                   	rex.WR
  40199f:	41 50                	push   %r8
  4019a1:	00 00                	add    %al,(%rax)
  4019a3:	00 00                	add    %al,(%rax)
  4019a5:	00 00                	add    %al,(%rax)
  4019a7:	00 74 65 73          	add    %dh,0x73(%rbp,%riz,2)
  4019ab:	74 5f                	je     401a0c <_IO_stdin_used+0xac>
  4019ad:	6d                   	insl   (%dx),%es:(%rdi)
  4019ae:	65 6d                	gs insl (%dx),%es:(%rdi)
  4019b0:	6d                   	insl   (%dx),%es:(%rdi)
  4019b1:	6f                   	outsl  %ds:(%rsi),(%dx)
  4019b2:	76 65                	jbe    401a19 <_IO_stdin_used+0xb9>
  4019b4:	32 28                	xor    (%rax),%ch
  4019b6:	29 20                	sub    %esp,(%rax)
  4019b8:	2d 4f 56 45 52       	sub    $0x5245564f,%eax
  4019bd:	4c                   	rex.WR
  4019be:	41 50                	push   %r8
  4019c0:	20 45 4e             	and    %al,0x4e(%rbp)
  4019c3:	44 20 4f 46          	and    %r9b,0x46(%rdi)
  4019c7:	20 53 52             	and    %dl,0x52(%rbx)
  4019ca:	43 20 42 45          	rex.XB and %al,0x45(%r10)
  4019ce:	47                   	rex.RXB
  4019cf:	49                   	rex.WB
  4019d0:	4e                   	rex.WRX
  4019d1:	4e                   	rex.WRX
  4019d2:	49                   	rex.WB
  4019d3:	4e                   	rex.WRX
  4019d4:	47 20 4f 46          	rex.RXB and %r9b,0x46(%r15)
  4019d8:	20 44 53 54          	and    %al,0x54(%rbx,%rdx,2)
  4019dc:	00 00                	add    %al,(%rax)
  4019de:	00 00                	add    %al,(%rax)
  4019e0:	74 65                	je     401a47 <_IO_stdin_used+0xe7>
  4019e2:	73 74                	jae    401a58 <_IO_stdin_used+0xf8>
  4019e4:	5f                   	pop    %rdi
  4019e5:	6d                   	insl   (%dx),%es:(%rdi)
  4019e6:	65 6d                	gs insl (%dx),%es:(%rdi)
  4019e8:	6f                   	outsl  %ds:(%rsi),(%dx)
  4019e9:	76 65                	jbe    401a50 <_IO_stdin_used+0xf0>
  4019eb:	33 28                	xor    (%rax),%ebp
  4019ed:	29 20                	sub    %esp,(%rax)
  4019ef:	2d 20 4f 56 45       	sub    $0x45564f20,%eax
  4019f4:	52                   	push   %rdx
  4019f5:	4c                   	rex.WR
  4019f6:	41 50                	push   %r8
  4019f8:	20 45 4e             	and    %al,0x4e(%rbp)
  4019fb:	44 20 4f 46          	and    %r9b,0x46(%rdi)
  4019ff:	20 44 45 53          	and    %al,0x53(%rbp,%rax,2)
  401a03:	54                   	push   %rsp
  401a04:	20 42 45             	and    %al,0x45(%rdx)
  401a07:	47                   	rex.RXB
  401a08:	49                   	rex.WB
  401a09:	4e                   	rex.WRX
  401a0a:	4e                   	rex.WRX
  401a0b:	49                   	rex.WB
  401a0c:	4e                   	rex.WRX
  401a0d:	47 20 4f 46          	rex.RXB and %r9b,0x46(%r15)
  401a11:	20 53 52             	and    %dl,0x52(%rbx)
  401a14:	43 00 74 65 73       	add    %sil,0x73(%r13,%r12,2)
  401a19:	74 5f                	je     401a7a <_IO_stdin_used+0x11a>
  401a1b:	6d                   	insl   (%dx),%es:(%rdi)
  401a1c:	65 6d                	gs insl (%dx),%es:(%rdi)
  401a1e:	63 70 79             	movslq 0x79(%rax),%esi
  401a21:	28 29                	sub    %ch,(%rcx)
  401a23:	00 74 65 73          	add    %dh,0x73(%rbp,%riz,2)
  401a27:	74 5f                	je     401a88 <_IO_stdin_used+0x128>
  401a29:	6d                   	insl   (%dx),%es:(%rdi)
  401a2a:	65 6d                	gs insl (%dx),%es:(%rdi)
  401a2c:	73 65                	jae    401a93 <_IO_stdin_used+0x133>
  401a2e:	74 28                	je     401a58 <_IO_stdin_used+0xf8>
  401a30:	29 00                	sub    %eax,(%rax)
  401a32:	74 65                	je     401a99 <_IO_stdin_used+0x139>
  401a34:	73 74                	jae    401aaa <_IO_stdin_used+0x14a>
  401a36:	5f                   	pop    %rdi
  401a37:	72 65                	jb     401a9e <_IO_stdin_used+0x13e>
  401a39:	76 65                	jbe    401aa0 <_IO_stdin_used+0x140>
  401a3b:	72 73                	jb     401ab0 <_IO_stdin_used+0x150>
  401a3d:	65 28 29             	sub    %ch,%gs:(%rcx)
  401a40:	00 25 64 0a 00 00    	add    %ah,0xa64(%rip)        # 4024aa <__FRAME_END__+0x4a2>
  401a46:	00 00                	add    %al,(%rax)
  401a48:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  401a4d:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  401a52:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  401a57:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  401a5c:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  401a61:	2d 2d 2d 2d 2d       	sub    $0x2d2d2d2d,%eax
  401a66:	2d 2d 00 54 65       	sub    $0x6554002d,%eax
  401a6b:	73 74                	jae    401ae1 <_IO_stdin_used+0x181>
  401a6d:	20 52 65             	and    %dl,0x65(%rdx)
  401a70:	73 75                	jae    401ae7 <_IO_stdin_used+0x187>
  401a72:	6c                   	insb   (%dx),%es:(%rdi)
  401a73:	74 73                	je     401ae8 <_IO_stdin_used+0x188>
  401a75:	3a 00                	cmp    (%rax),%al
  401a77:	20 20                	and    %ah,(%rax)
  401a79:	50                   	push   %rax
  401a7a:	41 53                	push   %r11
  401a7c:	53                   	push   %rbx
  401a7d:	45                   	rex.RB
  401a7e:	44 3a 20             	cmp    (%rax),%r12b
  401a81:	25 64 20 2f 20       	and    $0x202f2064,%eax
  401a86:	25 64 0a 00 20       	and    $0x20000a64,%eax
  401a8b:	20 46 41             	and    %al,0x41(%rsi)
  401a8e:	49                   	rex.WB
  401a8f:	4c                   	rex.WR
  401a90:	45                   	rex.RB
  401a91:	44 3a 20             	cmp    (%rax),%r12b
  401a94:	25 64 20 2f 20       	and    $0x202f2064,%eax
  401a99:	25 64 0a 00 00       	and    $0xa64,%eax
  401a9e:	00 00                	add    %al,(%rax)
  401aa0:	0a 20                	or     (%rax),%ah
  401aa2:	20 73 72             	and    %dh,0x72(%rbx)
  401aa5:	63 20                	movslq (%rax),%esp
  401aa7:	69 73 20 25 73 0a 00 	imul   $0xa7325,0x20(%rbx),%esi
  401aae:	00 00                	add    %al,(%rax)
  401ab0:	0a 4e 6f             	or     0x6f(%rsi),%cl
  401ab3:	74 68                	je     401b1d <_IO_stdin_used+0x1bd>
  401ab5:	69 6e 67 20 69 73 20 	imul   $0x20736920,0x67(%rsi),%ebp
  401abc:	61                   	(bad)  
  401abd:	73 73                	jae    401b32 <__GNU_EH_FRAME_HDR+0xe>
  401abf:	69 67 6e 65 64 20 74 	imul   $0x74206465,0x6e(%rdi),%esp
  401ac6:	6f                   	outsl  %ds:(%rsi),(%dx)
  401ac7:	20 73 6f             	and    %dh,0x6f(%rbx)
  401aca:	75 72                	jne    401b3e <__GNU_EH_FRAME_HDR+0x1a>
  401acc:	63 65 2e             	movslq 0x2e(%rbp),%esp
  401acf:	2e 65 78 69          	cs gs js,pn 401b3c <__GNU_EH_FRAME_HDR+0x18>
  401ad3:	74 69                	je     401b3e <__GNU_EH_FRAME_HDR+0x1a>
  401ad5:	6e                   	outsb  %ds:(%rsi),(%dx)
  401ad6:	67 00 73 72          	add    %dh,0x72(%ebx)
  401ada:	63 20                	movslq (%rax),%esp
  401adc:	70 6f                	jo     401b4d <__GNU_EH_FRAME_HDR+0x29>
  401ade:	69 6e 74 65 72 20 64 	imul   $0x64207265,0x74(%rsi),%ebp
  401ae5:	6f                   	outsl  %ds:(%rsi),(%dx)
  401ae6:	65 73 6e             	gs jae 401b57 <__GNU_EH_FRAME_HDR+0x33>
  401ae9:	27                   	(bad)  
  401aea:	74 20                	je     401b0c <_IO_stdin_used+0x1ac>
  401aec:	70 6f                	jo     401b5d <__GNU_EH_FRAME_HDR+0x39>
  401aee:	69 6e 74 20 74 6f 20 	imul   $0x206f7420,0x74(%rsi),%ebp
  401af5:	61                   	(bad)  
  401af6:	6e                   	outsb  %ds:(%rsi),(%dx)
  401af7:	79 74                	jns    401b6d <__GNU_EH_FRAME_HDR+0x49>
  401af9:	68 69 6e 67 2e       	pushq  $0x2e676e69
  401afe:	2e 65 78 69          	cs gs js,pn 401b6b <__GNU_EH_FRAME_HDR+0x47>
  401b02:	74 69                	je     401b6d <__GNU_EH_FRAME_HDR+0x49>
  401b04:	6e                   	outsb  %ds:(%rsi),(%dx)
  401b05:	67 00 45 72          	add    %al,0x72(%ebp)
  401b09:	72 6f                	jb     401b7a <__GNU_EH_FRAME_HDR+0x56>
  401b0b:	72 21                	jb     401b2e <__GNU_EH_FRAME_HDR+0xa>
  401b0d:	20 6d 65             	and    %ch,0x65(%rbp)
  401b10:	6d                   	insl   (%dx),%es:(%rdi)
  401b11:	6f                   	outsl  %ds:(%rsi),(%dx)
  401b12:	72 79                	jb     401b8d <__GNU_EH_FRAME_HDR+0x69>
  401b14:	20 6e 6f             	and    %ch,0x6f(%rsi)
  401b17:	74 20                	je     401b39 <__GNU_EH_FRAME_HDR+0x15>
  401b19:	61                   	(bad)  
  401b1a:	6c                   	insb   (%dx),%es:(%rdi)
  401b1b:	6c                   	insb   (%dx),%es:(%rdi)
  401b1c:	6f                   	outsl  %ds:(%rsi),(%dx)
  401b1d:	63 61 74             	movslq 0x74(%rcx),%esp
  401b20:	65                   	gs
  401b21:	64                   	fs
  401b22:	2e                   	cs
	...

Disassembly of section .eh_frame_hdr:

0000000000401b24 <__GNU_EH_FRAME_HDR>:
  401b24:	01 1b                	add    %ebx,(%rbx)
  401b26:	03 3b                	add    (%rbx),%edi
  401b28:	f0 00 00             	lock add %al,(%rax)
  401b2b:	00 1d 00 00 00 0c    	add    %bl,0xc000000(%rip)        # c401b31 <__TMC_END__+0xbdfeac9>
  401b31:	ea                   	(bad)  
  401b32:	ff                   	(bad)  
  401b33:	ff                   	(bad)  
  401b34:	3c 01                	cmp    $0x1,%al
  401b36:	00 00                	add    %al,(%rax)
  401b38:	9c                   	pushfq 
  401b39:	ea                   	(bad)  
  401b3a:	ff                   	(bad)  
  401b3b:	ff 0c 01             	decl   (%rcx,%rax,1)
  401b3e:	00 00                	add    %al,(%rax)
  401b40:	92                   	xchg   %eax,%edx
  401b41:	eb ff                	jmp    401b42 <__GNU_EH_FRAME_HDR+0x1e>
  401b43:	ff 64 01 00          	jmpq   *0x0(%rcx,%rax,1)
  401b47:	00 9c ec ff ff 84 01 	add    %bl,0x184ffff(%rsp,%rbp,8)
  401b4e:	00 00                	add    %al,(%rax)
  401b50:	8b ed                	mov    %ebp,%ebp
  401b52:	ff                   	(bad)  
  401b53:	ff a4 01 00 00 18 ee 	jmpq   *-0x11e80000(%rcx,%rax,1)
  401b5a:	ff                   	(bad)  
  401b5b:	ff c4                	inc    %esp
  401b5d:	01 00                	add    %eax,(%rax)
  401b5f:	00 a5 ee ff ff e4    	add    %ah,-0x1b000012(%rbp)
  401b65:	01 00                	add    %eax,(%rax)
  401b67:	00 34 ef             	add    %dh,(%rdi,%rbp,8)
  401b6a:	ff                   	(bad)  
  401b6b:	ff 04 02             	incl   (%rdx,%rax,1)
  401b6e:	00 00                	add    %al,(%rax)
  401b70:	c3                   	retq   
  401b71:	ef                   	out    %eax,(%dx)
  401b72:	ff                   	(bad)  
  401b73:	ff 24 02             	jmpq   *(%rdx,%rax,1)
  401b76:	00 00                	add    %al,(%rax)
  401b78:	b0 f0                	mov    $0xf0,%al
  401b7a:	ff                   	(bad)  
  401b7b:	ff 44 02 00          	incl   0x0(%rdx,%rax,1)
  401b7f:	00 9d f1 ff ff 64    	add    %bl,0x64fffff1(%rbp)
  401b85:	02 00                	add    (%rax),%al
  401b87:	00 8f f2 ff ff 84    	add    %cl,-0x7b00000e(%rdi)
  401b8d:	02 00                	add    (%rax),%al
  401b8f:	00 7c f3 ff          	add    %bh,-0x1(%rbx,%rsi,8)
  401b93:	ff a4 02 00 00 a0 f4 	jmpq   *-0xb600000(%rdx,%rax,1)
  401b9a:	ff                   	(bad)  
  401b9b:	ff c4                	inc    %esp
  401b9d:	02 00                	add    (%rax),%al
  401b9f:	00 1b                	add    %bl,(%rbx)
  401ba1:	f6 ff                	idiv   %bh
  401ba3:	ff e4                	jmpq   *%rsp
  401ba5:	02 00                	add    (%rax),%al
  401ba7:	00 5b f7             	add    %bl,-0x9(%rbx)
  401baa:	ff                   	(bad)  
  401bab:	ff 04 03             	incl   (%rbx,%rax,1)
  401bae:	00 00                	add    %al,(%rax)
  401bb0:	71 f7                	jno    401ba9 <__GNU_EH_FRAME_HDR+0x85>
  401bb2:	ff                   	(bad)  
  401bb3:	ff 24 03             	jmpq   *(%rbx,%rax,1)
  401bb6:	00 00                	add    %al,(%rax)
  401bb8:	5f                   	pop    %rdi
  401bb9:	fa                   	cli    
  401bba:	ff                   	(bad)  
  401bbb:	ff 44 03 00          	incl   0x0(%rbx,%rax,1)
  401bbf:	00 6f fa             	add    %ch,-0x6(%rdi)
  401bc2:	ff                   	(bad)  
  401bc3:	ff 64 03 00          	jmpq   *0x0(%rbx,%rax,1)
  401bc7:	00 7d fa             	add    %bh,-0x6(%rbp)
  401bca:	ff                   	(bad)  
  401bcb:	ff 84 03 00 00 84 fb 	incl   -0x47c0000(%rbx,%rax,1)
  401bd2:	ff                   	(bad)  
  401bd3:	ff a4 03 00 00 f5 fb 	jmpq   *-0x40b0000(%rbx,%rax,1)
  401bda:	ff                   	(bad)  
  401bdb:	ff c4                	inc    %esp
  401bdd:	03 00                	add    (%rax),%eax
  401bdf:	00 56 fc             	add    %dl,-0x4(%rsi)
  401be2:	ff                   	(bad)  
  401be3:	ff e4                	jmpq   *%rsp
  401be5:	03 00                	add    (%rax),%eax
  401be7:	00 88 fc ff ff 04    	add    %cl,0x4fffffc(%rax)
  401bed:	04 00                	add    $0x0,%al
  401bef:	00 08                	add    %cl,(%rax)
  401bf1:	fd                   	std    
  401bf2:	ff                   	(bad)  
  401bf3:	ff 24 04             	jmpq   *(%rsp,%rax,1)
  401bf6:	00 00                	add    %al,(%rax)
  401bf8:	38 fd                	cmp    %bh,%ch
  401bfa:	ff                   	(bad)  
  401bfb:	ff 44 04 00          	incl   0x0(%rsp,%rax,1)
  401bff:	00 7b fd             	add    %bh,-0x3(%rbx)
  401c02:	ff                   	(bad)  
  401c03:	ff 64 04 00          	jmpq   *0x0(%rsp,%rax,1)
  401c07:	00 bc fd ff ff 84 04 	add    %bh,0x484ffff(%rbp,%rdi,8)
  401c0e:	00 00                	add    %al,(%rax)
  401c10:	2c fe                	sub    $0xfe,%al
  401c12:	ff                   	(bad)  
  401c13:	ff cc                	dec    %esp
  401c15:	04 00                	add    $0x0,%al
	...

Disassembly of section .eh_frame:

0000000000401c18 <__FRAME_END__-0x3f0>:
  401c18:	14 00                	adc    $0x0,%al
  401c1a:	00 00                	add    %al,(%rax)
  401c1c:	00 00                	add    %al,(%rax)
  401c1e:	00 00                	add    %al,(%rax)
  401c20:	01 7a 52             	add    %edi,0x52(%rdx)
  401c23:	00 01                	add    %al,(%rcx)
  401c25:	78 10                	js     401c37 <__GNU_EH_FRAME_HDR+0x113>
  401c27:	01 1b                	add    %ebx,(%rbx)
  401c29:	0c 07                	or     $0x7,%al
  401c2b:	08 90 01 07 10 14    	or     %dl,0x14100701(%rax)
  401c31:	00 00                	add    %al,(%rax)
  401c33:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401c36:	00 00                	add    %al,(%rax)
  401c38:	88 e9                	mov    %ch,%cl
  401c3a:	ff                   	(bad)  
  401c3b:	ff 2a                	ljmp   *(%rdx)
	...
  401c45:	00 00                	add    %al,(%rax)
  401c47:	00 14 00             	add    %dl,(%rax,%rax,1)
  401c4a:	00 00                	add    %al,(%rax)
  401c4c:	00 00                	add    %al,(%rax)
  401c4e:	00 00                	add    %al,(%rax)
  401c50:	01 7a 52             	add    %edi,0x52(%rdx)
  401c53:	00 01                	add    %al,(%rcx)
  401c55:	78 10                	js     401c67 <__GNU_EH_FRAME_HDR+0x143>
  401c57:	01 1b                	add    %ebx,(%rbx)
  401c59:	0c 07                	or     $0x7,%al
  401c5b:	08 90 01 00 00 24    	or     %dl,0x24000001(%rax)
  401c61:	00 00                	add    %al,(%rax)
  401c63:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401c66:	00 00                	add    %al,(%rax)
  401c68:	c8 e8 ff ff          	enterq $0xffe8,$0xff
  401c6c:	80 00 00             	addb   $0x0,(%rax)
  401c6f:	00 00                	add    %al,(%rax)
  401c71:	0e                   	(bad)  
  401c72:	10 46 0e             	adc    %al,0xe(%rsi)
  401c75:	18 4a 0f             	sbb    %cl,0xf(%rdx)
  401c78:	0b 77 08             	or     0x8(%rdi),%esi
  401c7b:	80 00 3f             	addb   $0x3f,(%rax)
  401c7e:	1a 3b                	sbb    (%rbx),%bh
  401c80:	2a 33                	sub    (%rbx),%dh
  401c82:	24 22                	and    $0x22,%al
  401c84:	00 00                	add    %al,(%rax)
  401c86:	00 00                	add    %al,(%rax)
  401c88:	1c 00                	sbb    $0x0,%al
  401c8a:	00 00                	add    %al,(%rax)
  401c8c:	44 00 00             	add    %r8b,(%rax)
  401c8f:	00 26                	add    %ah,(%rsi)
  401c91:	ea                   	(bad)  
  401c92:	ff                   	(bad)  
  401c93:	ff 0a                	decl   (%rdx)
  401c95:	01 00                	add    %eax,(%rax)
  401c97:	00 00                	add    %al,(%rax)
  401c99:	41 0e                	rex.B (bad) 
  401c9b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401ca1:	03 05 01 0c 07 08    	add    0x8070c01(%rip),%eax        # 84728a8 <__TMC_END__+0x7e6f840>
  401ca7:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401caa:	00 00                	add    %al,(%rax)
  401cac:	64 00 00             	add    %al,%fs:(%rax)
  401caf:	00 10                	add    %dl,(%rax)
  401cb1:	eb ff                	jmp    401cb2 <__GNU_EH_FRAME_HDR+0x18e>
  401cb3:	ff                   	(bad)  
  401cb4:	ef                   	out    %eax,(%dx)
  401cb5:	00 00                	add    %al,(%rax)
  401cb7:	00 00                	add    %al,(%rax)
  401cb9:	41 0e                	rex.B (bad) 
  401cbb:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401cc1:	02 ea                	add    %dl,%ch
  401cc3:	0c 07                	or     $0x7,%al
  401cc5:	08 00                	or     %al,(%rax)
  401cc7:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401cca:	00 00                	add    %al,(%rax)
  401ccc:	84 00                	test   %al,(%rax)
  401cce:	00 00                	add    %al,(%rax)
  401cd0:	df eb                	fucomip %st(3),%st
  401cd2:	ff                   	(bad)  
  401cd3:	ff 8d 00 00 00 00    	decl   0x0(%rbp)
  401cd9:	41 0e                	rex.B (bad) 
  401cdb:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401ce1:	02 88 0c 07 08 00    	add    0x8070c(%rax),%cl
  401ce7:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401cea:	00 00                	add    %al,(%rax)
  401cec:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
  401ced:	00 00                	add    %al,(%rax)
  401cef:	00 4c ec ff          	add    %cl,-0x1(%rsp,%rbp,8)
  401cf3:	ff 8d 00 00 00 00    	decl   0x0(%rbp)
  401cf9:	41 0e                	rex.B (bad) 
  401cfb:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401d01:	02 88 0c 07 08 00    	add    0x8070c(%rax),%cl
  401d07:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401d0a:	00 00                	add    %al,(%rax)
  401d0c:	c4                   	(bad)  
  401d0d:	00 00                	add    %al,(%rax)
  401d0f:	00 b9 ec ff ff 8f    	add    %bh,-0x70000014(%rcx)
  401d15:	00 00                	add    %al,(%rax)
  401d17:	00 00                	add    %al,(%rax)
  401d19:	41 0e                	rex.B (bad) 
  401d1b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401d21:	02 8a 0c 07 08 00    	add    0x8070c(%rdx),%cl
  401d27:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401d2a:	00 00                	add    %al,(%rax)
  401d2c:	e4 00                	in     $0x0,%al
  401d2e:	00 00                	add    %al,(%rax)
  401d30:	28 ed                	sub    %ch,%ch
  401d32:	ff                   	(bad)  
  401d33:	ff 8f 00 00 00 00    	decl   0x0(%rdi)
  401d39:	41 0e                	rex.B (bad) 
  401d3b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401d41:	02 8a 0c 07 08 00    	add    0x8070c(%rdx),%cl
  401d47:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401d4a:	00 00                	add    %al,(%rax)
  401d4c:	04 01                	add    $0x1,%al
  401d4e:	00 00                	add    %al,(%rax)
  401d50:	97                   	xchg   %eax,%edi
  401d51:	ed                   	in     (%dx),%eax
  401d52:	ff                   	(bad)  
  401d53:	ff                   	(bad)  
  401d54:	ed                   	in     (%dx),%eax
  401d55:	00 00                	add    %al,(%rax)
  401d57:	00 00                	add    %al,(%rax)
  401d59:	41 0e                	rex.B (bad) 
  401d5b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401d61:	02 e8                	add    %al,%ch
  401d63:	0c 07                	or     $0x7,%al
  401d65:	08 00                	or     %al,(%rax)
  401d67:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401d6a:	00 00                	add    %al,(%rax)
  401d6c:	24 01                	and    $0x1,%al
  401d6e:	00 00                	add    %al,(%rax)
  401d70:	64 ee                	fs out %al,(%dx)
  401d72:	ff                   	(bad)  
  401d73:	ff                   	(bad)  
  401d74:	ed                   	in     (%dx),%eax
  401d75:	00 00                	add    %al,(%rax)
  401d77:	00 00                	add    %al,(%rax)
  401d79:	41 0e                	rex.B (bad) 
  401d7b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401d81:	02 e8                	add    %al,%ch
  401d83:	0c 07                	or     $0x7,%al
  401d85:	08 00                	or     %al,(%rax)
  401d87:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401d8a:	00 00                	add    %al,(%rax)
  401d8c:	44 01 00             	add    %r8d,(%rax)
  401d8f:	00 31                	add    %dh,(%rcx)
  401d91:	ef                   	out    %eax,(%dx)
  401d92:	ff                   	(bad)  
  401d93:	ff f2                	push   %rdx
  401d95:	00 00                	add    %al,(%rax)
  401d97:	00 00                	add    %al,(%rax)
  401d99:	41 0e                	rex.B (bad) 
  401d9b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401da1:	02 ed                	add    %ch,%ch
  401da3:	0c 07                	or     $0x7,%al
  401da5:	08 00                	or     %al,(%rax)
  401da7:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401daa:	00 00                	add    %al,(%rax)
  401dac:	64 01 00             	add    %eax,%fs:(%rax)
  401daf:	00 03                	add    %al,(%rbx)
  401db1:	f0 ff                	lock (bad) 
  401db3:	ff                   	(bad)  
  401db4:	ed                   	in     (%dx),%eax
  401db5:	00 00                	add    %al,(%rax)
  401db7:	00 00                	add    %al,(%rax)
  401db9:	41 0e                	rex.B (bad) 
  401dbb:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401dc1:	02 e8                	add    %al,%ch
  401dc3:	0c 07                	or     $0x7,%al
  401dc5:	08 00                	or     %al,(%rax)
  401dc7:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401dca:	00 00                	add    %al,(%rax)
  401dcc:	84 01                	test   %al,(%rcx)
  401dce:	00 00                	add    %al,(%rax)
  401dd0:	d0                   	(bad)  
  401dd1:	f0 ff                	lock (bad) 
  401dd3:	ff 24 01             	jmpq   *(%rcx,%rax,1)
  401dd6:	00 00                	add    %al,(%rax)
  401dd8:	00 41 0e             	add    %al,0xe(%rcx)
  401ddb:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401de1:	03 1f                	add    (%rdi),%ebx
  401de3:	01 0c 07             	add    %ecx,(%rdi,%rax,1)
  401de6:	08 00                	or     %al,(%rax)
  401de8:	1c 00                	sbb    $0x0,%al
  401dea:	00 00                	add    %al,(%rax)
  401dec:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
  401ded:	01 00                	add    %eax,(%rax)
  401def:	00 d4                	add    %dl,%ah
  401df1:	f1                   	icebp  
  401df2:	ff                   	(bad)  
  401df3:	ff                   	(bad)  
  401df4:	7b 01                	jnp    401df7 <__GNU_EH_FRAME_HDR+0x2d3>
  401df6:	00 00                	add    %al,(%rax)
  401df8:	00 41 0e             	add    %al,0xe(%rcx)
  401dfb:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401e01:	03 76 01             	add    0x1(%rsi),%esi
  401e04:	0c 07                	or     $0x7,%al
  401e06:	08 00                	or     %al,(%rax)
  401e08:	1c 00                	sbb    $0x0,%al
  401e0a:	00 00                	add    %al,(%rax)
  401e0c:	c4 01 00 00          	(bad)  
  401e10:	2f                   	(bad)  
  401e11:	f3 ff                	repz (bad) 
  401e13:	ff 40 01             	incl   0x1(%rax)
  401e16:	00 00                	add    %al,(%rax)
  401e18:	00 41 0e             	add    %al,0xe(%rcx)
  401e1b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401e21:	03 3b                	add    (%rbx),%edi
  401e23:	01 0c 07             	add    %ecx,(%rdi,%rax,1)
  401e26:	08 00                	or     %al,(%rax)
  401e28:	1c 00                	sbb    $0x0,%al
  401e2a:	00 00                	add    %al,(%rax)
  401e2c:	e4 01                	in     $0x1,%al
  401e2e:	00 00                	add    %al,(%rax)
  401e30:	4f f4                	rex.WRXB hlt 
  401e32:	ff                   	(bad)  
  401e33:	ff 16                	callq  *(%rsi)
  401e35:	00 00                	add    %al,(%rax)
  401e37:	00 00                	add    %al,(%rax)
  401e39:	41 0e                	rex.B (bad) 
  401e3b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401e41:	51                   	push   %rcx
  401e42:	0c 07                	or     $0x7,%al
  401e44:	08 00                	or     %al,(%rax)
  401e46:	00 00                	add    %al,(%rax)
  401e48:	1c 00                	sbb    $0x0,%al
  401e4a:	00 00                	add    %al,(%rax)
  401e4c:	04 02                	add    $0x2,%al
  401e4e:	00 00                	add    %al,(%rax)
  401e50:	45 f4                	rex.RB hlt 
  401e52:	ff                   	(bad)  
  401e53:	ff                   	(bad)  
  401e54:	ee                   	out    %al,(%dx)
  401e55:	02 00                	add    (%rax),%al
  401e57:	00 00                	add    %al,(%rax)
  401e59:	41 0e                	rex.B (bad) 
  401e5b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401e61:	03 e9                	add    %ecx,%ebp
  401e63:	02 0c 07             	add    (%rdi,%rax,1),%cl
  401e66:	08 00                	or     %al,(%rax)
  401e68:	1c 00                	sbb    $0x0,%al
  401e6a:	00 00                	add    %al,(%rax)
  401e6c:	24 02                	and    $0x2,%al
  401e6e:	00 00                	add    %al,(%rax)
  401e70:	13 f7                	adc    %edi,%esi
  401e72:	ff                   	(bad)  
  401e73:	ff 10                	callq  *(%rax)
  401e75:	00 00                	add    %al,(%rax)
  401e77:	00 00                	add    %al,(%rax)
  401e79:	41 0e                	rex.B (bad) 
  401e7b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401e81:	4b 0c 07             	rex.WXB or $0x7,%al
  401e84:	08 00                	or     %al,(%rax)
  401e86:	00 00                	add    %al,(%rax)
  401e88:	1c 00                	sbb    $0x0,%al
  401e8a:	00 00                	add    %al,(%rax)
  401e8c:	44 02 00             	add    (%rax),%r8b
  401e8f:	00 03                	add    %al,(%rbx)
  401e91:	f7 ff                	idiv   %edi
  401e93:	ff 0e                	decl   (%rsi)
  401e95:	00 00                	add    %al,(%rax)
  401e97:	00 00                	add    %al,(%rax)
  401e99:	41 0e                	rex.B (bad) 
  401e9b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401ea1:	49 0c 07             	rex.WB or $0x7,%al
  401ea4:	08 00                	or     %al,(%rax)
  401ea6:	00 00                	add    %al,(%rax)
  401ea8:	1c 00                	sbb    $0x0,%al
  401eaa:	00 00                	add    %al,(%rax)
  401eac:	64 02 00             	add    %fs:(%rax),%al
  401eaf:	00 f1                	add    %dh,%cl
  401eb1:	f6 ff                	idiv   %bh
  401eb3:	ff 07                	incl   (%rdi)
  401eb5:	01 00                	add    %eax,(%rax)
  401eb7:	00 00                	add    %al,(%rax)
  401eb9:	41 0e                	rex.B (bad) 
  401ebb:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401ec1:	03 02                	add    (%rdx),%eax
  401ec3:	01 0c 07             	add    %ecx,(%rdi,%rax,1)
  401ec6:	08 00                	or     %al,(%rax)
  401ec8:	1c 00                	sbb    $0x0,%al
  401eca:	00 00                	add    %al,(%rax)
  401ecc:	84 02                	test   %al,(%rdx)
  401ece:	00 00                	add    %al,(%rax)
  401ed0:	d8 f7                	fdiv   %st(7),%st
  401ed2:	ff                   	(bad)  
  401ed3:	ff 71 00             	pushq  0x0(%rcx)
  401ed6:	00 00                	add    %al,(%rax)
  401ed8:	00 41 0e             	add    %al,0xe(%rcx)
  401edb:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401ee1:	02 6c 0c 07          	add    0x7(%rsp,%rcx,1),%ch
  401ee5:	08 00                	or     %al,(%rax)
  401ee7:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401eea:	00 00                	add    %al,(%rax)
  401eec:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
  401eed:	02 00                	add    (%rax),%al
  401eef:	00 29                	add    %ch,(%rcx)
  401ef1:	f8                   	clc    
  401ef2:	ff                   	(bad)  
  401ef3:	ff 61 00             	jmpq   *0x0(%rcx)
  401ef6:	00 00                	add    %al,(%rax)
  401ef8:	00 41 0e             	add    %al,0xe(%rcx)
  401efb:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401f01:	02 5c 0c 07          	add    0x7(%rsp,%rcx,1),%bl
  401f05:	08 00                	or     %al,(%rax)
  401f07:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401f0a:	00 00                	add    %al,(%rax)
  401f0c:	c4 02 00 00          	(bad)  
  401f10:	6a f8                	pushq  $0xfffffffffffffff8
  401f12:	ff                   	(bad)  
  401f13:	ff 32                	pushq  (%rdx)
  401f15:	00 00                	add    %al,(%rax)
  401f17:	00 00                	add    %al,(%rax)
  401f19:	41 0e                	rex.B (bad) 
  401f1b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401f21:	6d                   	insl   (%dx),%es:(%rdi)
  401f22:	0c 07                	or     $0x7,%al
  401f24:	08 00                	or     %al,(%rax)
  401f26:	00 00                	add    %al,(%rax)
  401f28:	1c 00                	sbb    $0x0,%al
  401f2a:	00 00                	add    %al,(%rax)
  401f2c:	e4 02                	in     $0x2,%al
  401f2e:	00 00                	add    %al,(%rax)
  401f30:	7c f8                	jl     401f2a <__GNU_EH_FRAME_HDR+0x406>
  401f32:	ff                   	(bad)  
  401f33:	ff 80 00 00 00 00    	incl   0x0(%rax)
  401f39:	41 0e                	rex.B (bad) 
  401f3b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401f41:	02 7b 0c             	add    0xc(%rbx),%bh
  401f44:	07                   	(bad)  
  401f45:	08 00                	or     %al,(%rax)
  401f47:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401f4a:	00 00                	add    %al,(%rax)
  401f4c:	04 03                	add    $0x3,%al
  401f4e:	00 00                	add    %al,(%rax)
  401f50:	dc f8                	fdivr  %st,%st(0)
  401f52:	ff                   	(bad)  
  401f53:	ff 30                	pushq  (%rax)
  401f55:	00 00                	add    %al,(%rax)
  401f57:	00 00                	add    %al,(%rax)
  401f59:	41 0e                	rex.B (bad) 
  401f5b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401f61:	6b 0c 07 08          	imul   $0x8,(%rdi,%rax,1),%ecx
  401f65:	00 00                	add    %al,(%rax)
  401f67:	00 1c 00             	add    %bl,(%rax,%rax,1)
  401f6a:	00 00                	add    %al,(%rax)
  401f6c:	24 03                	and    $0x3,%al
  401f6e:	00 00                	add    %al,(%rax)
  401f70:	ec                   	in     (%dx),%al
  401f71:	f8                   	clc    
  401f72:	ff                   	(bad)  
  401f73:	ff 43 00             	incl   0x0(%rbx)
  401f76:	00 00                	add    %al,(%rax)
  401f78:	00 41 0e             	add    %al,0xe(%rcx)
  401f7b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401f81:	7e 0c                	jle    401f8f <__GNU_EH_FRAME_HDR+0x46b>
  401f83:	07                   	(bad)  
  401f84:	08 00                	or     %al,(%rax)
  401f86:	00 00                	add    %al,(%rax)
  401f88:	1c 00                	sbb    $0x0,%al
  401f8a:	00 00                	add    %al,(%rax)
  401f8c:	44 03 00             	add    (%rax),%r8d
  401f8f:	00 0f                	add    %cl,(%rdi)
  401f91:	f9                   	stc    
  401f92:	ff                   	(bad)  
  401f93:	ff 36                	pushq  (%rsi)
  401f95:	00 00                	add    %al,(%rax)
  401f97:	00 00                	add    %al,(%rax)
  401f99:	41 0e                	rex.B (bad) 
  401f9b:	10 86 02 43 0d 06    	adc    %al,0x60d4302(%rsi)
  401fa1:	71 0c                	jno    401faf <__GNU_EH_FRAME_HDR+0x48b>
  401fa3:	07                   	(bad)  
  401fa4:	08 00                	or     %al,(%rax)
  401fa6:	00 00                	add    %al,(%rax)
  401fa8:	44 00 00             	add    %r8b,(%rax)
  401fab:	00 64 03 00          	add    %ah,0x0(%rbx,%rax,1)
  401faf:	00 30                	add    %dh,(%rax)
  401fb1:	f9                   	stc    
  401fb2:	ff                   	(bad)  
  401fb3:	ff 65 00             	jmpq   *0x0(%rbp)
  401fb6:	00 00                	add    %al,(%rax)
  401fb8:	00 42 0e             	add    %al,0xe(%rdx)
  401fbb:	10 8f 02 42 0e 18    	adc    %cl,0x180e4202(%rdi)
  401fc1:	8e 03                	mov    (%rbx),%es
  401fc3:	45 0e                	rex.RB (bad) 
  401fc5:	20 8d 04 42 0e 28    	and    %cl,0x280e4204(%rbp)
  401fcb:	8c 05 48 0e 30 86    	mov    %es,-0x79cff1b8(%rip)        # ffffffff86702e19 <__TMC_END__+0xffffffff860ffdb1>
  401fd1:	06                   	(bad)  
  401fd2:	48 0e                	rex.W (bad) 
  401fd4:	38 83 07 4d 0e 40    	cmp    %al,0x400e4d07(%rbx)
  401fda:	72 0e                	jb     401fea <__GNU_EH_FRAME_HDR+0x4c6>
  401fdc:	38 41 0e             	cmp    %al,0xe(%rcx)
  401fdf:	30 41 0e             	xor    %al,0xe(%rcx)
  401fe2:	28 42 0e             	sub    %al,0xe(%rdx)
  401fe5:	20 42 0e             	and    %al,0xe(%rdx)
  401fe8:	18 42 0e             	sbb    %al,0xe(%rdx)
  401feb:	10 42 0e             	adc    %al,0xe(%rdx)
  401fee:	08 00                	or     %al,(%rax)
  401ff0:	14 00                	adc    $0x0,%al
  401ff2:	00 00                	add    %al,(%rax)
  401ff4:	ac                   	lods   %ds:(%rsi),%al
  401ff5:	03 00                	add    (%rax),%eax
  401ff7:	00 58 f9             	add    %bl,-0x7(%rax)
  401ffa:	ff                   	(bad)  
  401ffb:	ff 02                	incl   (%rdx)
	...

0000000000402008 <__FRAME_END__>:
  402008:	00 00                	add    %al,(%rax)
	...

Disassembly of section .init_array:

0000000000602e10 <__frame_dummy_init_array_entry>:
  602e10:	90                   	nop
  602e11:	06                   	(bad)  
  602e12:	40 00 00             	add    %al,(%rax)
  602e15:	00 00                	add    %al,(%rax)
	...

Disassembly of section .fini_array:

0000000000602e18 <__do_global_dtors_aux_fini_array_entry>:
  602e18:	70 06                	jo     602e20 <__JCR_END__>
  602e1a:	40 00 00             	add    %al,(%rax)
  602e1d:	00 00                	add    %al,(%rax)
	...

Disassembly of section .jcr:

0000000000602e20 <__JCR_END__>:
	...

Disassembly of section .dynamic:

0000000000602e28 <_DYNAMIC>:
  602e28:	01 00                	add    %eax,(%rax)
  602e2a:	00 00                	add    %al,(%rax)
  602e2c:	00 00                	add    %al,(%rax)
  602e2e:	00 00                	add    %al,(%rax)
  602e30:	01 00                	add    %eax,(%rax)
  602e32:	00 00                	add    %al,(%rax)
  602e34:	00 00                	add    %al,(%rax)
  602e36:	00 00                	add    %al,(%rax)
  602e38:	0c 00                	or     $0x0,%al
  602e3a:	00 00                	add    %al,(%rax)
  602e3c:	00 00                	add    %al,(%rax)
  602e3e:	00 00                	add    %al,(%rax)
  602e40:	08 05 40 00 00 00    	or     %al,0x40(%rip)        # 602e86 <_DYNAMIC+0x5e>
  602e46:	00 00                	add    %al,(%rax)
  602e48:	0d 00 00 00 00       	or     $0x0,%eax
  602e4d:	00 00                	add    %al,(%rax)
  602e4f:	00 54 19 40          	add    %dl,0x40(%rcx,%rbx,1)
  602e53:	00 00                	add    %al,(%rax)
  602e55:	00 00                	add    %al,(%rax)
  602e57:	00 19                	add    %bl,(%rcx)
  602e59:	00 00                	add    %al,(%rax)
  602e5b:	00 00                	add    %al,(%rax)
  602e5d:	00 00                	add    %al,(%rax)
  602e5f:	00 10                	add    %dl,(%rax)
  602e61:	2e 60                	cs (bad) 
  602e63:	00 00                	add    %al,(%rax)
  602e65:	00 00                	add    %al,(%rax)
  602e67:	00 1b                	add    %bl,(%rbx)
  602e69:	00 00                	add    %al,(%rax)
  602e6b:	00 00                	add    %al,(%rax)
  602e6d:	00 00                	add    %al,(%rax)
  602e6f:	00 08                	add    %cl,(%rax)
  602e71:	00 00                	add    %al,(%rax)
  602e73:	00 00                	add    %al,(%rax)
  602e75:	00 00                	add    %al,(%rax)
  602e77:	00 1a                	add    %bl,(%rdx)
  602e79:	00 00                	add    %al,(%rax)
  602e7b:	00 00                	add    %al,(%rax)
  602e7d:	00 00                	add    %al,(%rax)
  602e7f:	00 18                	add    %bl,(%rax)
  602e81:	2e 60                	cs (bad) 
  602e83:	00 00                	add    %al,(%rax)
  602e85:	00 00                	add    %al,(%rax)
  602e87:	00 1c 00             	add    %bl,(%rax,%rax,1)
  602e8a:	00 00                	add    %al,(%rax)
  602e8c:	00 00                	add    %al,(%rax)
  602e8e:	00 00                	add    %al,(%rax)
  602e90:	08 00                	or     %al,(%rax)
  602e92:	00 00                	add    %al,(%rax)
  602e94:	00 00                	add    %al,(%rax)
  602e96:	00 00                	add    %al,(%rax)
  602e98:	f5                   	cmc    
  602e99:	fe                   	(bad)  
  602e9a:	ff 6f 00             	ljmp   *0x0(%rdi)
  602e9d:	00 00                	add    %al,(%rax)
  602e9f:	00 98 02 40 00 00    	add    %bl,0x4002(%rax)
  602ea5:	00 00                	add    %al,(%rax)
  602ea7:	00 05 00 00 00 00    	add    %al,0x0(%rip)        # 602ead <_DYNAMIC+0x85>
  602ead:	00 00                	add    %al,(%rax)
  602eaf:	00 90 03 40 00 00    	add    %dl,0x4003(%rax)
  602eb5:	00 00                	add    %al,(%rax)
  602eb7:	00 06                	add    %al,(%rsi)
  602eb9:	00 00                	add    %al,(%rax)
  602ebb:	00 00                	add    %al,(%rax)
  602ebd:	00 00                	add    %al,(%rax)
  602ebf:	00 b8 02 40 00 00    	add    %bh,0x4002(%rax)
  602ec5:	00 00                	add    %al,(%rax)
  602ec7:	00 0a                	add    %cl,(%rdx)
  602ec9:	00 00                	add    %al,(%rax)
  602ecb:	00 00                	add    %al,(%rax)
  602ecd:	00 00                	add    %al,(%rax)
  602ecf:	00 70 00             	add    %dh,0x0(%rax)
  602ed2:	00 00                	add    %al,(%rax)
  602ed4:	00 00                	add    %al,(%rax)
  602ed6:	00 00                	add    %al,(%rax)
  602ed8:	0b 00                	or     (%rax),%eax
  602eda:	00 00                	add    %al,(%rax)
  602edc:	00 00                	add    %al,(%rax)
  602ede:	00 00                	add    %al,(%rax)
  602ee0:	18 00                	sbb    %al,(%rax)
  602ee2:	00 00                	add    %al,(%rax)
  602ee4:	00 00                	add    %al,(%rax)
  602ee6:	00 00                	add    %al,(%rax)
  602ee8:	15 00 00 00 00       	adc    $0x0,%eax
	...
  602ef5:	00 00                	add    %al,(%rax)
  602ef7:	00 03                	add    %al,(%rbx)
	...
  602f01:	30 60 00             	xor    %ah,0x0(%rax)
  602f04:	00 00                	add    %al,(%rax)
  602f06:	00 00                	add    %al,(%rax)
  602f08:	02 00                	add    (%rax),%al
  602f0a:	00 00                	add    %al,(%rax)
  602f0c:	00 00                	add    %al,(%rax)
  602f0e:	00 00                	add    %al,(%rax)
  602f10:	a8 00                	test   $0x0,%al
  602f12:	00 00                	add    %al,(%rax)
  602f14:	00 00                	add    %al,(%rax)
  602f16:	00 00                	add    %al,(%rax)
  602f18:	14 00                	adc    $0x0,%al
  602f1a:	00 00                	add    %al,(%rax)
  602f1c:	00 00                	add    %al,(%rax)
  602f1e:	00 00                	add    %al,(%rax)
  602f20:	07                   	(bad)  
  602f21:	00 00                	add    %al,(%rax)
  602f23:	00 00                	add    %al,(%rax)
  602f25:	00 00                	add    %al,(%rax)
  602f27:	00 17                	add    %dl,(%rdi)
  602f29:	00 00                	add    %al,(%rax)
  602f2b:	00 00                	add    %al,(%rax)
  602f2d:	00 00                	add    %al,(%rax)
  602f2f:	00 60 04             	add    %ah,0x4(%rax)
  602f32:	40 00 00             	add    %al,(%rax)
  602f35:	00 00                	add    %al,(%rax)
  602f37:	00 07                	add    %al,(%rdi)
  602f39:	00 00                	add    %al,(%rax)
  602f3b:	00 00                	add    %al,(%rax)
  602f3d:	00 00                	add    %al,(%rax)
  602f3f:	00 48 04             	add    %cl,0x4(%rax)
  602f42:	40 00 00             	add    %al,(%rax)
  602f45:	00 00                	add    %al,(%rax)
  602f47:	00 08                	add    %cl,(%rax)
  602f49:	00 00                	add    %al,(%rax)
  602f4b:	00 00                	add    %al,(%rax)
  602f4d:	00 00                	add    %al,(%rax)
  602f4f:	00 18                	add    %bl,(%rax)
  602f51:	00 00                	add    %al,(%rax)
  602f53:	00 00                	add    %al,(%rax)
  602f55:	00 00                	add    %al,(%rax)
  602f57:	00 09                	add    %cl,(%rcx)
  602f59:	00 00                	add    %al,(%rax)
  602f5b:	00 00                	add    %al,(%rax)
  602f5d:	00 00                	add    %al,(%rax)
  602f5f:	00 18                	add    %bl,(%rax)
  602f61:	00 00                	add    %al,(%rax)
  602f63:	00 00                	add    %al,(%rax)
  602f65:	00 00                	add    %al,(%rax)
  602f67:	00 fe                	add    %bh,%dh
  602f69:	ff                   	(bad)  
  602f6a:	ff 6f 00             	ljmp   *0x0(%rdi)
  602f6d:	00 00                	add    %al,(%rax)
  602f6f:	00 18                	add    %bl,(%rax)
  602f71:	04 40                	add    $0x40,%al
  602f73:	00 00                	add    %al,(%rax)
  602f75:	00 00                	add    %al,(%rax)
  602f77:	00 ff                	add    %bh,%bh
  602f79:	ff                   	(bad)  
  602f7a:	ff 6f 00             	ljmp   *0x0(%rdi)
  602f7d:	00 00                	add    %al,(%rax)
  602f7f:	00 01                	add    %al,(%rcx)
  602f81:	00 00                	add    %al,(%rax)
  602f83:	00 00                	add    %al,(%rax)
  602f85:	00 00                	add    %al,(%rax)
  602f87:	00 f0                	add    %dh,%al
  602f89:	ff                   	(bad)  
  602f8a:	ff 6f 00             	ljmp   *0x0(%rdi)
  602f8d:	00 00                	add    %al,(%rax)
  602f8f:	00 00                	add    %al,(%rax)
  602f91:	04 40                	add    $0x40,%al
	...

Disassembly of section .got:

0000000000602ff8 <.got>:
	...

Disassembly of section .got.plt:

0000000000603000 <_GLOBAL_OFFSET_TABLE_>:
  603000:	28 2e                	sub    %ch,(%rsi)
  603002:	60                   	(bad)  
	...
  603017:	00 46 05             	add    %al,0x5(%rsi)
  60301a:	40 00 00             	add    %al,(%rax)
  60301d:	00 00                	add    %al,(%rax)
  60301f:	00 56 05             	add    %dl,0x5(%rsi)
  603022:	40 00 00             	add    %al,(%rax)
  603025:	00 00                	add    %al,(%rax)
  603027:	00 66 05             	add    %ah,0x5(%rsi)
  60302a:	40 00 00             	add    %al,(%rax)
  60302d:	00 00                	add    %al,(%rax)
  60302f:	00 76 05             	add    %dh,0x5(%rsi)
  603032:	40 00 00             	add    %al,(%rax)
  603035:	00 00                	add    %al,(%rax)
  603037:	00 86 05 40 00 00    	add    %al,0x4005(%rsi)
  60303d:	00 00                	add    %al,(%rax)
  60303f:	00 96 05 40 00 00    	add    %dl,0x4005(%rsi)
  603045:	00 00                	add    %al,(%rax)
  603047:	00 a6 05 40 00 00    	add    %ah,0x4005(%rsi)
  60304d:	00 00                	add    %al,(%rax)
	...

Disassembly of section .data:

0000000000603050 <__data_start>:
	...

0000000000603058 <__dso_handle>:
	...

0000000000603060 <SystemCoreClock>:
  603060:	00 00                	add    %al,(%rax)
  603062:	40                   	rex
  603063:	01                   	.byte 0x1

Disassembly of section .bss:

0000000000603064 <__bss_start>:
  603064:	00 00                	add    %al,(%rax)
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
   0:	47                   	rex.RXB
   1:	43                   	rex.XB
   2:	43 3a 20             	rex.XB cmp (%r8),%spl
   5:	28 55 62             	sub    %dl,0x62(%rbp)
   8:	75 6e                	jne    78 <_init-0x400490>
   a:	74 75                	je     81 <_init-0x400487>
   c:	20 35 2e 34 2e 30    	and    %dh,0x302e342e(%rip)        # 302e3440 <__TMC_END__+0x2fce03d8>
  12:	2d 36 75 62 75       	sub    $0x75627536,%eax
  17:	6e                   	outsb  %ds:(%rsi),(%dx)
  18:	74 75                	je     8f <_init-0x400479>
  1a:	31 7e 31             	xor    %edi,0x31(%rsi)
  1d:	36 2e 30 34 2e       	ss xor %dh,%cs:(%rsi,%rbp,1)
  22:	34 29                	xor    $0x29,%al
  24:	20 35 2e 34 2e 30    	and    %dh,0x302e342e(%rip)        # 302e3458 <__TMC_END__+0x2fce03f0>
  2a:	20 32                	and    %dh,(%rdx)
  2c:	30 31                	xor    %dh,(%rcx)
  2e:	36 30 36             	xor    %dh,%ss:(%rsi)
  31:	30 39                	xor    %bh,(%rcx)
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
   0:	2c 00                	sub    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	02 00                	add    (%rax),%al
   6:	00 00                	add    %al,(%rax)
   8:	00 00                	add    %al,(%rax)
   a:	08 00                	or     %al,(%rax)
   c:	00 00                	add    %al,(%rax)
   e:	00 00                	add    %al,(%rax)
  10:	b6 06                	mov    $0x6,%dh
  12:	40 00 00             	add    %al,(%rax)
  15:	00 00                	add    %al,(%rax)
  17:	00 13                	add    %dl,(%rbx)
  19:	03 00                	add    (%rax),%eax
	...
  2f:	00 2c 00             	add    %ch,(%rax,%rax,1)
  32:	00 00                	add    %al,(%rax)
  34:	02 00                	add    (%rax),%al
  36:	69 02 00 00 08 00    	imul   $0x80000,(%rdx),%eax
  3c:	00 00                	add    %al,(%rax)
  3e:	00 00                	add    %al,(%rax)
  40:	c9                   	leaveq 
  41:	09 40 00             	or     %eax,0x0(%rax)
  44:	00 00                	add    %al,(%rax)
  46:	00 00                	add    %al,(%rax)
  48:	b6 08                	mov    $0x8,%dh
	...
  5e:	00 00                	add    %al,(%rax)
  60:	2c 00                	sub    $0x0,%al
  62:	00 00                	add    %al,(%rax)
  64:	02 00                	add    (%rax),%al
  66:	8e 06                	mov    (%rsi),%es
  68:	00 00                	add    %al,(%rax)
  6a:	08 00                	or     %al,(%rax)
  6c:	00 00                	add    %al,(%rax)
  6e:	00 00                	add    %al,(%rax)
  70:	7f 12                	jg     84 <_init-0x400484>
  72:	40 00 00             	add    %al,(%rax)
  75:	00 00                	add    %al,(%rax)
  77:	00 04 03             	add    %al,(%rbx,%rax,1)
	...
  8e:	00 00                	add    %al,(%rax)
  90:	2c 00                	sub    $0x0,%al
  92:	00 00                	add    %al,(%rax)
  94:	02 00                	add    (%rax),%al
  96:	64 0a 00             	or     %fs:(%rax),%al
  99:	00 08                	add    %cl,(%rax)
  9b:	00 00                	add    %al,(%rax)
  9d:	00 00                	add    %al,(%rax)
  9f:	00 83 15 40 00 00    	add    %al,0x4015(%rbx)
  a5:	00 00                	add    %al,(%rax)
  a7:	00 10                	add    %dl,(%rax)
	...
  bd:	00 00                	add    %al,(%rax)
  bf:	00 2c 00             	add    %ch,(%rax,%rax,1)
  c2:	00 00                	add    %al,(%rax)
  c4:	02 00                	add    (%rax),%al
  c6:	fc                   	cld    
  c7:	0a 00                	or     (%rax),%al
  c9:	00 08                	add    %cl,(%rax)
  cb:	00 00                	add    %al,(%rax)
  cd:	00 00                	add    %al,(%rax)
  cf:	00 93 15 40 00 00    	add    %dl,0x4015(%rbx)
  d5:	00 00                	add    %al,(%rax)
  d7:	00 0e                	add    %cl,(%rsi)
	...
  ed:	00 00                	add    %al,(%rax)
  ef:	00 2c 00             	add    %ch,(%rax,%rax,1)
  f2:	00 00                	add    %al,(%rax)
  f4:	02 00                	add    (%rax),%al
  f6:	cd 0b                	int    $0xb
  f8:	00 00                	add    %al,(%rax)
  fa:	08 00                	or     %al,(%rax)
  fc:	00 00                	add    %al,(%rax)
  fe:	00 00                	add    %al,(%rax)
 100:	a1 15 40 00 00 00 00 	movabs 0x3400000000004015,%eax
 107:	00 34 
 109:	03 00                	add    (%rax),%eax
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
   0:	65 02 00             	add    %gs:(%rax),%al
   3:	00 04 00             	add    %al,(%rax,%rax,1)
   6:	00 00                	add    %al,(%rax)
   8:	00 00                	add    %al,(%rax)
   a:	08 01                	or     %al,(%rcx)
   c:	94                   	xchg   %eax,%esp
   d:	00 00                	add    %al,(%rax)
   f:	00 0c 52             	add    %cl,(%rdx,%rdx,2)
  12:	01 00                	add    %eax,(%rax)
  14:	00 46 00             	add    %al,0x0(%rsi)
  17:	00 00                	add    %al,(%rax)
  19:	b6 06                	mov    $0x6,%dh
  1b:	40 00 00             	add    %al,(%rax)
  1e:	00 00                	add    %al,(%rax)
  20:	00 13                	add    %dl,(%rbx)
  22:	03 00                	add    (%rax),%eax
	...
  2c:	00 02                	add    %al,(%rdx)
  2e:	f7 00 00 00 02 24    	testl  $0x24020000,(%rax)
  34:	38 00                	cmp    %al,(%rax)
  36:	00 00                	add    %al,(%rax)
  38:	03 01                	add    (%rcx),%eax
  3a:	06                   	(bad)  
  3b:	0d 00 00 00 03       	or     $0x3000000,%eax
  40:	02 05 1a 01 00 00    	add    0x11a(%rip),%al        # 160 <_init-0x4003a8>
  46:	02 35 01 00 00 02    	add    0x2000001(%rip),%dh        # 200004d <__TMC_END__+0x19fcfe5>
  4c:	26 51                	es push %rcx
  4e:	00 00                	add    %al,(%rax)
  50:	00 04 04             	add    %al,(%rsp,%rax,1)
  53:	05 69 6e 74 00       	add    $0x746e69,%eax
  58:	03 08                	add    (%rax),%ecx
  5a:	05 0a 01 00 00       	add    $0x10a,%eax
  5f:	02 f6                	add    %dh,%dh
  61:	00 00                	add    %al,(%rax)
  63:	00 02                	add    %al,(%rdx)
  65:	30 6a 00             	xor    %ch,0x0(%rdx)
  68:	00 00                	add    %al,(%rax)
  6a:	03 01                	add    (%rcx),%eax
  6c:	08 0b                	or     %cl,(%rbx)
  6e:	00 00                	add    %al,(%rax)
  70:	00 03                	add    %al,(%rbx)
  72:	02 07                	add    (%rdi),%al
  74:	33 00                	xor    (%rax),%eax
  76:	00 00                	add    %al,(%rax)
  78:	02 34 01             	add    (%rcx,%rax,1),%dh
  7b:	00 00                	add    %al,(%rax)
  7d:	02 33                	add    (%rbx),%dh
  7f:	83 00 00             	addl   $0x0,(%rax)
  82:	00 03                	add    %al,(%rbx)
  84:	04 07                	add    $0x7,%al
  86:	26 00 00             	add    %al,%es:(%rax)
  89:	00 03                	add    %al,(%rbx)
  8b:	08 07                	or     %al,(%rdi)
  8d:	21 00                	and    %eax,(%rax)
  8f:	00 00                	add    %al,(%rax)
  91:	03 08                	add    (%rax),%ecx
  93:	05 05 01 00 00       	add    $0x105,%eax
  98:	05 66 01 00 00       	add    $0x166,%eax
  9d:	01 16                	add    %edx,(%rsi)
  9f:	5f                   	pop    %rdi
  a0:	00 00                	add    %al,(%rax)
  a2:	00 b6 06 40 00 00    	add    %dh,0x4006(%rsi)
  a8:	00 00                	add    %al,(%rax)
  aa:	00 0a                	add    %cl,(%rdx)
  ac:	01 00                	add    %eax,(%rax)
  ae:	00 00                	add    %al,(%rax)
  b0:	00 00                	add    %al,(%rax)
  b2:	00 01                	add    %al,(%rcx)
  b4:	9c                   	pushfq 
  b5:	1c 01                	sbb    $0x1,%al
  b7:	00 00                	add    %al,(%rax)
  b9:	06                   	(bad)  
  ba:	06                   	(bad)  
  bb:	00 00                	add    %al,(%rax)
  bd:	00 01                	add    %al,(%rcx)
  bf:	16                   	(bad)  
  c0:	46 00 00             	rex.RX add %r8b,(%rax)
  c3:	00 02                	add    %al,(%rdx)
  c5:	91                   	xchg   %eax,%ecx
  c6:	5c                   	pop    %rsp
  c7:	07                   	(bad)  
  c8:	70 74                	jo     13e <_init-0x4003ca>
  ca:	72 00                	jb     cc <_init-0x40043c>
  cc:	01 16                	add    %edx,(%rsi)
  ce:	1c 01                	sbb    $0x1,%al
  d0:	00 00                	add    %al,(%rax)
  d2:	02 91 50 06 f1 00    	add    0xf10650(%rcx),%dl
  d8:	00 00                	add    %al,(%rax)
  da:	01 16                	add    %edx,(%rsi)
  dc:	78 00                	js     de <_init-0x40042a>
  de:	00 00                	add    %al,(%rax)
  e0:	02 91 58 08 00 00    	add    0x858(%rcx),%dl
  e6:	00 00                	add    %al,(%rax)
  e8:	01 18                	add    %ebx,(%rax)
  ea:	78 00                	js     ec <_init-0x40041c>
  ec:	00 00                	add    %al,(%rax)
  ee:	02 91 6c 08 6e 01    	add    0x16e086c(%rcx),%dl
  f4:	00 00                	add    %al,(%rax)
  f6:	01 19                	add    %ebx,(%rcx)
  f8:	5f                   	pop    %rdi
  f9:	00 00                	add    %al,(%rax)
  fb:	00 02                	add    %al,(%rdx)
  fd:	91                   	xchg   %eax,%ecx
  fe:	69 08 5f 01 00 00    	imul   $0x15f,(%rax),%ecx
 104:	01 1a                	add    %ebx,(%rdx)
 106:	5f                   	pop    %rdi
 107:	00 00                	add    %al,(%rax)
 109:	00 02                	add    %al,(%rdx)
 10b:	91                   	xchg   %eax,%ecx
 10c:	6a 08                	pushq  $0x8
 10e:	3d 01 00 00 01       	cmp    $0x1000001,%eax
 113:	1b 5f 00             	sbb    0x0(%rdi),%ebx
 116:	00 00                	add    %al,(%rax)
 118:	02 91 6b 00 09 08    	add    0x809006b(%rcx),%dl
 11e:	5f                   	pop    %rdi
 11f:	00 00                	add    %al,(%rax)
 121:	00 05 19 00 00 00    	add    %al,0x19(%rip)        # 140 <_init-0x4003c8>
 127:	01 4e 46             	add    %ecx,0x46(%rsi)
 12a:	00 00                	add    %al,(%rax)
 12c:	00 c0                	add    %al,%al
 12e:	07                   	(bad)  
 12f:	40 00 00             	add    %al,(%rax)
 132:	00 00                	add    %al,(%rax)
 134:	00 ef                	add    %ch,%bh
 136:	00 00                	add    %al,(%rax)
 138:	00 00                	add    %al,(%rax)
 13a:	00 00                	add    %al,(%rax)
 13c:	00 01                	add    %al,(%rcx)
 13e:	9c                   	pushfq 
 13f:	ba 01 00 00 07       	mov    $0x7000001,%edx
 144:	70 74                	jo     1ba <_init-0x40034e>
 146:	72 00                	jb     148 <_init-0x4003c0>
 148:	01 4e 1c             	add    %ecx,0x1c(%rsi)
 14b:	01 00                	add    %eax,(%rax)
 14d:	00 02                	add    %al,(%rdx)
 14f:	91                   	xchg   %eax,%ecx
 150:	58                   	pop    %rax
 151:	06                   	(bad)  
 152:	13 01                	adc    (%rcx),%eax
 154:	00 00                	add    %al,(%rax)
 156:	01 4e 5f             	add    %ecx,0x5f(%rsi)
 159:	00 00                	add    %al,(%rax)
 15b:	00 02                	add    %al,(%rdx)
 15d:	91                   	xchg   %eax,%ecx
 15e:	54                   	push   %rsp
 15f:	06                   	(bad)  
 160:	f1                   	icebp  
 161:	00 00                	add    %al,(%rax)
 163:	00 01                	add    %al,(%rcx)
 165:	4e 78 00             	rex.WRX js 168 <_init-0x4003a0>
 168:	00 00                	add    %al,(%rax)
 16a:	02 91 50 0a 69 00    	add    0x690a50(%rcx),%dl
 170:	01 50 5f             	add    %edx,0x5f(%rax)
 173:	00 00                	add    %al,(%rax)
 175:	00 02                	add    %al,(%rdx)
 177:	91                   	xchg   %eax,%ecx
 178:	64 0a 6a 00          	or     %fs:0x0(%rdx),%ch
 17c:	01 50 5f             	add    %edx,0x5f(%rax)
 17f:	00 00                	add    %al,(%rax)
 181:	00 02                	add    %al,(%rdx)
 183:	91                   	xchg   %eax,%ecx
 184:	65 0a 6e 00          	or     %gs:0x0(%rsi),%ch
 188:	01 50 5f             	add    %edx,0x5f(%rax)
 18b:	00 00                	add    %al,(%rax)
 18d:	00 02                	add    %al,(%rdx)
 18f:	91                   	xchg   %eax,%ecx
 190:	66 08 3d 01 00 00 01 	data16 or %bh,0x1000001(%rip)        # 1000198 <__TMC_END__+0x9fd130>
 197:	51                   	push   %rcx
 198:	5f                   	pop    %rdi
 199:	00 00                	add    %al,(%rax)
 19b:	00 02                	add    %al,(%rdx)
 19d:	91                   	xchg   %eax,%ecx
 19e:	67 0a 62 00          	or     0x0(%edx),%ah
 1a2:	01 52 78             	add    %edx,0x78(%rdx)
 1a5:	00 00                	add    %al,(%rax)
 1a7:	00 02                	add    %al,(%rdx)
 1a9:	91                   	xchg   %eax,%ecx
 1aa:	68 08 fe 00 00       	pushq  $0xfe08
 1af:	00 01                	add    %al,(%rcx)
 1b1:	53                   	push   %rbx
 1b2:	46 00 00             	rex.RX add %r8b,(%rax)
 1b5:	00 02                	add    %al,(%rdx)
 1b7:	91                   	xchg   %eax,%ecx
 1b8:	6c                   	insb   (%dx),%es:(%rdi)
 1b9:	00 05 24 01 00 00    	add    %al,0x124(%rip)        # 2e3 <_init-0x400225>
 1bf:	01 7b 2d             	add    %edi,0x2d(%rbx)
 1c2:	00 00                	add    %al,(%rax)
 1c4:	00 af 08 40 00 00    	add    %ch,0x4008(%rdi)
 1ca:	00 00                	add    %al,(%rax)
 1cc:	00 8d 00 00 00 00    	add    %cl,0x0(%rbp)
 1d2:	00 00                	add    %al,(%rax)
 1d4:	00 01                	add    %al,(%rcx)
 1d6:	9c                   	pushfq 
 1d7:	10 02                	adc    %al,(%rdx)
 1d9:	00 00                	add    %al,(%rax)
 1db:	06                   	(bad)  
 1dc:	06                   	(bad)  
 1dd:	00 00                	add    %al,(%rax)
 1df:	00 01                	add    %al,(%rcx)
 1e1:	7b 10                	jnp    1f3 <_init-0x400315>
 1e3:	02 00                	add    (%rax),%al
 1e5:	00 02                	add    %al,(%rdx)
 1e7:	91                   	xchg   %eax,%ecx
 1e8:	58                   	pop    %rax
 1e9:	06                   	(bad)  
 1ea:	5f                   	pop    %rdi
 1eb:	01 00                	add    %eax,(%rax)
 1ed:	00 01                	add    %al,(%rcx)
 1ef:	7b 78                	jnp    269 <_init-0x40029f>
 1f1:	00 00                	add    %al,(%rax)
 1f3:	00 02                	add    %al,(%rdx)
 1f5:	91                   	xchg   %eax,%ecx
 1f6:	54                   	push   %rsp
 1f7:	0a 69 00             	or     0x0(%rcx),%ch
 1fa:	01 7d 2d             	add    %edi,0x2d(%rbp)
 1fd:	00 00                	add    %al,(%rax)
 1ff:	00 02                	add    %al,(%rdx)
 201:	91                   	xchg   %eax,%ecx
 202:	6b 0a 74             	imul   $0x74,(%rdx),%ecx
 205:	00 01                	add    %al,(%rcx)
 207:	7e 78                	jle    281 <_init-0x400287>
 209:	00 00                	add    %al,(%rax)
 20b:	00 02                	add    %al,(%rdx)
 20d:	91                   	xchg   %eax,%ecx
 20e:	6c                   	insb   (%dx),%es:(%rdi)
 20f:	00 09                	add    %cl,(%rcx)
 211:	08 78 00             	or     %bh,0x0(%rax)
 214:	00 00                	add    %al,(%rax)
 216:	0b 42 01             	or     0x1(%rdx),%eax
 219:	00 00                	add    %al,(%rax)
 21b:	01 9c 2d 00 00 00 3c 	add    %ebx,0x3c000000(%rbp,%rbp,1)
 222:	09 40 00             	or     %eax,0x0(%rax)
 225:	00 00                	add    %al,(%rax)
 227:	00 00                	add    %al,(%rax)
 229:	8d 00                	lea    (%rax),%eax
 22b:	00 00                	add    %al,(%rax)
 22d:	00 00                	add    %al,(%rax)
 22f:	00 00                	add    %al,(%rax)
 231:	01 9c 06 06 00 00 00 	add    %ebx,0x6(%rsi,%rax,1)
 238:	01 9c 10 02 00 00 02 	add    %ebx,0x2000002(%rax,%rdx,1)
 23f:	91                   	xchg   %eax,%ecx
 240:	58                   	pop    %rax
 241:	06                   	(bad)  
 242:	5f                   	pop    %rdi
 243:	01 00                	add    %eax,(%rax)
 245:	00 01                	add    %al,(%rcx)
 247:	9c                   	pushfq 
 248:	78 00                	js     24a <_init-0x4002be>
 24a:	00 00                	add    %al,(%rax)
 24c:	02 91 54 0a 69 00    	add    0x690a54(%rcx),%dl
 252:	01 9e 2d 00 00 00    	add    %ebx,0x2d(%rsi)
 258:	02 91 6b 0a 74 00    	add    0x740a6b(%rcx),%dl
 25e:	01 9f 78 00 00 00    	add    %ebx,0x78(%rdi)
 264:	02 91 6c 00 00 21    	add    0x2100006c(%rcx),%dl
 26a:	04 00                	add    $0x0,%al
 26c:	00 04 00             	add    %al,(%rax,%rax,1)
 26f:	b2 00                	mov    $0x0,%dl
 271:	00 00                	add    %al,(%rax)
 273:	08 01                	or     %al,(%rcx)
 275:	94                   	xchg   %eax,%esp
 276:	00 00                	add    %al,(%rax)
 278:	00 0c 8b             	add    %cl,(%rbx,%rcx,4)
 27b:	01 00                	add    %eax,(%rax)
 27d:	00 46 00             	add    %al,0x0(%rsi)
 280:	00 00                	add    %al,(%rax)
 282:	c9                   	leaveq 
 283:	09 40 00             	or     %eax,0x0(%rax)
 286:	00 00                	add    %al,(%rax)
 288:	00 00                	add    %al,(%rax)
 28a:	b6 08                	mov    $0x8,%dh
 28c:	00 00                	add    %al,(%rax)
 28e:	00 00                	add    %al,(%rax)
 290:	00 00                	add    %al,(%rax)
 292:	ec                   	in     (%dx),%al
 293:	00 00                	add    %al,(%rax)
 295:	00 02                	add    %al,(%rdx)
 297:	08 07                	or     %al,(%rdi)
 299:	21 00                	and    %eax,(%rax)
 29b:	00 00                	add    %al,(%rax)
 29d:	02 01                	add    (%rcx),%al
 29f:	08 0b                	or     %cl,(%rbx)
 2a1:	00 00                	add    %al,(%rax)
 2a3:	00 02                	add    %al,(%rdx)
 2a5:	02 07                	add    (%rdi),%al
 2a7:	33 00                	xor    (%rax),%eax
 2a9:	00 00                	add    %al,(%rax)
 2ab:	02 04 07             	add    (%rdi,%rax,1),%al
 2ae:	26 00 00             	add    %al,%es:(%rax)
 2b1:	00 02                	add    %al,(%rdx)
 2b3:	01 06                	add    %eax,(%rsi)
 2b5:	0d 00 00 00 02       	or     $0x2000000,%eax
 2ba:	02 05 1a 01 00 00    	add    0x11a(%rip),%al        # 3da <_init-0x40012e>
 2c0:	03 04 05 69 6e 74 00 	add    0x746e69(,%rax,1),%eax
 2c7:	02 08                	add    (%rax),%cl
 2c9:	05 0a 01 00 00       	add    $0x10a,%eax
 2ce:	02 08                	add    (%rax),%cl
 2d0:	07                   	(bad)  
 2d1:	b9 01 00 00 02       	mov    $0x2000001,%ecx
 2d6:	01 06                	add    %eax,(%rsi)
 2d8:	14 00                	adc    $0x0,%al
 2da:	00 00                	add    %al,(%rax)
 2dc:	04 f7                	add    $0xf7,%al
 2de:	00 00                	add    %al,(%rax)
 2e0:	00 02                	add    %al,(%rdx)
 2e2:	24 49                	and    $0x49,%al
 2e4:	00 00                	add    %al,(%rax)
 2e6:	00 04 35 01 00 00 02 	add    %al,0x2000001(,%rsi,1)
 2ed:	26 57                	es push %rdi
 2ef:	00 00                	add    %al,(%rax)
 2f1:	00 04 f6             	add    %al,(%rsi,%rsi,8)
 2f4:	00 00                	add    %al,(%rax)
 2f6:	00 02                	add    %al,(%rdx)
 2f8:	30 34 00             	xor    %dh,(%rax,%rax,1)
 2fb:	00 00                	add    %al,(%rax)
 2fd:	04 34                	add    $0x34,%al
 2ff:	01 00                	add    %eax,(%rax)
 301:	00 02                	add    %al,(%rdx)
 303:	33 42 00             	xor    0x0(%rdx),%eax
 306:	00 00                	add    %al,(%rax)
 308:	02 08                	add    (%rax),%cl
 30a:	05 05 01 00 00       	add    $0x105,%eax
 30f:	05 04 02 00 00       	add    $0x204,%eax
 314:	01 1c 73             	add    %ebx,(%rbx,%rsi,2)
 317:	00 00                	add    %al,(%rax)
 319:	00 c9                	add    %cl,%cl
 31b:	09 40 00             	or     %eax,0x0(%rax)
 31e:	00 00                	add    %al,(%rax)
 320:	00 00                	add    %al,(%rax)
 322:	8f 00                	popq   (%rax)
 324:	00 00                	add    %al,(%rax)
 326:	00 00                	add    %al,(%rax)
 328:	00 00                	add    %al,(%rax)
 32a:	01 9c 00 01 00 00 06 	add    %ebx,0x6000001(%rax,%rax,1)
 331:	70 74                	jo     3a7 <_init-0x400161>
 333:	72 00                	jb     335 <_init-0x4001d3>
 335:	01 1d 00 01 00 00    	add    %ebx,0x100(%rip)        # 43b <_init-0x4000cd>
 33b:	02 91 68 06 6e 75    	add    0x756e0668(%rcx),%dl
 341:	6d                   	insl   (%dx),%es:(%rdi)
 342:	00 01                	add    %al,(%rcx)
 344:	1e                   	(bad)  
 345:	7e 00                	jle    347 <_init-0x4001c1>
 347:	00 00                	add    %al,(%rax)
 349:	02 91 5c 07 13 01    	add    0x113075c(%rcx),%dl
 34f:	00 00                	add    %al,(%rax)
 351:	01 1f                	add    %ebx,(%rdi)
 353:	94                   	xchg   %eax,%esp
 354:	00 00                	add    %al,(%rax)
 356:	00 02                	add    %al,(%rdx)
 358:	91                   	xchg   %eax,%ecx
 359:	60                   	(bad)  
 35a:	07                   	(bad)  
 35b:	79 01                	jns    35e <_init-0x4001aa>
 35d:	00 00                	add    %al,(%rax)
 35f:	01 20                	add    %esp,(%rax)
 361:	7e 00                	jle    363 <_init-0x4001a5>
 363:	00 00                	add    %al,(%rax)
 365:	02 91 64 00 08 08    	add    0x8080064(%rcx),%dl
 36b:	89 00                	mov    %eax,(%rax)
 36d:	00 00                	add    %al,(%rax)
 36f:	05 0f 02 00 00       	add    $0x20f,%eax
 374:	01 39                	add    %edi,(%rcx)
 376:	73 00                	jae    378 <_init-0x400190>
 378:	00 00                	add    %al,(%rax)
 37a:	58                   	pop    %rax
 37b:	0a 40 00             	or     0x0(%rax),%al
 37e:	00 00                	add    %al,(%rax)
 380:	00 00                	add    %al,(%rax)
 382:	8f 00                	popq   (%rax)
 384:	00 00                	add    %al,(%rax)
 386:	00 00                	add    %al,(%rax)
 388:	00 00                	add    %al,(%rax)
 38a:	01 9c 60 01 00 00 06 	add    %ebx,0x6000001(%rax,%riz,2)
 391:	70 74                	jo     407 <_init-0x400101>
 393:	72 00                	jb     395 <_init-0x400173>
 395:	01 3a                	add    %edi,(%rdx)
 397:	00 01                	add    %al,(%rcx)
 399:	00 00                	add    %al,(%rax)
 39b:	02 91 68 06 6e 75    	add    0x756e0668(%rcx),%dl
 3a1:	6d                   	insl   (%dx),%es:(%rdi)
 3a2:	00 01                	add    %al,(%rcx)
 3a4:	3b 7e 00             	cmp    0x0(%rsi),%edi
 3a7:	00 00                	add    %al,(%rax)
 3a9:	02 91 5c 07 13 01    	add    0x113075c(%rcx),%dl
 3af:	00 00                	add    %al,(%rax)
 3b1:	01 3c 94             	add    %edi,(%rsp,%rdx,4)
 3b4:	00 00                	add    %al,(%rax)
 3b6:	00 02                	add    %al,(%rdx)
 3b8:	91                   	xchg   %eax,%ecx
 3b9:	60                   	(bad)  
 3ba:	07                   	(bad)  
 3bb:	79 01                	jns    3be <_init-0x40014a>
 3bd:	00 00                	add    %al,(%rax)
 3bf:	01 3d 7e 00 00 00    	add    %edi,0x7e(%rip)        # 443 <_init-0x4000c5>
 3c5:	02 91 64 00 05 c2    	add    -0x3dfaff9c(%rcx),%dl
 3cb:	01 00                	add    %eax,(%rax)
 3cd:	00 01                	add    %al,(%rcx)
 3cf:	56                   	push   %rsi
 3d0:	73 00                	jae    3d2 <_init-0x400136>
 3d2:	00 00                	add    %al,(%rax)
 3d4:	e7 0a                	out    %eax,$0xa
 3d6:	40 00 00             	add    %al,(%rax)
 3d9:	00 00                	add    %al,(%rax)
 3db:	00 ed                	add    %ch,%ch
 3dd:	00 00                	add    %al,(%rax)
 3df:	00 00                	add    %al,(%rax)
 3e1:	00 00                	add    %al,(%rax)
 3e3:	00 01                	add    %al,(%rcx)
 3e5:	9c                   	pushfq 
 3e6:	c6 01 00             	movb   $0x0,(%rcx)
 3e9:	00 06                	add    %al,(%rsi)
 3eb:	69 00 01 57 89 00    	imul   $0x895701,(%rax),%eax
 3f1:	00 00                	add    %al,(%rax)
 3f3:	02 91 56 06 72 65    	add    0x65720656(%rcx),%dl
 3f9:	74 00                	je     3fb <_init-0x40010d>
 3fb:	01 58 73             	add    %ebx,0x73(%rax)
 3fe:	00 00                	add    %al,(%rax)
 400:	00 02                	add    %al,(%rdx)
 402:	91                   	xchg   %eax,%ecx
 403:	57                   	push   %rdi
 404:	06                   	(bad)  
 405:	73 65                	jae    46c <_init-0x40009c>
 407:	74 00                	je     409 <_init-0x4000ff>
 409:	01 59 00             	add    %ebx,0x0(%rcx)
 40c:	01 00                	add    %eax,(%rax)
 40e:	00 02                	add    %al,(%rdx)
 410:	91                   	xchg   %eax,%ecx
 411:	58                   	pop    %rax
 412:	07                   	(bad)  
 413:	de 01                	fiadd  (%rcx)
 415:	00 00                	add    %al,(%rax)
 417:	01 5a 00             	add    %ebx,0x0(%rdx)
 41a:	01 00                	add    %eax,(%rax)
 41c:	00 02                	add    %al,(%rdx)
 41e:	91                   	xchg   %eax,%ecx
 41f:	60                   	(bad)  
 420:	07                   	(bad)  
 421:	96                   	xchg   %eax,%esi
 422:	01 00                	add    %eax,(%rax)
 424:	00 01                	add    %al,(%rcx)
 426:	5b                   	pop    %rbx
 427:	00 01                	add    %al,(%rcx)
 429:	00 00                	add    %al,(%rax)
 42b:	02 91 68 00 05 d0    	add    -0x2ffaff98(%rcx),%dl
 431:	01 00                	add    %eax,(%rax)
 433:	00 01                	add    %al,(%rcx)
 435:	7e 73                	jle    4aa <_init-0x40005e>
 437:	00 00                	add    %al,(%rax)
 439:	00 d4                	add    %dl,%ah
 43b:	0b 40 00             	or     0x0(%rax),%eax
 43e:	00 00                	add    %al,(%rax)
 440:	00 00                	add    %al,(%rax)
 442:	ed                   	in     (%dx),%eax
 443:	00 00                	add    %al,(%rax)
 445:	00 00                	add    %al,(%rax)
 447:	00 00                	add    %al,(%rax)
 449:	00 01                	add    %al,(%rcx)
 44b:	9c                   	pushfq 
 44c:	2c 02                	sub    $0x2,%al
 44e:	00 00                	add    %al,(%rax)
 450:	06                   	(bad)  
 451:	69 00 01 7f 89 00    	imul   $0x897f01,(%rax),%eax
 457:	00 00                	add    %al,(%rax)
 459:	02 91 56 06 72 65    	add    0x65720656(%rcx),%dl
 45f:	74 00                	je     461 <_init-0x4000a7>
 461:	01 80 73 00 00 00    	add    %eax,0x73(%rax)
 467:	02 91 57 06 73 65    	add    0x65730657(%rcx),%dl
 46d:	74 00                	je     46f <_init-0x400099>
 46f:	01 81 00 01 00 00    	add    %eax,0x100(%rcx)
 475:	02 91 58 07 de 01    	add    0x1de0758(%rcx),%dl
 47b:	00 00                	add    %al,(%rax)
 47d:	01 82 00 01 00 00    	add    %eax,0x100(%rdx)
 483:	02 91 60 07 96 01    	add    0x1960760(%rcx),%dl
 489:	00 00                	add    %al,(%rax)
 48b:	01 83 00 01 00 00    	add    %eax,0x100(%rbx)
 491:	02 91 68 00 05 f6    	add    -0x9faff98(%rcx),%dl
 497:	01 00                	add    %eax,(%rax)
 499:	00 01                	add    %al,(%rcx)
 49b:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
 49c:	73 00                	jae    49e <_init-0x40006a>
 49e:	00 00                	add    %al,(%rax)
 4a0:	c1 0c 40 00          	rorl   $0x0,(%rax,%rax,2)
 4a4:	00 00                	add    %al,(%rax)
 4a6:	00 00                	add    %al,(%rax)
 4a8:	f2 00 00             	repnz add %al,(%rax)
 4ab:	00 00                	add    %al,(%rax)
 4ad:	00 00                	add    %al,(%rax)
 4af:	00 01                	add    %al,(%rcx)
 4b1:	9c                   	pushfq 
 4b2:	92                   	xchg   %eax,%edx
 4b3:	02 00                	add    (%rax),%al
 4b5:	00 06                	add    %al,(%rsi)
 4b7:	69 00 01 a5 89 00    	imul   $0x89a501,(%rax),%eax
 4bd:	00 00                	add    %al,(%rax)
 4bf:	02 91 56 06 72 65    	add    0x65720656(%rcx),%dl
 4c5:	74 00                	je     4c7 <_init-0x400041>
 4c7:	01 a6 73 00 00 00    	add    %esp,0x73(%rsi)
 4cd:	02 91 57 06 73 65    	add    0x65730657(%rcx),%dl
 4d3:	74 00                	je     4d5 <_init-0x400033>
 4d5:	01 a7 00 01 00 00    	add    %esp,0x100(%rdi)
 4db:	02 91 58 07 de 01    	add    0x1de0758(%rcx),%dl
 4e1:	00 00                	add    %al,(%rax)
 4e3:	01 a8 00 01 00 00    	add    %ebp,0x100(%rax)
 4e9:	02 91 60 07 96 01    	add    0x1960760(%rcx),%dl
 4ef:	00 00                	add    %al,(%rax)
 4f1:	01 a9 00 01 00 00    	add    %ebp,0x100(%rcx)
 4f7:	02 91 68 00 05 7f    	add    0x7f050068(%rcx),%dl
 4fd:	01 00                	add    %eax,(%rax)
 4ff:	00 01                	add    %al,(%rcx)
 501:	cd 73                	int    $0x73
 503:	00 00                	add    %al,(%rax)
 505:	00 b3 0d 40 00 00    	add    %dh,0x400d(%rbx)
 50b:	00 00                	add    %al,(%rax)
 50d:	00 ed                	add    %ch,%ch
 50f:	00 00                	add    %al,(%rax)
 511:	00 00                	add    %al,(%rax)
 513:	00 00                	add    %al,(%rax)
 515:	00 01                	add    %al,(%rcx)
 517:	9c                   	pushfq 
 518:	f8                   	clc    
 519:	02 00                	add    (%rax),%al
 51b:	00 06                	add    %al,(%rsi)
 51d:	69 00 01 ce 89 00    	imul   $0x89ce01,(%rax),%eax
 523:	00 00                	add    %al,(%rax)
 525:	02 91 56 06 72 65    	add    0x65720656(%rcx),%dl
 52b:	74 00                	je     52d <_init-0x3fffdb>
 52d:	01 cf                	add    %ecx,%edi
 52f:	73 00                	jae    531 <_init-0x3fffd7>
 531:	00 00                	add    %al,(%rax)
 533:	02 91 57 06 73 65    	add    0x65730657(%rcx),%dl
 539:	74 00                	je     53b <_init-0x3fffcd>
 53b:	01 d0                	add    %edx,%eax
 53d:	00 01                	add    %al,(%rcx)
 53f:	00 00                	add    %al,(%rax)
 541:	02 91 58 07 de 01    	add    0x1de0758(%rcx),%dl
 547:	00 00                	add    %al,(%rax)
 549:	01 d1                	add    %edx,%ecx
 54b:	00 01                	add    %al,(%rcx)
 54d:	00 00                	add    %al,(%rax)
 54f:	02 91 60 07 96 01    	add    0x1960760(%rcx),%dl
 555:	00 00                	add    %al,(%rax)
 557:	01 d2                	add    %edx,%edx
 559:	00 01                	add    %al,(%rcx)
 55b:	00 00                	add    %al,(%rax)
 55d:	02 91 68 00 05 ea    	add    -0x15faff98(%rcx),%dl
 563:	01 00                	add    %eax,(%rax)
 565:	00 01                	add    %al,(%rcx)
 567:	f3 73 00             	repz jae 56a <_init-0x3fff9e>
 56a:	00 00                	add    %al,(%rax)
 56c:	a0 0e 40 00 00 00 00 	movabs 0x240000000000400e,%al
 573:	00 24 
 575:	01 00                	add    %eax,(%rax)
 577:	00 00                	add    %al,(%rax)
 579:	00 00                	add    %al,(%rax)
 57b:	00 01                	add    %al,(%rcx)
 57d:	9c                   	pushfq 
 57e:	5e                   	pop    %rsi
 57f:	03 00                	add    (%rax),%eax
 581:	00 06                	add    %al,(%rsi)
 583:	69 00 01 f5 89 00    	imul   $0x89f501,(%rax),%eax
 589:	00 00                	add    %al,(%rax)
 58b:	02 91 56 06 72 65    	add    0x65720656(%rcx),%dl
 591:	74 00                	je     593 <_init-0x3fff75>
 593:	01 f6                	add    %esi,%esi
 595:	89 00                	mov    %eax,(%rax)
 597:	00 00                	add    %al,(%rax)
 599:	02 91 57 06 73 65    	add    0x65730657(%rcx),%dl
 59f:	74 00                	je     5a1 <_init-0x3fff67>
 5a1:	01 f7                	add    %esi,%edi
 5a3:	00 01                	add    %al,(%rcx)
 5a5:	00 00                	add    %al,(%rax)
 5a7:	02 91 58 07 de 01    	add    0x1de0758(%rcx),%dl
 5ad:	00 00                	add    %al,(%rax)
 5af:	01 f8                	add    %edi,%eax
 5b1:	00 01                	add    %al,(%rcx)
 5b3:	00 00                	add    %al,(%rax)
 5b5:	02 91 60 07 96 01    	add    0x1960760(%rcx),%dl
 5bb:	00 00                	add    %al,(%rax)
 5bd:	01 f9                	add    %edi,%ecx
 5bf:	00 01                	add    %al,(%rcx)
 5c1:	00 00                	add    %al,(%rax)
 5c3:	02 91 68 00 09 a3    	add    -0x5cf6ff98(%rcx),%dl
 5c9:	01 00                	add    %eax,(%rax)
 5cb:	00 01                	add    %al,(%rcx)
 5cd:	21 01                	and    %eax,(%rcx)
 5cf:	73 00                	jae    5d1 <_init-0x3fff37>
 5d1:	00 00                	add    %al,(%rax)
 5d3:	c4                   	(bad)  
 5d4:	0f 40 00             	cmovo  (%rax),%eax
 5d7:	00 00                	add    %al,(%rax)
 5d9:	00 00                	add    %al,(%rax)
 5db:	7b 01                	jnp    5de <_init-0x3fff2a>
 5dd:	00 00                	add    %al,(%rax)
 5df:	00 00                	add    %al,(%rax)
 5e1:	00 00                	add    %al,(%rax)
 5e3:	01 9c be 03 00 00 0a 	add    %ebx,0xa000003(%rsi,%rdi,4)
 5ea:	69 00 01 23 01 89    	imul   $0x89012301,(%rax),%eax
 5f0:	00 00                	add    %al,(%rax)
 5f2:	00 03                	add    %al,(%rbx)
 5f4:	91                   	xchg   %eax,%ecx
 5f5:	b6 7f                	mov    $0x7f,%dh
 5f7:	0a 72 65             	or     0x65(%rdx),%dh
 5fa:	74 00                	je     5fc <_init-0x3fff0c>
 5fc:	01 24 01             	add    %esp,(%rcx,%rax,1)
 5ff:	73 00                	jae    601 <_init-0x3fff07>
 601:	00 00                	add    %al,(%rax)
 603:	03 91 b7 7f 0b 1a    	add    0x1a0b7fb7(%rcx),%edx
 609:	02 00                	add    (%rax),%al
 60b:	00 01                	add    %al,(%rcx)
 60d:	25 01 00 01 00       	and    $0x10001,%eax
 612:	00 03                	add    %al,(%rbx)
 614:	91                   	xchg   %eax,%ecx
 615:	b8 7f 0a 73 65       	mov    $0x65730a7f,%eax
 61a:	74 00                	je     61c <_init-0x3ffeec>
 61c:	01 26                	add    %esp,(%rsi)
 61e:	01 be 03 00 00 02    	add    %edi,0x2000003(%rsi)
 624:	91                   	xchg   %eax,%ecx
 625:	40 00 0c 89          	add    %cl,(%rcx,%rcx,4)
 629:	00 00                	add    %al,(%rax)
 62b:	00 ce                	add    %cl,%dh
 62d:	03 00                	add    (%rax),%eax
 62f:	00 0d 65 00 00 00    	add    %cl,0x65(%rip)        # 69a <_init-0x3ffe6e>
 635:	1f                   	(bad)  
 636:	00 0e                	add    %cl,(%rsi)
 638:	b0 01                	mov    $0x1,%al
 63a:	00 00                	add    %al,(%rax)
 63c:	01 45 01             	add    %eax,0x1(%rbp)
 63f:	3f                   	(bad)  
 640:	11 40 00             	adc    %eax,0x0(%rax)
 643:	00 00                	add    %al,(%rax)
 645:	00 00                	add    %al,(%rax)
 647:	40 01 00             	rex add %eax,(%rax)
 64a:	00 00                	add    %al,(%rax)
 64c:	00 00                	add    %al,(%rax)
 64e:	00 01                	add    %al,(%rcx)
 650:	9c                   	pushfq 
 651:	18 04 00             	sbb    %al,(%rax,%rax,1)
 654:	00 0a                	add    %cl,(%rdx)
 656:	69 00 01 47 01 89    	imul   $0x89014701,(%rax),%eax
 65c:	00 00                	add    %al,(%rax)
 65e:	00 02                	add    %al,(%rdx)
 660:	91                   	xchg   %eax,%ecx
 661:	5e                   	pop    %rsi
 662:	0b e3                	or     %ebx,%esp
 664:	01 00                	add    %eax,(%rax)
 666:	00 01                	add    %al,(%rcx)
 668:	48 01 73 00          	add    %rsi,0x0(%rbx)
 66c:	00 00                	add    %al,(%rax)
 66e:	02 91 5f 0b 9b 01    	add    0x19b0b5f(%rcx),%dl
 674:	00 00                	add    %al,(%rax)
 676:	01 49 01             	add    %ecx,0x1(%rcx)
 679:	18 04 00             	sbb    %al,(%rax,%rax,1)
 67c:	00 02                	add    %al,(%rdx)
 67e:	91                   	xchg   %eax,%ecx
 67f:	60                   	(bad)  
 680:	00 0f                	add    %cl,(%rdi)
 682:	73 00                	jae    684 <_init-0x3ffe84>
 684:	00 00                	add    %al,(%rax)
 686:	0d 65 00 00 00       	or     $0x65,%eax
 68b:	07                   	(bad)  
 68c:	00 00                	add    %al,(%rax)
 68e:	d2 03                	rolb   %cl,(%rbx)
 690:	00 00                	add    %al,(%rax)
 692:	04 00                	add    $0x0,%al
 694:	95                   	xchg   %eax,%ebp
 695:	01 00                	add    %eax,(%rax)
 697:	00 08                	add    %cl,(%rax)
 699:	01 94 00 00 00 0c 8a 	add    %edx,-0x75f40000(%rax,%rax,1)
 6a0:	02 00                	add    (%rax),%al
 6a2:	00 46 00             	add    %al,0x0(%rsi)
 6a5:	00 00                	add    %al,(%rax)
 6a7:	7f 12                	jg     6bb <_init-0x3ffe4d>
 6a9:	40 00 00             	add    %al,(%rax)
 6ac:	00 00                	add    %al,(%rax)
 6ae:	00 04 03             	add    %al,(%rbx,%rax,1)
 6b1:	00 00                	add    %al,(%rax)
 6b3:	00 00                	add    %al,(%rax)
 6b5:	00 00                	add    %al,(%rax)
 6b7:	c7 02 00 00 02 01    	movl   $0x1020000,(%rdx)
 6bd:	06                   	(bad)  
 6be:	0d 00 00 00 02       	or     $0x2000000,%eax
 6c3:	02 05 1a 01 00 00    	add    0x11a(%rip),%al        # 7e3 <_init-0x3ffd25>
 6c9:	03 04 05 69 6e 74 00 	add    0x746e69(,%rax,1),%eax
 6d0:	02 08                	add    (%rax),%cl
 6d2:	05 0a 01 00 00       	add    $0x10a,%eax
 6d7:	04 f6                	add    $0xf6,%al
 6d9:	00 00                	add    %al,(%rax)
 6db:	00 02                	add    %al,(%rdx)
 6dd:	30 54 00 00          	xor    %dl,0x0(%rax,%rax,1)
 6e1:	00 02                	add    %al,(%rdx)
 6e3:	01 08                	add    %ecx,(%rax)
 6e5:	0b 00                	or     (%rax),%eax
 6e7:	00 00                	add    %al,(%rax)
 6e9:	04 fe                	add    $0xfe,%al
 6eb:	02 00                	add    (%rax),%al
 6ed:	00 02                	add    %al,(%rdx)
 6ef:	31 66 00             	xor    %esp,0x0(%rsi)
 6f2:	00 00                	add    %al,(%rax)
 6f4:	02 02                	add    (%rdx),%al
 6f6:	07                   	(bad)  
 6f7:	33 00                	xor    (%rax),%eax
 6f9:	00 00                	add    %al,(%rax)
 6fb:	04 34                	add    $0x34,%al
 6fd:	01 00                	add    %eax,(%rax)
 6ff:	00 02                	add    %al,(%rdx)
 701:	33 78 00             	xor    0x0(%rax),%edi
 704:	00 00                	add    %al,(%rax)
 706:	02 04 07             	add    (%rdi,%rax,1),%al
 709:	26 00 00             	add    %al,%es:(%rax)
 70c:	00 02                	add    %al,(%rdx)
 70e:	08 07                	or     %al,(%rdi)
 710:	21 00                	and    %eax,(%rax)
 712:	00 00                	add    %al,(%rax)
 714:	02 08                	add    (%rax),%cl
 716:	07                   	(bad)  
 717:	b9 01 00 00 05       	mov    $0x5000001,%ecx
 71c:	6d                   	insl   (%dx),%es:(%rdi)
 71d:	00 00                	add    %al,(%rax)
 71f:	00 06                	add    %al,(%rsi)
 721:	8d 00                	lea    (%rax),%eax
 723:	00 00                	add    %al,(%rax)
 725:	07                   	(bad)  
 726:	49 00 00             	rex.WB add %al,(%r8)
 729:	00 a7 00 00 00 08    	add    %ah,0x8000000(%rdi)
 72f:	86 00                	xchg   %al,(%rax)
 731:	00 00                	add    %al,(%rax)
 733:	03 00                	add    (%rax),%eax
 735:	05 49 00 00 00       	add    $0x49,%eax
 73a:	06                   	(bad)  
 73b:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
 73c:	00 00                	add    %al,(%rax)
 73e:	00 09                	add    %cl,(%rcx)
 740:	10 03                	adc    %al,(%rbx)
 742:	b1 0a                	mov    $0xa,%cl
 744:	7f 01                	jg     747 <_init-0x3ffdc1>
 746:	00 00                	add    %al,(%rax)
 748:	0a 43 31             	or     0x31(%rbx),%al
 74b:	00 03                	add    %al,(%rbx)
 74d:	b2 0a                	mov    $0xa,%dl
 74f:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
 750:	00 00                	add    %al,(%rax)
 752:	00 00                	add    %al,(%rax)
 754:	0a 43 32             	or     0x32(%rbx),%al
 757:	00 03                	add    %al,(%rbx)
 759:	b3 0a                	mov    $0xa,%bl
 75b:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
 75c:	00 00                	add    %al,(%rax)
 75e:	00 01                	add    %al,(%rcx)
 760:	0a 43 33             	or     0x33(%rbx),%al
 763:	00 03                	add    %al,(%rbx)
 765:	b4 0a                	mov    $0xa,%ah
 767:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
 768:	00 00                	add    %al,(%rax)
 76a:	00 02                	add    %al,(%rdx)
 76c:	0a 43 34             	or     0x34(%rbx),%al
 76f:	00 03                	add    %al,(%rbx)
 771:	b5 0a                	mov    $0xa,%ch
 773:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
 774:	00 00                	add    %al,(%rax)
 776:	00 03                	add    %al,(%rbx)
 778:	0a 43 35             	or     0x35(%rbx),%al
 77b:	00 03                	add    %al,(%rbx)
 77d:	b6 0a                	mov    $0xa,%dh
 77f:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
 780:	00 00                	add    %al,(%rax)
 782:	00 04 0a             	add    %al,(%rdx,%rcx,1)
 785:	43                   	rex.XB
 786:	36 00 03             	add    %al,%ss:(%rbx)
 789:	b7 0a                	mov    $0xa,%bh
 78b:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
 78c:	00 00                	add    %al,(%rax)
 78e:	00 05 0a 53 00 03    	add    %al,0x300530a(%rip)        # 3005a9e <__TMC_END__+0x2a02a36>
 794:	b8 0a a7 00 00       	mov    $0xa70a,%eax
 799:	00 06                	add    %al,(%rsi)
 79b:	0b 38                	or     (%rax),%edi
 79d:	02 00                	add    (%rax),%al
 79f:	00 03                	add    %al,(%rbx)
 7a1:	b9 0a 7f 01 00       	mov    $0x17f0a,%ecx
 7a6:	00 07                	add    %al,(%rdi)
 7a8:	0a 53 43             	or     0x43(%rbx),%dl
 7ab:	00 03                	add    %al,(%rbx)
 7ad:	ba 0a a7 00 00       	mov    $0xa70a,%edx
 7b2:	00 08                	add    %cl,(%rax)
 7b4:	0b 1f                	or     (%rdi),%ebx
 7b6:	03 00                	add    (%rax),%eax
 7b8:	00 03                	add    %al,(%rbx)
 7ba:	bb 0a 7f 01 00       	mov    $0x17f0a,%ebx
 7bf:	00 09                	add    %cl,(%rcx)
 7c1:	0b b7 02 00 00 03    	or     0x3000002(%rdi),%esi
 7c7:	bc 0a a7 00 00       	mov    $0xa70a,%esp
 7cc:	00 0a                	add    %cl,(%rdx)
 7ce:	0b ef                	or     %edi,%ebp
 7d0:	02 00                	add    (%rax),%al
 7d2:	00 03                	add    %al,(%rbx)
 7d4:	bd 0a a7 00 00       	mov    $0xa70a,%ebp
 7d9:	00 0b                	add    %cl,(%rbx)
 7db:	0a 43 37             	or     0x37(%rbx),%al
 7de:	00 03                	add    %al,(%rbx)
 7e0:	be 0a ac 00 00       	mov    $0xac0a,%esi
 7e5:	00 0c 0a             	add    %cl,(%rdx,%rcx,1)
 7e8:	43 38 00             	rex.XB cmp %al,(%r8)
 7eb:	03 bf 0a a7 00 00    	add    0xa70a(%rdi),%edi
 7f1:	00 0d 0a 43 39 00    	add    %cl,0x39430a(%rip)        # 394b01 <_init-0x6ba07>
 7f7:	03 c0                	add    %eax,%eax
 7f9:	0a ac 00 00 00 0e 0a 	or     0xa0e0000(%rax,%rax,1),%ch
 800:	43 31 30             	rex.XB xor %esi,(%r8)
 803:	00 03                	add    %al,(%rbx)
 805:	c1 0a ac             	rorl   $0xac,(%rdx)
 808:	00 00                	add    %al,(%rax)
 80a:	00 0f                	add    %cl,(%rdi)
 80c:	00 07                	add    %al,(%rdi)
 80e:	49 00 00             	rex.WB add %al,(%r8)
 811:	00 8f 01 00 00 08    	add    %cl,0x8000001(%rdi)
 817:	86 00                	xchg   %al,(%rax)
 819:	00 00                	add    %al,(%rax)
 81b:	00 00                	add    %al,(%rax)
 81d:	0c 43                	or     $0x43,%al
 81f:	02 00                	add    (%rax),%al
 821:	00 03                	add    %al,(%rbx)
 823:	c2 0a b1             	retq   $0xb10a
 826:	00 00                	add    %al,(%rax)
 828:	00 07                	add    %al,(%rdi)
 82a:	49 00 00             	rex.WB add %al,(%r8)
 82d:	00 ab 01 00 00 08    	add    %ch,0x8000001(%rbx)
 833:	86 00                	xchg   %al,(%rax)
 835:	00 00                	add    %al,(%rax)
 837:	07                   	(bad)  
 838:	00 07                	add    %al,(%rdi)
 83a:	49 00 00             	rex.WB add %al,(%r8)
 83d:	00 bb 01 00 00 08    	add    %bh,0x8000001(%rbx)
 843:	86 00                	xchg   %al,(%rax)
 845:	00 00                	add    %al,(%rax)
 847:	9b                   	fwait
 848:	00 0d 08 11 03 6a    	add    %cl,0x6a031108(%rip)        # 6a031956 <__TMC_END__+0x69a2e8ee>
 84e:	14 3d                	adc    $0x3d,%al
 850:	03 00                	add    (%rax),%eax
 852:	00 0b                	add    %cl,(%rbx)
 854:	62 02                	(bad)  
 856:	00 00                	add    %al,(%rax)
 858:	03 6b 14             	add    0x14(%rbx),%ebp
 85b:	8d 00                	lea    (%rax),%eax
 85d:	00 00                	add    %al,(%rax)
 85f:	00 0b                	add    %cl,(%rbx)
 861:	f5                   	cmc    
 862:	02 00                	add    (%rax),%al
 864:	00 03                	add    %al,(%rbx)
 866:	6c                   	insb   (%dx),%es:(%rdi)
 867:	14 8d                	adc    $0x8d,%al
 869:	00 00                	add    %al,(%rax)
 86b:	00 04 0b             	add    %al,(%rbx,%rcx,1)
 86e:	38 02                	cmp    %al,(%rdx)
 870:	00 00                	add    %al,(%rax)
 872:	03 6d 14             	add    0x14(%rbp),%ebp
 875:	3d 03 00 00 08       	cmp    $0x8000003,%eax
 87a:	0e                   	(bad)  
 87b:	68 02 00 00 03       	pushq  $0x3000002
 880:	6e                   	outsb  %ds:(%rsi),(%dx)
 881:	14 8d                	adc    $0x8d,%al
 883:	00 00                	add    %al,(%rax)
 885:	00 04 10             	add    %al,(%rax,%rdx,1)
 888:	0e                   	(bad)  
 889:	1f                   	(bad)  
 88a:	03 00                	add    (%rax),%eax
 88c:	00 03                	add    %al,(%rbx)
 88e:	6f                   	outsl  %ds:(%rsi),(%dx)
 88f:	14 97                	adc    $0x97,%al
 891:	00 00                	add    %al,(%rax)
 893:	00 08                	add    %cl,(%rax)
 895:	10 0e                	adc    %cl,(%rsi)
 897:	1f                   	(bad)  
 898:	02 00                	add    (%rax),%al
 89a:	00 03                	add    %al,(%rbx)
 89c:	70 14                	jo     8b2 <_init-0x3ffc56>
 89e:	8d 00                	lea    (%rax),%eax
 8a0:	00 00                	add    %al,(%rax)
 8a2:	0c 10                	or     $0x10,%al
 8a4:	0e                   	(bad)  
 8a5:	25 02 00 00 03       	and    $0x3000002,%eax
 8aa:	71 14                	jno    8c0 <_init-0x3ffc48>
 8ac:	8d 00                	lea    (%rax),%eax
 8ae:	00 00                	add    %al,(%rax)
 8b0:	10 10                	adc    %dl,(%rax)
 8b2:	0e                   	(bad)  
 8b3:	2a 03                	sub    (%rbx),%al
 8b5:	00 00                	add    %al,(%rax)
 8b7:	03 72 14             	add    0x14(%rdx),%esi
 8ba:	97                   	xchg   %eax,%edi
 8bb:	00 00                	add    %al,(%rax)
 8bd:	00 14 10             	add    %dl,(%rax,%rdx,1)
 8c0:	0e                   	(bad)  
 8c1:	2b 02                	sub    (%rdx),%eax
 8c3:	00 00                	add    %al,(%rax)
 8c5:	03 73 14             	add    0x14(%rbx),%esi
 8c8:	8d 00                	lea    (%rax),%eax
 8ca:	00 00                	add    %al,(%rax)
 8cc:	18 10                	sbb    %dl,(%rax)
 8ce:	0e                   	(bad)  
 8cf:	35 03 00 00 03       	xor    $0x3000003,%eax
 8d4:	74 14                	je     8ea <_init-0x3ffc1e>
 8d6:	9b                   	fwait
 8d7:	01 00                	add    %eax,(%rax)
 8d9:	00 1c 10             	add    %bl,(%rax,%rdx,1)
 8dc:	0e                   	(bad)  
 8dd:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
 8de:	02 00                	add    (%rax),%al
 8e0:	00 03                	add    %al,(%rbx)
 8e2:	75 14                	jne    8f8 <_init-0x3ffc10>
 8e4:	92                   	xchg   %eax,%edx
 8e5:	00 00                	add    %al,(%rax)
 8e7:	00 24 10             	add    %ah,(%rax,%rdx,1)
 8ea:	0e                   	(bad)  
 8eb:	40 03 00             	rex add (%rax),%eax
 8ee:	00 03                	add    %al,(%rbx)
 8f0:	76 14                	jbe    906 <_init-0x3ffc02>
 8f2:	4e 03 00             	rex.WRX add (%rax),%r8
 8f5:	00 28                	add    %ch,(%rax)
 8f7:	10 0e                	adc    %cl,(%rsi)
 8f9:	ab                   	stos   %eax,%es:(%rdi)
 8fa:	02 00                	add    (%rax),%al
 8fc:	00 03                	add    %al,(%rbx)
 8fe:	77 14                	ja     914 <_init-0x3ffbf4>
 900:	8d 00                	lea    (%rax),%eax
 902:	00 00                	add    %al,(%rax)
 904:	34 10                	xor    $0x10,%al
 906:	0e                   	(bad)  
 907:	b1 02                	mov    $0x2,%cl
 909:	00 00                	add    %al,(%rax)
 90b:	03 78 14             	add    0x14(%rax),%edi
 90e:	8d 00                	lea    (%rax),%eax
 910:	00 00                	add    %al,(%rax)
 912:	38 10                	cmp    %dl,(%rax)
 914:	0e                   	(bad)  
 915:	07                   	(bad)  
 916:	03 00                	add    (%rax),%eax
 918:	00 03                	add    %al,(%rbx)
 91a:	79 14                	jns    930 <_init-0x3ffbd8>
 91c:	8d 00                	lea    (%rax),%eax
 91e:	00 00                	add    %al,(%rax)
 920:	3c 10                	cmp    $0x10,%al
 922:	0e                   	(bad)  
 923:	0d 03 00 00 03       	or     $0x3000003,%eax
 928:	7a 14                	jp     93e <_init-0x3ffbca>
 92a:	8d 00                	lea    (%rax),%eax
 92c:	00 00                	add    %al,(%rax)
 92e:	40 10 0e             	adc    %cl,(%rsi)
 931:	56                   	push   %rsi
 932:	03 00                	add    (%rax),%eax
 934:	00 03                	add    %al,(%rbx)
 936:	7b 14                	jnp    94c <_init-0x3ffbbc>
 938:	8d 00                	lea    (%rax),%eax
 93a:	00 00                	add    %al,(%rax)
 93c:	44 10 0e             	adc    %r9b,(%rsi)
 93f:	4b 03 00             	rex.WXB add (%r8),%rax
 942:	00 03                	add    %al,(%rbx)
 944:	7c 14                	jl     95a <_init-0x3ffbae>
 946:	97                   	xchg   %eax,%edi
 947:	00 00                	add    %al,(%rax)
 949:	00 48 10             	add    %cl,0x10(%rax)
 94c:	0e                   	(bad)  
 94d:	51                   	push   %rcx
 94e:	02 00                	add    (%rax),%al
 950:	00 03                	add    %al,(%rbx)
 952:	7d 14                	jge    968 <_init-0x3ffba0>
 954:	8d 00                	lea    (%rax),%eax
 956:	00 00                	add    %al,(%rax)
 958:	4c 10 0e             	rex.WR adc %r9b,(%rsi)
 95b:	57                   	push   %rdi
 95c:	02 00                	add    (%rax),%al
 95e:	00 03                	add    %al,(%rbx)
 960:	7e 14                	jle    976 <_init-0x3ffb92>
 962:	92                   	xchg   %eax,%edx
 963:	00 00                	add    %al,(%rax)
 965:	00 50 10             	add    %dl,0x10(%rax)
 968:	0e                   	(bad)  
 969:	76 02                	jbe    96d <_init-0x3ffb9b>
 96b:	00 00                	add    %al,(%rax)
 96d:	03 7f 14             	add    0x14(%rdi),%edi
 970:	97                   	xchg   %eax,%edi
 971:	00 00                	add    %al,(%rax)
 973:	00 54 10 0e          	add    %dl,0xe(%rax,%rdx,1)
 977:	13 03                	adc    (%rbx),%eax
 979:	00 00                	add    %al,(%rax)
 97b:	03 80 14 92 00 00    	add    0x9214(%rax),%eax
 981:	00 58 10             	add    %bl,0x10(%rax)
 984:	0e                   	(bad)  
 985:	19 03                	sbb    %eax,(%rbx)
 987:	00 00                	add    %al,(%rax)
 989:	03 81 14 92 00 00    	add    0x9214(%rcx),%eax
 98f:	00 5c 10 0e          	add    %bl,0xe(%rax,%rdx,1)
 993:	4c 02 00             	rex.WR add (%rax),%r8b
 996:	00 03                	add    %al,(%rbx)
 998:	82                   	(bad)  
 999:	14 92                	adc    $0x92,%al
 99b:	00 00                	add    %al,(%rax)
 99d:	00 60 10             	add    %ah,0x10(%rax)
 9a0:	0e                   	(bad)  
 9a1:	5e                   	pop    %rsi
 9a2:	03 00                	add    (%rax),%eax
 9a4:	00 03                	add    %al,(%rbx)
 9a6:	83 14 ab 01          	adcl   $0x1,(%rbx,%rbp,4)
 9aa:	00 00                	add    %al,(%rax)
 9ac:	64 10 0e             	adc    %cl,%fs:(%rsi)
 9af:	5d                   	pop    %rbp
 9b0:	02 00                	add    (%rax),%al
 9b2:	00 03                	add    %al,(%rbx)
 9b4:	84 14 8d 00 00 00 00 	test   %dl,0x0(,%rcx,4)
 9bb:	11 0e                	adc    %ecx,(%rsi)
 9bd:	31 02                	xor    %eax,(%rdx)
 9bf:	00 00                	add    %al,(%rax)
 9c1:	03 85 14 8d 00 00    	add    0x8d14(%rbp),%eax
 9c7:	00 04 11             	add    %al,(%rcx,%rdx,1)
 9ca:	00 07                	add    %al,(%rdi)
 9cc:	49 00 00             	rex.WB add %al,(%r8)
 9cf:	00 4e 03             	add    %cl,0x3(%rsi)
 9d2:	00 00                	add    %al,(%rax)
 9d4:	0f 86 00 00 00 fb    	jbe    fffffffffb0009da <__TMC_END__+0xfffffffffa9fd972>
 9da:	0f 00 07             	sldt   (%rdi)
 9dd:	49 00 00             	rex.WB add %al,(%r8)
 9e0:	00 5e 03             	add    %bl,0x3(%rsi)
 9e3:	00 00                	add    %al,(%rax)
 9e5:	08 86 00 00 00 0b    	or     %al,0xb000000(%rsi)
 9eb:	00 0c 81             	add    %cl,(%rcx,%rax,4)
 9ee:	02 00                	add    (%rax),%al
 9f0:	00 03                	add    %al,(%rbx)
 9f2:	86 14 bb             	xchg   %dl,(%rbx,%rdi,4)
 9f5:	01 00                	add    %eax,(%rax)
 9f7:	00 10                	add    %dl,(%rax)
 9f9:	9b                   	fwait
 9fa:	02 00                	add    (%rax),%al
 9fc:	00 01                	add    %al,(%rcx)
 9fe:	72 7f                	jb     a7f <_init-0x3ffa89>
 a00:	12 40 00             	adc    0x0(%rax),%al
 a03:	00 00                	add    %al,(%rax)
 a05:	00 00                	add    %al,(%rax)
 a07:	16                   	(bad)  
 a08:	00 00                	add    %al,(%rax)
 a0a:	00 00                	add    %al,(%rax)
 a0c:	00 00                	add    %al,(%rax)
 a0e:	00 01                	add    %al,(%rcx)
 a10:	9c                   	pushfq 
 a11:	11 cd                	adc    %ecx,%ebp
 a13:	02 00                	add    (%rax),%al
 a15:	00 01                	add    %al,(%rcx)
 a17:	15 01 95 12 40       	adc    $0x40129501,%eax
 a1c:	00 00                	add    %al,(%rax)
 a1e:	00 00                	add    %al,(%rax)
 a20:	00 ee                	add    %ch,%dh
 a22:	02 00                	add    (%rax),%al
 a24:	00 00                	add    %al,(%rax)
 a26:	00 00                	add    %al,(%rax)
 a28:	00 01                	add    %al,(%rcx)
 a2a:	9c                   	pushfq 
 a2b:	c0 03 00             	rolb   $0x0,(%rbx)
 a2e:	00 12                	add    %dl,(%rdx)
 a30:	e3 02                	jrcxz  a34 <_init-0x3ffad4>
 a32:	00 00                	add    %al,(%rax)
 a34:	01 16                	add    %edx,(%rsi)
 a36:	01 6d 00             	add    %ebp,0x0(%rbp)
 a39:	00 00                	add    %al,(%rax)
 a3b:	02 91 6c 12 6e 02    	add    0x26e126c(%rcx),%dl
 a41:	00 00                	add    %al,(%rax)
 a43:	01 17                	add    %edx,(%rdi)
 a45:	01 5b 00             	add    %ebx,0x0(%rbx)
 a48:	00 00                	add    %al,(%rax)
 a4a:	02 91 6a 00 13 bd    	add    -0x42ecff96(%rcx),%dl
 a50:	02 00                	add    (%rax),%al
 a52:	00 01                	add    %al,(%rcx)
 a54:	6c                   	insb   (%dx),%es:(%rdi)
 a55:	6d                   	insl   (%dx),%es:(%rdi)
 a56:	00 00                	add    %al,(%rax)
 a58:	00 09                	add    %cl,(%rcx)
 a5a:	03 60 30             	add    0x30(%rax),%esp
 a5d:	60                   	(bad)  
 a5e:	00 00                	add    %al,(%rax)
 a60:	00 00                	add    %al,(%rax)
 a62:	00 00                	add    %al,(%rax)
 a64:	94                   	xchg   %eax,%esp
 a65:	00 00                	add    %al,(%rax)
 a67:	00 04 00             	add    %al,(%rax,%rax,1)
 a6a:	9b                   	fwait
 a6b:	02 00                	add    (%rax),%al
 a6d:	00 08                	add    %cl,(%rax)
 a6f:	01 94 00 00 00 0c 69 	add    %edx,0x690c0000(%rax,%rax,1)
 a76:	03 00                	add    (%rax),%eax
 a78:	00 46 00             	add    %al,0x0(%rsi)
 a7b:	00 00                	add    %al,(%rax)
 a7d:	83 15 40 00 00 00 00 	adcl   $0x0,0x40(%rip)        # ac4 <_init-0x3ffa44>
 a84:	00 10                	add    %dl,(%rax)
 a86:	00 00                	add    %al,(%rax)
 a88:	00 00                	add    %al,(%rax)
 a8a:	00 00                	add    %al,(%rax)
 a8c:	00 a4 03 00 00 02 01 	add    %ah,0x1020000(%rbx,%rax,1)
 a93:	06                   	(bad)  
 a94:	0d 00 00 00 02       	or     $0x2000000,%eax
 a99:	02 05 1a 01 00 00    	add    0x11a(%rip),%al        # bb9 <_init-0x3ff94f>
 a9f:	03 04 05 69 6e 74 00 	add    0x746e69(,%rax,1),%eax
 aa6:	02 08                	add    (%rax),%cl
 aa8:	05 0a 01 00 00       	add    $0x10a,%eax
 aad:	02 01                	add    (%rcx),%al
 aaf:	08 0b                	or     %cl,(%rbx)
 ab1:	00 00                	add    %al,(%rax)
 ab3:	00 02                	add    %al,(%rdx)
 ab5:	02 07                	add    (%rdi),%al
 ab7:	33 00                	xor    (%rax),%eax
 ab9:	00 00                	add    %al,(%rax)
 abb:	02 04 07             	add    (%rdi,%rax,1),%al
 abe:	26 00 00             	add    %al,%es:(%rax)
 ac1:	00 02                	add    %al,(%rdx)
 ac3:	08 07                	or     %al,(%rdi)
 ac5:	21 00                	and    %eax,(%rax)
 ac7:	00 00                	add    %al,(%rax)
 ac9:	02 08                	add    (%rax),%cl
 acb:	07                   	(bad)  
 acc:	b9 01 00 00 02       	mov    $0x2000001,%ecx
 ad1:	01 06                	add    %eax,(%rsi)
 ad3:	14 00                	adc    $0x0,%al
 ad5:	00 00                	add    %al,(%rax)
 ad7:	02 08                	add    (%rax),%cl
 ad9:	05 05 01 00 00       	add    $0x105,%eax
 ade:	04 70                	add    $0x70,%al
 ae0:	03 00                	add    (%rax),%eax
 ae2:	00 01                	add    %al,(%rcx)
 ae4:	0d 3b 00 00 00       	or     $0x3b,%eax
 ae9:	83 15 40 00 00 00 00 	adcl   $0x0,0x40(%rip)        # b30 <_init-0x3ff9d8>
 af0:	00 10                	add    %dl,(%rax)
 af2:	00 00                	add    %al,(%rax)
 af4:	00 00                	add    %al,(%rax)
 af6:	00 00                	add    %al,(%rax)
 af8:	00 01                	add    %al,(%rcx)
 afa:	9c                   	pushfq 
 afb:	00 cd                	add    %cl,%ch
 afd:	00 00                	add    %al,(%rax)
 aff:	00 04 00             	add    %al,(%rax,%rax,1)
 b02:	dd 02                	fldl   (%rdx)
 b04:	00 00                	add    %al,(%rax)
 b06:	08 01                	or     %al,(%rcx)
 b08:	94                   	xchg   %eax,%esp
 b09:	00 00                	add    %al,(%rax)
 b0b:	00 0c 82             	add    %cl,(%rdx,%rax,4)
 b0e:	03 00                	add    (%rax),%eax
 b10:	00 46 00             	add    %al,0x0(%rsi)
 b13:	00 00                	add    %al,(%rax)
 b15:	93                   	xchg   %eax,%ebx
 b16:	15 40 00 00 00       	adc    $0x40,%eax
 b1b:	00 00                	add    %al,(%rax)
 b1d:	0e                   	(bad)  
 b1e:	00 00                	add    %al,(%rax)
 b20:	00 00                	add    %al,(%rax)
 b22:	00 00                	add    %al,(%rax)
 b24:	00 e1                	add    %ah,%cl
 b26:	03 00                	add    (%rax),%eax
 b28:	00 02                	add    %al,(%rdx)
 b2a:	01 06                	add    %eax,(%rsi)
 b2c:	0d 00 00 00 02       	or     $0x2000000,%eax
 b31:	02 05 1a 01 00 00    	add    0x11a(%rip),%al        # c51 <_init-0x3ff8b7>
 b37:	03 04 05 69 6e 74 00 	add    0x746e69(,%rax,1),%eax
 b3e:	02 08                	add    (%rax),%cl
 b40:	05 0a 01 00 00       	add    $0x10a,%eax
 b45:	04 f6                	add    $0xf6,%al
 b47:	00 00                	add    %al,(%rax)
 b49:	00 02                	add    %al,(%rdx)
 b4b:	30 54 00 00          	xor    %dl,0x0(%rax,%rax,1)
 b4f:	00 02                	add    %al,(%rdx)
 b51:	01 08                	add    %ecx,(%rax)
 b53:	0b 00                	or     (%rax),%eax
 b55:	00 00                	add    %al,(%rax)
 b57:	02 02                	add    (%rdx),%al
 b59:	07                   	(bad)  
 b5a:	33 00                	xor    (%rax),%eax
 b5c:	00 00                	add    %al,(%rax)
 b5e:	04 34                	add    $0x34,%al
 b60:	01 00                	add    %eax,(%rax)
 b62:	00 02                	add    %al,(%rdx)
 b64:	33 6d 00             	xor    0x0(%rbp),%ebp
 b67:	00 00                	add    %al,(%rax)
 b69:	02 04 07             	add    (%rdi,%rax,1),%al
 b6c:	26 00 00             	add    %al,%es:(%rax)
 b6f:	00 02                	add    %al,(%rdx)
 b71:	08 07                	or     %al,(%rdi)
 b73:	21 00                	and    %eax,(%rax)
 b75:	00 00                	add    %al,(%rax)
 b77:	02 08                	add    (%rax),%cl
 b79:	07                   	(bad)  
 b7a:	b9 01 00 00 02       	mov    $0x2000001,%ecx
 b7f:	01 06                	add    %eax,(%rsi)
 b81:	14 00                	adc    $0x0,%al
 b83:	00 00                	add    %al,(%rax)
 b85:	02 08                	add    (%rax),%cl
 b87:	05 05 01 00 00       	add    $0x105,%eax
 b8c:	05 75 03 00 00       	add    $0x375,%eax
 b91:	01 0d 93 15 40 00    	add    %ecx,0x401593(%rip)        # 40212a <__FRAME_END__+0x122>
 b97:	00 00                	add    %al,(%rax)
 b99:	00 00                	add    %al,(%rax)
 b9b:	0e                   	(bad)  
 b9c:	00 00                	add    %al,(%rax)
 b9e:	00 00                	add    %al,(%rax)
 ba0:	00 00                	add    %al,(%rax)
 ba2:	00 01                	add    %al,(%rcx)
 ba4:	9c                   	pushfq 
 ba5:	ca 00 00             	lret   $0x0
 ba8:	00 06                	add    %al,(%rsi)
 baa:	8a 03                	mov    (%rbx),%al
 bac:	00 00                	add    %al,(%rax)
 bae:	01 0d ca 00 00 00    	add    %ecx,0xca(%rip)        # c7e <_init-0x3ff88a>
 bb4:	02 91 68 06 5f 01    	add    0x15f0668(%rcx),%dl
 bba:	00 00                	add    %al,(%rax)
 bbc:	01 0d 62 00 00 00    	add    %ecx,0x62(%rip)        # c24 <_init-0x3ff8e4>
 bc2:	02 91 64 00 07 08    	add    0x8070064(%rcx),%dl
 bc8:	49 00 00             	rex.WB add %al,(%r8)
 bcb:	00 00                	add    %al,(%rax)
 bcd:	13 03                	adc    (%rbx),%eax
 bcf:	00 00                	add    %al,(%rax)
 bd1:	04 00                	add    $0x0,%al
 bd3:	46 03 00             	rex.RX add (%rax),%r8d
 bd6:	00 08                	add    %cl,(%rax)
 bd8:	01 94 00 00 00 0c ff 	add    %edx,-0xf40000(%rax,%rax,1)
 bdf:	03 00                	add    (%rax),%eax
 be1:	00 46 00             	add    %al,0x0(%rsi)
 be4:	00 00                	add    %al,(%rax)
 be6:	a1 15 40 00 00 00 00 	movabs 0x3400000000004015,%eax
 bed:	00 34 
 bef:	03 00                	add    (%rax),%eax
 bf1:	00 00                	add    %al,(%rax)
 bf3:	00 00                	add    %al,(%rax)
 bf5:	00 39                	add    %bh,(%rcx)
 bf7:	04 00                	add    $0x0,%al
 bf9:	00 02                	add    %al,(%rdx)
 bfb:	01 06                	add    %eax,(%rsi)
 bfd:	0d 00 00 00 02       	or     $0x2000000,%eax
 c02:	02 05 1a 01 00 00    	add    0x11a(%rip),%al        # d22 <_init-0x3ff7e6>
 c08:	03 04 05 69 6e 74 00 	add    0x746e69(,%rax,1),%eax
 c0f:	02 08                	add    (%rax),%cl
 c11:	05 0a 01 00 00       	add    $0x10a,%eax
 c16:	04 f6                	add    $0xf6,%al
 c18:	00 00                	add    %al,(%rax)
 c1a:	00 02                	add    %al,(%rdx)
 c1c:	30 54 00 00          	xor    %dl,0x0(%rax,%rax,1)
 c20:	00 02                	add    %al,(%rdx)
 c22:	01 08                	add    %ecx,(%rax)
 c24:	0b 00                	or     (%rax),%eax
 c26:	00 00                	add    %al,(%rax)
 c28:	02 02                	add    (%rdx),%al
 c2a:	07                   	(bad)  
 c2b:	33 00                	xor    (%rax),%eax
 c2d:	00 00                	add    %al,(%rax)
 c2f:	04 34                	add    $0x34,%al
 c31:	01 00                	add    %eax,(%rax)
 c33:	00 02                	add    %al,(%rdx)
 c35:	33 6d 00             	xor    0x0(%rbp),%ebp
 c38:	00 00                	add    %al,(%rax)
 c3a:	02 04 07             	add    (%rdi,%rax,1),%al
 c3d:	26 00 00             	add    %al,%es:(%rax)
 c40:	00 02                	add    %al,(%rdx)
 c42:	08 07                	or     %al,(%rdi)
 c44:	21 00                	and    %eax,(%rax)
 c46:	00 00                	add    %al,(%rax)
 c48:	04 9b                	add    $0x9b,%al
 c4a:	03 00                	add    (%rax),%eax
 c4c:	00 03                	add    %al,(%rbx)
 c4e:	d8 74 00 00          	fdivs  0x0(%rax,%rax,1)
 c52:	00 02                	add    %al,(%rdx)
 c54:	08 07                	or     %al,(%rdi)
 c56:	b9 01 00 00 02       	mov    $0x2000001,%ecx
 c5b:	01 06                	add    %eax,(%rsi)
 c5d:	14 00                	adc    $0x0,%al
 c5f:	00 00                	add    %al,(%rax)
 c61:	02 08                	add    (%rax),%cl
 c63:	05 05 01 00 00       	add    $0x105,%eax
 c68:	02 04 04             	add    (%rsp,%rax,1),%al
 c6b:	b8 03 00 00 02       	mov    $0x2000003,%eax
 c70:	08 04 d8             	or     %al,(%rax,%rbx,8)
 c73:	03 00                	add    (%rax),%eax
 c75:	00 05 08 04 00 00    	add    %al,0x408(%rip)        # 1083 <_init-0x3ff485>
 c7b:	01 11                	add    %edx,(%rcx)
 c7d:	21 01                	and    %eax,(%rcx)
 c7f:	00 00                	add    %al,(%rax)
 c81:	a1 15 40 00 00 00 00 	movabs 0x700000000004015,%eax
 c88:	00 07 
 c8a:	01 00                	add    %eax,(%rax)
 c8c:	00 00                	add    %al,(%rax)
 c8e:	00 00                	add    %al,(%rax)
 c90:	00 01                	add    %al,(%rcx)
 c92:	9c                   	pushfq 
 c93:	21 01                	and    %eax,(%rcx)
 c95:	00 00                	add    %al,(%rax)
 c97:	06                   	(bad)  
 c98:	73 72                	jae    d0c <_init-0x3ff7fc>
 c9a:	63 00                	movslq (%rax),%eax
 c9c:	01 11                	add    %edx,(%rcx)
 c9e:	21 01                	and    %eax,(%rcx)
 ca0:	00 00                	add    %al,(%rax)
 ca2:	02 91 58 06 64 73    	add    0x73640658(%rcx),%dl
 ca8:	74 00                	je     caa <_init-0x3ff85e>
 caa:	01 11                	add    %edx,(%rcx)
 cac:	21 01                	and    %eax,(%rcx)
 cae:	00 00                	add    %al,(%rax)
 cb0:	02 91 50 07 5f 01    	add    0x15f0750(%rcx),%dl
 cb6:	00 00                	add    %al,(%rax)
 cb8:	01 11                	add    %edx,(%rcx)
 cba:	7b 00                	jnp    cbc <_init-0x3ff84c>
 cbc:	00 00                	add    %al,(%rax)
 cbe:	02 91 48 08 69 00    	add    0x690848(%rcx),%dl
 cc4:	01 14 3b             	add    %edx,(%rbx,%rdi,1)
 cc7:	00 00                	add    %al,(%rax)
 cc9:	00 02                	add    %al,(%rdx)
 ccb:	91                   	xchg   %eax,%ecx
 ccc:	6c                   	insb   (%dx),%es:(%rdi)
 ccd:	09 ed                	or     %ebp,%ebp
 ccf:	15 40 00 00 00       	adc    $0x40,%eax
 cd4:	00 00                	add    %al,(%rax)
 cd6:	b5 00                	mov    $0x0,%ch
 cd8:	00 00                	add    %al,(%rax)
 cda:	00 00                	add    %al,(%rax)
 cdc:	00 00                	add    %al,(%rax)
 cde:	0a df                	or     %bh,%bl
 ce0:	03 00                	add    (%rax),%eax
 ce2:	00 01                	add    %al,(%rcx)
 ce4:	1d 27 01 00 00       	sbb    $0x127,%eax
 ce9:	02 91 6b 00 00 0b    	add    0xb00006b(%rcx),%dl
 cef:	08 49 00             	or     %cl,0x0(%rcx)
 cf2:	00 00                	add    %al,(%rax)
 cf4:	02 01                	add    (%rcx),%al
 cf6:	02 a7 03 00 00 05    	add    0x5000003(%rdi),%ah
 cfc:	be 03 00 00 01       	mov    $0x1000003,%esi
 d01:	33 21                	xor    (%rcx),%esp
 d03:	01 00                	add    %eax,(%rax)
 d05:	00 a8 16 40 00 00    	add    %ch,0x4016(%rax)
 d0b:	00 00                	add    %al,(%rax)
 d0d:	00 71 00             	add    %dh,0x0(%rcx)
 d10:	00 00                	add    %al,(%rax)
 d12:	00 00                	add    %al,(%rax)
 d14:	00 00                	add    %al,(%rax)
 d16:	01 9c 86 01 00 00 06 	add    %ebx,0x6000001(%rsi,%rax,4)
 d1d:	73 72                	jae    d91 <_init-0x3ff777>
 d1f:	63 00                	movslq (%rax),%eax
 d21:	01 33                	add    %esi,(%rbx)
 d23:	21 01                	and    %eax,(%rcx)
 d25:	00 00                	add    %al,(%rax)
 d27:	02 91 58 06 64 73    	add    0x73640658(%rcx),%dl
 d2d:	74 00                	je     d2f <_init-0x3ff7d9>
 d2f:	01 33                	add    %esi,(%rbx)
 d31:	21 01                	and    %eax,(%rcx)
 d33:	00 00                	add    %al,(%rax)
 d35:	02 91 50 07 5f 01    	add    0x15f0750(%rcx),%dl
 d3b:	00 00                	add    %al,(%rax)
 d3d:	01 33                	add    %esi,(%rbx)
 d3f:	7b 00                	jnp    d41 <_init-0x3ff7c7>
 d41:	00 00                	add    %al,(%rax)
 d43:	02 91 48 08 69 00    	add    0x690848(%rcx),%dl
 d49:	01 35 49 00 00 00    	add    %esi,0x49(%rip)        # d98 <_init-0x3ff770>
 d4f:	02 91 6f 00 05 f5    	add    -0xafaff91(%rcx),%dl
 d55:	03 00                	add    (%rax),%eax
 d57:	00 01                	add    %al,(%rcx)
 d59:	45 21 01             	and    %r8d,(%r9)
 d5c:	00 00                	add    %al,(%rax)
 d5e:	19 17                	sbb    %edx,(%rdi)
 d60:	40 00 00             	add    %al,(%rax)
 d63:	00 00                	add    %al,(%rax)
 d65:	00 61 00             	add    %ah,0x0(%rcx)
 d68:	00 00                	add    %al,(%rax)
 d6a:	00 00                	add    %al,(%rax)
 d6c:	00 00                	add    %al,(%rax)
 d6e:	01 9c de 01 00 00 06 	add    %ebx,0x6000001(%rsi,%rbx,8)
 d75:	73 72                	jae    de9 <_init-0x3ff71f>
 d77:	63 00                	movslq (%rax),%eax
 d79:	01 45 21             	add    %eax,0x21(%rbp)
 d7c:	01 00                	add    %eax,(%rax)
 d7e:	00 02                	add    %al,(%rdx)
 d80:	91                   	xchg   %eax,%ecx
 d81:	58                   	pop    %rax
 d82:	07                   	(bad)  
 d83:	5f                   	pop    %rdi
 d84:	01 00                	add    %eax,(%rax)
 d86:	00 01                	add    %al,(%rcx)
 d88:	45 7b 00             	rex.RB jnp d8b <_init-0x3ff77d>
 d8b:	00 00                	add    %al,(%rax)
 d8d:	02 91 50 07 79 01    	add    0x1790750(%rcx),%dl
 d93:	00 00                	add    %al,(%rax)
 d95:	01 45 49             	add    %eax,0x49(%rbp)
 d98:	00 00                	add    %al,(%rax)
 d9a:	00 02                	add    %al,(%rdx)
 d9c:	91                   	xchg   %eax,%ecx
 d9d:	4c 08 69 00          	rex.WR or %r13b,0x0(%rcx)
 da1:	01 47 49             	add    %eax,0x49(%rdi)
 da4:	00 00                	add    %al,(%rax)
 da6:	00 02                	add    %al,(%rdx)
 da8:	91                   	xchg   %eax,%ecx
 da9:	6f                   	outsl  %ds:(%rsi),(%dx)
 daa:	00 05 ad 03 00 00    	add    %al,0x3ad(%rip)        # 115d <_init-0x3ff3ab>
 db0:	01 54 21 01          	add    %edx,0x1(%rcx,%riz,1)
 db4:	00 00                	add    %al,(%rax)
 db6:	7a 17                	jp     dcf <_init-0x3ff739>
 db8:	40 00 00             	add    %al,(%rax)
 dbb:	00 00                	add    %al,(%rax)
 dbd:	00 32                	add    %dh,(%rdx)
 dbf:	00 00                	add    %al,(%rax)
 dc1:	00 00                	add    %al,(%rax)
 dc3:	00 00                	add    %al,(%rax)
 dc5:	00 01                	add    %al,(%rcx)
 dc7:	9c                   	pushfq 
 dc8:	1c 02                	sbb    $0x2,%al
 dca:	00 00                	add    %al,(%rax)
 dcc:	06                   	(bad)  
 dcd:	73 72                	jae    e41 <_init-0x3ff6c7>
 dcf:	63 00                	movslq (%rax),%eax
 dd1:	01 54 21 01          	add    %edx,0x1(%rcx,%riz,1)
 dd5:	00 00                	add    %al,(%rax)
 dd7:	02 91 68 07 5f 01    	add    0x15f0768(%rcx),%dl
 ddd:	00 00                	add    %al,(%rax)
 ddf:	01 54 7b 00          	add    %edx,0x0(%rbx,%rdi,2)
 de3:	00 00                	add    %al,(%rax)
 de5:	02 91 60 00 05 cd    	add    -0x32faffa0(%rcx),%dl
 deb:	03 00                	add    (%rax),%eax
 ded:	00 01                	add    %al,(%rcx)
 def:	5a                   	pop    %rdx
 df0:	21 01                	and    %eax,(%rcx)
 df2:	00 00                	add    %al,(%rax)
 df4:	ac                   	lods   %ds:(%rsi),%al
 df5:	17                   	(bad)  
 df6:	40 00 00             	add    %al,(%rax)
 df9:	00 00                	add    %al,(%rax)
 dfb:	00 80 00 00 00 00    	add    %al,0x0(%rax)
 e01:	00 00                	add    %al,(%rax)
 e03:	00 01                	add    %al,(%rcx)
 e05:	9c                   	pushfq 
 e06:	66 02 00             	data16 add (%rax),%al
 e09:	00 06                	add    %al,(%rsi)
 e0b:	73 72                	jae    e7f <_init-0x3ff689>
 e0d:	63 00                	movslq (%rax),%eax
 e0f:	01 5a 21             	add    %ebx,0x21(%rdx)
 e12:	01 00                	add    %eax,(%rax)
 e14:	00 02                	add    %al,(%rdx)
 e16:	91                   	xchg   %eax,%ecx
 e17:	58                   	pop    %rax
 e18:	07                   	(bad)  
 e19:	5f                   	pop    %rdi
 e1a:	01 00                	add    %eax,(%rax)
 e1c:	00 01                	add    %al,(%rcx)
 e1e:	5a                   	pop    %rdx
 e1f:	7b 00                	jnp    e21 <_init-0x3ff6e7>
 e21:	00 00                	add    %al,(%rax)
 e23:	02 91 50 08 69 00    	add    0x690850(%rcx),%dl
 e29:	01 5c 49 00          	add    %ebx,0x0(%rcx,%rcx,2)
 e2d:	00 00                	add    %al,(%rax)
 e2f:	02 91 6f 00 0c a2    	add    -0x5df3ff91(%rcx),%dl
 e35:	03 00                	add    (%rax),%eax
 e37:	00 01                	add    %al,(%rcx)
 e39:	69 2c 18 40 00 00 00 	imul   $0x40,(%rax,%rbx,1),%ebp
 e40:	00 00                	add    %al,(%rax)
 e42:	30 00                	xor    %al,(%rax)
 e44:	00 00                	add    %al,(%rax)
 e46:	00 00                	add    %al,(%rax)
 e48:	00 00                	add    %al,(%rax)
 e4a:	01 9c aa 02 00 00 06 	add    %ebx,0x6000002(%rdx,%rbp,4)
 e51:	61                   	(bad)  
 e52:	00 01                	add    %al,(%rcx)
 e54:	69 21 01 00 00 02    	imul   $0x2000001,(%rcx),%esp
 e5a:	91                   	xchg   %eax,%ecx
 e5b:	58                   	pop    %rax
 e5c:	06                   	(bad)  
 e5d:	62                   	(bad)  
 e5e:	00 01                	add    %al,(%rcx)
 e60:	69 21 01 00 00 02    	imul   $0x2000001,(%rcx),%esp
 e66:	91                   	xchg   %eax,%ecx
 e67:	50                   	push   %rax
 e68:	0a c8                	or     %al,%cl
 e6a:	03 00                	add    (%rax),%eax
 e6c:	00 01                	add    %al,(%rcx)
 e6e:	6b 49 00 00          	imul   $0x0,0x0(%rcx),%ecx
 e72:	00 02                	add    %al,(%rdx)
 e74:	91                   	xchg   %eax,%ecx
 e75:	6f                   	outsl  %ds:(%rsi),(%dx)
 e76:	00 05 e7 03 00 00    	add    %al,0x3e7(%rip)        # 1263 <_init-0x3ff2a5>
 e7c:	01 71 e8             	add    %esi,-0x18(%rcx)
 e7f:	02 00                	add    (%rax),%al
 e81:	00 5c 18 40          	add    %bl,0x40(%rax,%rbx,1)
 e85:	00 00                	add    %al,(%rax)
 e87:	00 00                	add    %al,(%rax)
 e89:	00 43 00             	add    %al,0x0(%rbx)
 e8c:	00 00                	add    %al,(%rax)
 e8e:	00 00                	add    %al,(%rax)
 e90:	00 00                	add    %al,(%rax)
 e92:	01 9c e8 02 00 00 07 	add    %ebx,0x7000002(%rax,%rbp,8)
 e99:	5f                   	pop    %rdi
 e9a:	01 00                	add    %eax,(%rax)
 e9c:	00 01                	add    %al,(%rcx)
 e9e:	71 7b                	jno    f1b <_init-0x3ff5ed>
 ea0:	00 00                	add    %al,(%rax)
 ea2:	00 02                	add    %al,(%rdx)
 ea4:	91                   	xchg   %eax,%ecx
 ea5:	58                   	pop    %rax
 ea6:	08 70 74             	or     %dh,0x74(%rax)
 ea9:	72 00                	jb     eab <_init-0x3ff65d>
 eab:	01 73 e8             	add    %esi,-0x18(%rbx)
 eae:	02 00                	add    (%rax),%al
 eb0:	00 02                	add    %al,(%rdx)
 eb2:	91                   	xchg   %eax,%ecx
 eb3:	68 00 0b 08 62       	pushq  $0x62080b00
 eb8:	00 00                	add    %al,(%rax)
 eba:	00 0d 90 03 00 00    	add    %cl,0x390(%rip)        # 1250 <_init-0x3ff2b8>
 ec0:	01 7d 9f             	add    %edi,-0x61(%rbp)
 ec3:	18 40 00             	sbb    %al,0x0(%rax)
 ec6:	00 00                	add    %al,(%rax)
 ec8:	00 00                	add    %al,(%rax)
 eca:	36 00 00             	add    %al,%ss:(%rax)
 ecd:	00 00                	add    %al,(%rax)
 ecf:	00 00                	add    %al,(%rax)
 ed1:	00 01                	add    %al,(%rcx)
 ed3:	9c                   	pushfq 
 ed4:	06                   	(bad)  
 ed5:	73 72                	jae    f49 <_init-0x3ff5bf>
 ed7:	63 00                	movslq (%rax),%eax
 ed9:	01 7d e8             	add    %edi,-0x18(%rbp)
 edc:	02 00                	add    (%rax),%al
 ede:	00 02                	add    %al,(%rdx)
 ee0:	91                   	xchg   %eax,%ecx
 ee1:	68                   	.byte 0x68
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
   0:	01 11                	add    %edx,(%rcx)
   2:	01 25 0e 13 0b 03    	add    %esp,0x30b130e(%rip)        # 30b1316 <__TMC_END__+0x2aae2ae>
   8:	0e                   	(bad)  
   9:	1b 0e                	sbb    (%rsi),%ecx
   b:	11 01                	adc    %eax,(%rcx)
   d:	12 07                	adc    (%rdi),%al
   f:	10 17                	adc    %dl,(%rdi)
  11:	00 00                	add    %al,(%rax)
  13:	02 16                	add    (%rsi),%dl
  15:	00 03                	add    %al,(%rbx)
  17:	0e                   	(bad)  
  18:	3a 0b                	cmp    (%rbx),%cl
  1a:	3b 0b                	cmp    (%rbx),%ecx
  1c:	49 13 00             	adc    (%r8),%rax
  1f:	00 03                	add    %al,(%rbx)
  21:	24 00                	and    $0x0,%al
  23:	0b 0b                	or     (%rbx),%ecx
  25:	3e 0b 03             	or     %ds:(%rbx),%eax
  28:	0e                   	(bad)  
  29:	00 00                	add    %al,(%rax)
  2b:	04 24                	add    $0x24,%al
  2d:	00 0b                	add    %cl,(%rbx)
  2f:	0b 3e                	or     (%rsi),%edi
  31:	0b 03                	or     (%rbx),%eax
  33:	08 00                	or     %al,(%rax)
  35:	00 05 2e 01 3f 19    	add    %al,0x193f012e(%rip)        # 193f0169 <__TMC_END__+0x18ded101>
  3b:	03 0e                	add    (%rsi),%ecx
  3d:	3a 0b                	cmp    (%rbx),%cl
  3f:	3b 0b                	cmp    (%rbx),%ecx
  41:	27                   	(bad)  
  42:	19 49 13             	sbb    %ecx,0x13(%rcx)
  45:	11 01                	adc    %eax,(%rcx)
  47:	12 07                	adc    (%rdi),%al
  49:	40 18 97 42 19 01 13 	sbb    %dl,0x13011942(%rdi)
  50:	00 00                	add    %al,(%rax)
  52:	06                   	(bad)  
  53:	05 00 03 0e 3a       	add    $0x3a0e0300,%eax
  58:	0b 3b                	or     (%rbx),%edi
  5a:	0b 49 13             	or     0x13(%rcx),%ecx
  5d:	02 18                	add    (%rax),%bl
  5f:	00 00                	add    %al,(%rax)
  61:	07                   	(bad)  
  62:	05 00 03 08 3a       	add    $0x3a080300,%eax
  67:	0b 3b                	or     (%rbx),%edi
  69:	0b 49 13             	or     0x13(%rcx),%ecx
  6c:	02 18                	add    (%rax),%bl
  6e:	00 00                	add    %al,(%rax)
  70:	08 34 00             	or     %dh,(%rax,%rax,1)
  73:	03 0e                	add    (%rsi),%ecx
  75:	3a 0b                	cmp    (%rbx),%cl
  77:	3b 0b                	cmp    (%rbx),%ecx
  79:	49 13 02             	adc    (%r10),%rax
  7c:	18 00                	sbb    %al,(%rax)
  7e:	00 09                	add    %cl,(%rcx)
  80:	0f 00 0b             	str    (%rbx)
  83:	0b 49 13             	or     0x13(%rcx),%ecx
  86:	00 00                	add    %al,(%rax)
  88:	0a 34 00             	or     (%rax,%rax,1),%dh
  8b:	03 08                	add    (%rax),%ecx
  8d:	3a 0b                	cmp    (%rbx),%cl
  8f:	3b 0b                	cmp    (%rbx),%ecx
  91:	49 13 02             	adc    (%r10),%rax
  94:	18 00                	sbb    %al,(%rax)
  96:	00 0b                	add    %cl,(%rbx)
  98:	2e 01 3f             	add    %edi,%cs:(%rdi)
  9b:	19 03                	sbb    %eax,(%rbx)
  9d:	0e                   	(bad)  
  9e:	3a 0b                	cmp    (%rbx),%cl
  a0:	3b 0b                	cmp    (%rbx),%ecx
  a2:	27                   	(bad)  
  a3:	19 49 13             	sbb    %ecx,0x13(%rcx)
  a6:	11 01                	adc    %eax,(%rcx)
  a8:	12 07                	adc    (%rdi),%al
  aa:	40 18 97 42 19 00 00 	sbb    %dl,0x1942(%rdi)
  b1:	00 01                	add    %al,(%rcx)
  b3:	11 01                	adc    %eax,(%rcx)
  b5:	25 0e 13 0b 03       	and    $0x30b130e,%eax
  ba:	0e                   	(bad)  
  bb:	1b 0e                	sbb    (%rsi),%ecx
  bd:	11 01                	adc    %eax,(%rcx)
  bf:	12 07                	adc    (%rdi),%al
  c1:	10 17                	adc    %dl,(%rdi)
  c3:	00 00                	add    %al,(%rax)
  c5:	02 24 00             	add    (%rax,%rax,1),%ah
  c8:	0b 0b                	or     (%rbx),%ecx
  ca:	3e 0b 03             	or     %ds:(%rbx),%eax
  cd:	0e                   	(bad)  
  ce:	00 00                	add    %al,(%rax)
  d0:	03 24 00             	add    (%rax,%rax,1),%esp
  d3:	0b 0b                	or     (%rbx),%ecx
  d5:	3e 0b 03             	or     %ds:(%rbx),%eax
  d8:	08 00                	or     %al,(%rax)
  da:	00 04 16             	add    %al,(%rsi,%rdx,1)
  dd:	00 03                	add    %al,(%rbx)
  df:	0e                   	(bad)  
  e0:	3a 0b                	cmp    (%rbx),%cl
  e2:	3b 0b                	cmp    (%rbx),%ecx
  e4:	49 13 00             	adc    (%r8),%rax
  e7:	00 05 2e 01 3f 19    	add    %al,0x193f012e(%rip)        # 193f021b <__TMC_END__+0x18ded1b3>
  ed:	03 0e                	add    (%rsi),%ecx
  ef:	3a 0b                	cmp    (%rbx),%cl
  f1:	3b 0b                	cmp    (%rbx),%ecx
  f3:	49 13 11             	adc    (%r9),%rdx
  f6:	01 12                	add    %edx,(%rdx)
  f8:	07                   	(bad)  
  f9:	40 18 96 42 19 01 13 	sbb    %dl,0x13011942(%rsi)
 100:	00 00                	add    %al,(%rax)
 102:	06                   	(bad)  
 103:	34 00                	xor    $0x0,%al
 105:	03 08                	add    (%rax),%ecx
 107:	3a 0b                	cmp    (%rbx),%cl
 109:	3b 0b                	cmp    (%rbx),%ecx
 10b:	49 13 02             	adc    (%r10),%rax
 10e:	18 00                	sbb    %al,(%rax)
 110:	00 07                	add    %al,(%rdi)
 112:	34 00                	xor    $0x0,%al
 114:	03 0e                	add    (%rsi),%ecx
 116:	3a 0b                	cmp    (%rbx),%cl
 118:	3b 0b                	cmp    (%rbx),%ecx
 11a:	49 13 02             	adc    (%r10),%rax
 11d:	18 00                	sbb    %al,(%rax)
 11f:	00 08                	add    %cl,(%rax)
 121:	0f 00 0b             	str    (%rbx)
 124:	0b 49 13             	or     0x13(%rcx),%ecx
 127:	00 00                	add    %al,(%rax)
 129:	09 2e                	or     %ebp,(%rsi)
 12b:	01 3f                	add    %edi,(%rdi)
 12d:	19 03                	sbb    %eax,(%rbx)
 12f:	0e                   	(bad)  
 130:	3a 0b                	cmp    (%rbx),%cl
 132:	3b 05 49 13 11 01    	cmp    0x1111349(%rip),%eax        # 1111481 <__TMC_END__+0xb0e419>
 138:	12 07                	adc    (%rdi),%al
 13a:	40 18 96 42 19 01 13 	sbb    %dl,0x13011942(%rsi)
 141:	00 00                	add    %al,(%rax)
 143:	0a 34 00             	or     (%rax,%rax,1),%dh
 146:	03 08                	add    (%rax),%ecx
 148:	3a 0b                	cmp    (%rbx),%cl
 14a:	3b 05 49 13 02 18    	cmp    0x18021349(%rip),%eax        # 18021499 <__TMC_END__+0x17a1e431>
 150:	00 00                	add    %al,(%rax)
 152:	0b 34 00             	or     (%rax,%rax,1),%esi
 155:	03 0e                	add    (%rsi),%ecx
 157:	3a 0b                	cmp    (%rbx),%cl
 159:	3b 05 49 13 02 18    	cmp    0x18021349(%rip),%eax        # 180214a8 <__TMC_END__+0x17a1e440>
 15f:	00 00                	add    %al,(%rax)
 161:	0c 01                	or     $0x1,%al
 163:	01 49 13             	add    %ecx,0x13(%rcx)
 166:	01 13                	add    %edx,(%rbx)
 168:	00 00                	add    %al,(%rax)
 16a:	0d 21 00 49 13       	or     $0x13490021,%eax
 16f:	2f                   	(bad)  
 170:	0b 00                	or     (%rax),%eax
 172:	00 0e                	add    %cl,(%rsi)
 174:	2e 01 3f             	add    %edi,%cs:(%rdi)
 177:	19 03                	sbb    %eax,(%rbx)
 179:	0e                   	(bad)  
 17a:	3a 0b                	cmp    (%rbx),%cl
 17c:	3b 05 27 19 11 01    	cmp    0x1111927(%rip),%eax        # 1111aa9 <__TMC_END__+0xb0ea41>
 182:	12 07                	adc    (%rdi),%al
 184:	40 18 96 42 19 01 13 	sbb    %dl,0x13011942(%rsi)
 18b:	00 00                	add    %al,(%rax)
 18d:	0f 01 01             	sgdt   (%rcx)
 190:	49 13 00             	adc    (%r8),%rax
 193:	00 00                	add    %al,(%rax)
 195:	01 11                	add    %edx,(%rcx)
 197:	01 25 0e 13 0b 03    	add    %esp,0x30b130e(%rip)        # 30b14ab <__TMC_END__+0x2aae443>
 19d:	0e                   	(bad)  
 19e:	1b 0e                	sbb    (%rsi),%ecx
 1a0:	11 01                	adc    %eax,(%rcx)
 1a2:	12 07                	adc    (%rdi),%al
 1a4:	10 17                	adc    %dl,(%rdi)
 1a6:	00 00                	add    %al,(%rax)
 1a8:	02 24 00             	add    (%rax,%rax,1),%ah
 1ab:	0b 0b                	or     (%rbx),%ecx
 1ad:	3e 0b 03             	or     %ds:(%rbx),%eax
 1b0:	0e                   	(bad)  
 1b1:	00 00                	add    %al,(%rax)
 1b3:	03 24 00             	add    (%rax,%rax,1),%esp
 1b6:	0b 0b                	or     (%rbx),%ecx
 1b8:	3e 0b 03             	or     %ds:(%rbx),%eax
 1bb:	08 00                	or     %al,(%rax)
 1bd:	00 04 16             	add    %al,(%rsi,%rdx,1)
 1c0:	00 03                	add    %al,(%rbx)
 1c2:	0e                   	(bad)  
 1c3:	3a 0b                	cmp    (%rbx),%cl
 1c5:	3b 0b                	cmp    (%rbx),%ecx
 1c7:	49 13 00             	adc    (%r8),%rax
 1ca:	00 05 35 00 49 13    	add    %al,0x13490035(%rip)        # 13490205 <__TMC_END__+0x12e8d19d>
 1d0:	00 00                	add    %al,(%rax)
 1d2:	06                   	(bad)  
 1d3:	26 00 49 13          	add    %cl,%es:0x13(%rcx)
 1d7:	00 00                	add    %al,(%rax)
 1d9:	07                   	(bad)  
 1da:	01 01                	add    %eax,(%rcx)
 1dc:	49 13 01             	adc    (%r9),%rax
 1df:	13 00                	adc    (%rax),%eax
 1e1:	00 08                	add    %cl,(%rax)
 1e3:	21 00                	and    %eax,(%rax)
 1e5:	49 13 2f             	adc    (%r15),%rbp
 1e8:	0b 00                	or     (%rax),%eax
 1ea:	00 09                	add    %cl,(%rcx)
 1ec:	13 01                	adc    (%rcx),%eax
 1ee:	0b 0b                	or     (%rbx),%ecx
 1f0:	3a 0b                	cmp    (%rbx),%cl
 1f2:	3b 05 01 13 00 00    	cmp    0x1301(%rip),%eax        # 14f9 <_init-0x3ff00f>
 1f8:	0a 0d 00 03 08 3a    	or     0x3a080300(%rip),%cl        # 3a0804fe <__TMC_END__+0x39a7d496>
 1fe:	0b 3b                	or     (%rbx),%edi
 200:	05 49 13 38 0b       	add    $0xb381349,%eax
 205:	00 00                	add    %al,(%rax)
 207:	0b 0d 00 03 0e 3a    	or     0x3a0e0300(%rip),%ecx        # 3a0e050d <__TMC_END__+0x39add4a5>
 20d:	0b 3b                	or     (%rbx),%edi
 20f:	05 49 13 38 0b       	add    $0xb381349,%eax
 214:	00 00                	add    %al,(%rax)
 216:	0c 16                	or     $0x16,%al
 218:	00 03                	add    %al,(%rbx)
 21a:	0e                   	(bad)  
 21b:	3a 0b                	cmp    (%rbx),%cl
 21d:	3b 05 49 13 00 00    	cmp    0x1349(%rip),%eax        # 156c <_init-0x3fef9c>
 223:	0d 13 01 0b 05       	or     $0x50b0113,%eax
 228:	3a 0b                	cmp    (%rbx),%cl
 22a:	3b 05 01 13 00 00    	cmp    0x1301(%rip),%eax        # 1531 <_init-0x3fefd7>
 230:	0e                   	(bad)  
 231:	0d 00 03 0e 3a       	or     $0x3a0e0300,%eax
 236:	0b 3b                	or     (%rbx),%edi
 238:	05 49 13 38 05       	add    $0x5381349,%eax
 23d:	00 00                	add    %al,(%rax)
 23f:	0f 21 00             	mov    %db0,%rax
 242:	49 13 2f             	adc    (%r15),%rbp
 245:	05 00 00 10 2e       	add    $0x2e100000,%eax
 24a:	00 3f                	add    %bh,(%rdi)
 24c:	19 03                	sbb    %eax,(%rbx)
 24e:	0e                   	(bad)  
 24f:	3a 0b                	cmp    (%rbx),%cl
 251:	3b 0b                	cmp    (%rbx),%ecx
 253:	27                   	(bad)  
 254:	19 11                	sbb    %edx,(%rcx)
 256:	01 12                	add    %edx,(%rdx)
 258:	07                   	(bad)  
 259:	40 18 97 42 19 00 00 	sbb    %dl,0x1942(%rdi)
 260:	11 2e                	adc    %ebp,(%rsi)
 262:	01 3f                	add    %edi,(%rdi)
 264:	19 03                	sbb    %eax,(%rbx)
 266:	0e                   	(bad)  
 267:	3a 0b                	cmp    (%rbx),%cl
 269:	3b 05 27 19 11 01    	cmp    0x1111927(%rip),%eax        # 1111b96 <__TMC_END__+0xb0eb2e>
 26f:	12 07                	adc    (%rdi),%al
 271:	40 18 97 42 19 01 13 	sbb    %dl,0x13011942(%rdi)
 278:	00 00                	add    %al,(%rax)
 27a:	12 34 00             	adc    (%rax,%rax,1),%dh
 27d:	03 0e                	add    (%rsi),%ecx
 27f:	3a 0b                	cmp    (%rbx),%cl
 281:	3b 05 49 13 02 18    	cmp    0x18021349(%rip),%eax        # 180215d0 <__TMC_END__+0x17a1e568>
 287:	00 00                	add    %al,(%rax)
 289:	13 34 00             	adc    (%rax,%rax,1),%esi
 28c:	03 0e                	add    (%rsi),%ecx
 28e:	3a 0b                	cmp    (%rbx),%cl
 290:	3b 0b                	cmp    (%rbx),%ecx
 292:	49 13 3f             	adc    (%r15),%rdi
 295:	19 02                	sbb    %eax,(%rdx)
 297:	18 00                	sbb    %al,(%rax)
 299:	00 00                	add    %al,(%rax)
 29b:	01 11                	add    %edx,(%rcx)
 29d:	01 25 0e 13 0b 03    	add    %esp,0x30b130e(%rip)        # 30b15b1 <__TMC_END__+0x2aae549>
 2a3:	0e                   	(bad)  
 2a4:	1b 0e                	sbb    (%rsi),%ecx
 2a6:	11 01                	adc    %eax,(%rcx)
 2a8:	12 07                	adc    (%rdi),%al
 2aa:	10 17                	adc    %dl,(%rdi)
 2ac:	00 00                	add    %al,(%rax)
 2ae:	02 24 00             	add    (%rax,%rax,1),%ah
 2b1:	0b 0b                	or     (%rbx),%ecx
 2b3:	3e 0b 03             	or     %ds:(%rbx),%eax
 2b6:	0e                   	(bad)  
 2b7:	00 00                	add    %al,(%rax)
 2b9:	03 24 00             	add    (%rax,%rax,1),%esp
 2bc:	0b 0b                	or     (%rbx),%ecx
 2be:	3e 0b 03             	or     %ds:(%rbx),%eax
 2c1:	08 00                	or     %al,(%rax)
 2c3:	00 04 2e             	add    %al,(%rsi,%rbp,1)
 2c6:	00 3f                	add    %bh,(%rdi)
 2c8:	19 03                	sbb    %eax,(%rbx)
 2ca:	0e                   	(bad)  
 2cb:	3a 0b                	cmp    (%rbx),%cl
 2cd:	3b 0b                	cmp    (%rbx),%ecx
 2cf:	49 13 11             	adc    (%r9),%rdx
 2d2:	01 12                	add    %edx,(%rdx)
 2d4:	07                   	(bad)  
 2d5:	40 18 96 42 19 00 00 	sbb    %dl,0x1942(%rsi)
 2dc:	00 01                	add    %al,(%rcx)
 2de:	11 01                	adc    %eax,(%rcx)
 2e0:	25 0e 13 0b 03       	and    $0x30b130e,%eax
 2e5:	0e                   	(bad)  
 2e6:	1b 0e                	sbb    (%rsi),%ecx
 2e8:	11 01                	adc    %eax,(%rcx)
 2ea:	12 07                	adc    (%rdi),%al
 2ec:	10 17                	adc    %dl,(%rdi)
 2ee:	00 00                	add    %al,(%rax)
 2f0:	02 24 00             	add    (%rax,%rax,1),%ah
 2f3:	0b 0b                	or     (%rbx),%ecx
 2f5:	3e 0b 03             	or     %ds:(%rbx),%eax
 2f8:	0e                   	(bad)  
 2f9:	00 00                	add    %al,(%rax)
 2fb:	03 24 00             	add    (%rax,%rax,1),%esp
 2fe:	0b 0b                	or     (%rbx),%ecx
 300:	3e 0b 03             	or     %ds:(%rbx),%eax
 303:	08 00                	or     %al,(%rax)
 305:	00 04 16             	add    %al,(%rsi,%rdx,1)
 308:	00 03                	add    %al,(%rbx)
 30a:	0e                   	(bad)  
 30b:	3a 0b                	cmp    (%rbx),%cl
 30d:	3b 0b                	cmp    (%rbx),%ecx
 30f:	49 13 00             	adc    (%r8),%rax
 312:	00 05 2e 01 3f 19    	add    %al,0x193f012e(%rip)        # 193f0446 <__TMC_END__+0x18ded3de>
 318:	03 0e                	add    (%rsi),%ecx
 31a:	3a 0b                	cmp    (%rbx),%cl
 31c:	3b 0b                	cmp    (%rbx),%ecx
 31e:	27                   	(bad)  
 31f:	19 11                	sbb    %edx,(%rcx)
 321:	01 12                	add    %edx,(%rdx)
 323:	07                   	(bad)  
 324:	40 18 97 42 19 01 13 	sbb    %dl,0x13011942(%rdi)
 32b:	00 00                	add    %al,(%rax)
 32d:	06                   	(bad)  
 32e:	05 00 03 0e 3a       	add    $0x3a0e0300,%eax
 333:	0b 3b                	or     (%rbx),%edi
 335:	0b 49 13             	or     0x13(%rcx),%ecx
 338:	02 18                	add    (%rax),%bl
 33a:	00 00                	add    %al,(%rax)
 33c:	07                   	(bad)  
 33d:	0f 00 0b             	str    (%rbx)
 340:	0b 49 13             	or     0x13(%rcx),%ecx
 343:	00 00                	add    %al,(%rax)
 345:	00 01                	add    %al,(%rcx)
 347:	11 01                	adc    %eax,(%rcx)
 349:	25 0e 13 0b 03       	and    $0x30b130e,%eax
 34e:	0e                   	(bad)  
 34f:	1b 0e                	sbb    (%rsi),%ecx
 351:	11 01                	adc    %eax,(%rcx)
 353:	12 07                	adc    (%rdi),%al
 355:	10 17                	adc    %dl,(%rdi)
 357:	00 00                	add    %al,(%rax)
 359:	02 24 00             	add    (%rax,%rax,1),%ah
 35c:	0b 0b                	or     (%rbx),%ecx
 35e:	3e 0b 03             	or     %ds:(%rbx),%eax
 361:	0e                   	(bad)  
 362:	00 00                	add    %al,(%rax)
 364:	03 24 00             	add    (%rax,%rax,1),%esp
 367:	0b 0b                	or     (%rbx),%ecx
 369:	3e 0b 03             	or     %ds:(%rbx),%eax
 36c:	08 00                	or     %al,(%rax)
 36e:	00 04 16             	add    %al,(%rsi,%rdx,1)
 371:	00 03                	add    %al,(%rbx)
 373:	0e                   	(bad)  
 374:	3a 0b                	cmp    (%rbx),%cl
 376:	3b 0b                	cmp    (%rbx),%ecx
 378:	49 13 00             	adc    (%r8),%rax
 37b:	00 05 2e 01 3f 19    	add    %al,0x193f012e(%rip)        # 193f04af <__TMC_END__+0x18ded447>
 381:	03 0e                	add    (%rsi),%ecx
 383:	3a 0b                	cmp    (%rbx),%cl
 385:	3b 0b                	cmp    (%rbx),%ecx
 387:	27                   	(bad)  
 388:	19 49 13             	sbb    %ecx,0x13(%rcx)
 38b:	11 01                	adc    %eax,(%rcx)
 38d:	12 07                	adc    (%rdi),%al
 38f:	40 18 96 42 19 01 13 	sbb    %dl,0x13011942(%rsi)
 396:	00 00                	add    %al,(%rax)
 398:	06                   	(bad)  
 399:	05 00 03 08 3a       	add    $0x3a080300,%eax
 39e:	0b 3b                	or     (%rbx),%edi
 3a0:	0b 49 13             	or     0x13(%rcx),%ecx
 3a3:	02 18                	add    (%rax),%bl
 3a5:	00 00                	add    %al,(%rax)
 3a7:	07                   	(bad)  
 3a8:	05 00 03 0e 3a       	add    $0x3a0e0300,%eax
 3ad:	0b 3b                	or     (%rbx),%edi
 3af:	0b 49 13             	or     0x13(%rcx),%ecx
 3b2:	02 18                	add    (%rax),%bl
 3b4:	00 00                	add    %al,(%rax)
 3b6:	08 34 00             	or     %dh,(%rax,%rax,1)
 3b9:	03 08                	add    (%rax),%ecx
 3bb:	3a 0b                	cmp    (%rbx),%cl
 3bd:	3b 0b                	cmp    (%rbx),%ecx
 3bf:	49 13 02             	adc    (%r10),%rax
 3c2:	18 00                	sbb    %al,(%rax)
 3c4:	00 09                	add    %cl,(%rcx)
 3c6:	0b 01                	or     (%rcx),%eax
 3c8:	11 01                	adc    %eax,(%rcx)
 3ca:	12 07                	adc    (%rdi),%al
 3cc:	00 00                	add    %al,(%rax)
 3ce:	0a 34 00             	or     (%rax,%rax,1),%dh
 3d1:	03 0e                	add    (%rsi),%ecx
 3d3:	3a 0b                	cmp    (%rbx),%cl
 3d5:	3b 0b                	cmp    (%rbx),%ecx
 3d7:	49 13 02             	adc    (%r10),%rax
 3da:	18 00                	sbb    %al,(%rax)
 3dc:	00 0b                	add    %cl,(%rbx)
 3de:	0f 00 0b             	str    (%rbx)
 3e1:	0b 49 13             	or     0x13(%rcx),%ecx
 3e4:	00 00                	add    %al,(%rax)
 3e6:	0c 2e                	or     $0x2e,%al
 3e8:	01 3f                	add    %edi,(%rdi)
 3ea:	19 03                	sbb    %eax,(%rbx)
 3ec:	0e                   	(bad)  
 3ed:	3a 0b                	cmp    (%rbx),%cl
 3ef:	3b 0b                	cmp    (%rbx),%ecx
 3f1:	27                   	(bad)  
 3f2:	19 11                	sbb    %edx,(%rcx)
 3f4:	01 12                	add    %edx,(%rdx)
 3f6:	07                   	(bad)  
 3f7:	40 18 97 42 19 01 13 	sbb    %dl,0x13011942(%rdi)
 3fe:	00 00                	add    %al,(%rax)
 400:	0d 2e 01 3f 19       	or     $0x193f012e,%eax
 405:	03 0e                	add    (%rsi),%ecx
 407:	3a 0b                	cmp    (%rbx),%cl
 409:	3b 0b                	cmp    (%rbx),%ecx
 40b:	27                   	(bad)  
 40c:	19 11                	sbb    %edx,(%rcx)
 40e:	01 12                	add    %edx,(%rdx)
 410:	07                   	(bad)  
 411:	40 18 96 42 19 00 00 	sbb    %dl,0x1942(%rsi)
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
   0:	e8 00 00 00 02       	callq  2000005 <__TMC_END__+0x19fcf9d>
   5:	00 3c 00             	add    %bh,(%rax,%rax,1)
   8:	00 00                	add    %al,(%rax)
   a:	01 01                	add    %eax,(%rcx)
   c:	fb                   	sti    
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     $0x1010100,%eax
  13:	01 00                	add    %eax,(%rax)
  15:	00 00                	add    %al,(%rax)
  17:	01 00                	add    %eax,(%rax)
  19:	00 01                	add    %al,(%rcx)
  1b:	2f                   	(bad)  
  1c:	75 73                	jne    91 <_init-0x400477>
  1e:	72 2f                	jb     4f <_init-0x4004b9>
  20:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
  27:	00 00                	add    %al,(%rax)
  29:	63 6f 6e             	movslq 0x6e(%rdi),%ebp
  2c:	76 65                	jbe    93 <_init-0x400475>
  2e:	72 73                	jb     a3 <_init-0x400465>
  30:	69 6f 6e 2e 63 00 00 	imul   $0x632e,0x6e(%rdi),%ebp
  37:	00 00                	add    %al,(%rax)
  39:	73 74                	jae    af <_init-0x400459>
  3b:	64 69 6e 74 2e 68 00 	imul   $0x100682e,%fs:0x74(%rsi),%ebp
  42:	01 
  43:	00 00                	add    %al,(%rax)
  45:	00 00                	add    %al,(%rax)
  47:	09 02                	or     %eax,(%rdx)
  49:	b6 06                	mov    $0x6,%dh
  4b:	40 00 00             	add    %al,(%rax)
  4e:	00 00                	add    %al,(%rax)
  50:	00 03                	add    %al,(%rbx)
  52:	16                   	(bad)  
  53:	01 d7                	add    %edx,%edi
  55:	67 4b                	addr32 rex.WXB
  57:	4b                   	rex.WXB
  58:	4b 68 3d 4b 68 30    	rex.WXB pushq $0x30684b3d
  5e:	d7                   	xlat   %ds:(%rbx)
  5f:	9b                   	fwait
  60:	6b 75 e5 75          	imul   $0x75,-0x1b(%rbp),%esi
  64:	30 68 5a             	xor    %ch,0x5a(%rax)
  67:	08 22                	or     %ah,(%rdx)
  69:	08 59 f6             	or     %bl,-0xa(%rcx)
  6c:	08 59 d8             	or     %bl,-0x28(%rcx)
  6f:	03 70 9e             	add    -0x62(%rax),%esi
  72:	03 12                	add    (%rdx),%edx
  74:	66 68 59 76          	pushw  $0x7659
  78:	c9                   	leaveq 
  79:	03 0d 2e f3 bb 4b    	add    0x4bbbf32e(%rip),%ecx        # 4bbbf3ad <__TMC_END__+0x4b5bc345>
  7f:	75 75                	jne    f6 <_init-0x400412>
  81:	ae                   	scas   %es:(%rdi),%al
  82:	59                   	pop    %rcx
  83:	4b a0 bc 75 ae e8 ca 	rex.WXB movabs 0x40200cae8ae75bc,%al
  8a:	00 02 04 
  8d:	03 bc 00 02 04 03 9c 	add    -0x63fcfbfe(%rax,%rax,1),%edi
  94:	00 02                	add    %al,(%rdx)
  96:	04 01                	add    $0x1,%al
  98:	06                   	(bad)  
  99:	9e                   	sahf   
  9a:	00 02                	add    %al,(%rdx)
  9c:	04 02                	add    $0x2,%al
  9e:	06                   	(bad)  
  9f:	6a 00                	pushq  $0x0
  a1:	02 04 02             	add    (%rdx,%rax,1),%al
  a4:	08 21                	or     %ah,(%rcx)
  a6:	00 02                	add    %al,(%rdx)
  a8:	04 02                	add    $0x2,%al
  aa:	9f                   	lahf   
  ab:	00 02                	add    %al,(%rdx)
  ad:	04 02                	add    $0x2,%al
  af:	03 6f 58             	add    0x58(%rdi),%ebp
  b2:	00 02                	add    %al,(%rdx)
  b4:	04 01                	add    $0x1,%al
  b6:	06                   	(bad)  
  b7:	9e                   	sahf   
  b8:	06                   	(bad)  
  b9:	03 13                	add    (%rbx),%edx
  bb:	9e                   	sahf   
  bc:	68 3e 3d 03 0a       	pushq  $0xa033d3e
  c1:	2e ad                	lods   %cs:(%rsi),%eax
  c3:	92                   	xchg   %eax,%edx
  c4:	76 76                	jbe    13c <_init-0x4003cc>
  c6:	a0 7a 08 83 08 ad 91 	movabs 0x35991ad0883087a,%al
  cd:	59 03 
  cf:	7a 9e                	jp     6f <_init-0x400499>
  d1:	6e                   	outsb  %ds:(%rsi),(%dx)
  d2:	5a                   	pop    %rdx
  d3:	03 0a                	add    (%rdx),%ecx
  d5:	2e ad                	lods   %cs:(%rsi),%eax
  d7:	92                   	xchg   %eax,%edx
  d8:	76 76                	jbe    150 <_init-0x4003b8>
  da:	a0 7a 08 83 08 ad 91 	movabs 0x35991ad0883087a,%al
  e1:	59 03 
  e3:	7a 9e                	jp     83 <_init-0x400485>
  e5:	6e                   	outsb  %ds:(%rsi),(%dx)
  e6:	5a                   	pop    %rdx
  e7:	02 02                	add    (%rdx),%al
  e9:	00 01                	add    %al,(%rcx)
  eb:	01 d7                	add    %edx,%edi
  ed:	01 00                	add    %eax,(%rax)
  ef:	00 02                	add    %al,(%rdx)
  f1:	00 3a                	add    %bh,(%rdx)
  f3:	00 00                	add    %al,(%rax)
  f5:	00 01                	add    %al,(%rcx)
  f7:	01 fb                	add    %edi,%ebx
  f9:	0e                   	(bad)  
  fa:	0d 00 01 01 01       	or     $0x1010100,%eax
  ff:	01 00                	add    %eax,(%rax)
 101:	00 00                	add    %al,(%rax)
 103:	01 00                	add    %eax,(%rax)
 105:	00 01                	add    %al,(%rcx)
 107:	2f                   	(bad)  
 108:	75 73                	jne    17d <_init-0x40038b>
 10a:	72 2f                	jb     13b <_init-0x4003cd>
 10c:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
 113:	00 00                	add    %al,(%rax)
 115:	70 72                	jo     189 <_init-0x40037f>
 117:	6f                   	outsl  %ds:(%rsi),(%dx)
 118:	6a 65                	pushq  $0x65
 11a:	63 74 31 2e          	movslq 0x2e(%rcx,%rsi,1),%esi
 11e:	63 00                	movslq (%rax),%eax
 120:	00 00                	add    %al,(%rax)
 122:	00 73 74             	add    %dh,0x74(%rbx)
 125:	64 69 6e 74 2e 68 00 	imul   $0x100682e,%fs:0x74(%rsi),%ebp
 12c:	01 
 12d:	00 00                	add    %al,(%rax)
 12f:	00 00                	add    %al,(%rax)
 131:	09 02                	or     %eax,(%rdx)
 133:	c9                   	leaveq 
 134:	09 40 00             	or     %eax,0x0(%rax)
 137:	00 00                	add    %al,(%rax)
 139:	00 00                	add    %al,(%rax)
 13b:	03 1b                	add    (%rbx),%ebx
 13d:	01 84 78 9f d8 76 77 	add    %eax,0x7776d89f(%rax,%rdi,2)
 144:	08 ad 08 b1 bc 84    	or     %ch,-0x7b434ef8(%rbp)
 14a:	76 59                	jbe    1a5 <_init-0x400363>
 14c:	30 84 78 9f d8 76 77 	xor    %al,0x7776d89f(%rax,%rdi,2)
 153:	08 ad 08 b1 bc 84    	or     %ch,-0x7b434ef8(%rbp)
 159:	76 59                	jbe    1b4 <_init-0x400354>
 15b:	30 84 4f 9f d8 76 a1 	xor    %al,-0x5e892761(%rdi,%rcx,2)
 162:	83 bd 00 02 04 03 68 	cmpl   $0x68,0x3040200(%rbp)
 169:	00 02                	add    %al,(%rdx)
 16b:	04 03                	add    $0x3,%al
 16d:	fe 00                	incb   (%rax)
 16f:	02 04 01             	add    (%rcx,%rax,1),%al
 172:	06                   	(bad)  
 173:	9e                   	sahf   
 174:	06                   	(bad)  
 175:	6b 08 13             	imul   $0x13,(%rax),%ecx
 178:	08 75 08             	or     %dh,0x8(%rbp)
 17b:	14 68                	adc    $0x68,%al
 17d:	08 68 00             	or     %ch,0x0(%rax)
 180:	02 04 02             	add    (%rdx,%rax,1),%al
 183:	46 00 02             	rex.RX add %r8b,(%rdx)
 186:	04 01                	add    $0x1,%al
 188:	06                   	(bad)  
 189:	9e                   	sahf   
 18a:	06                   	(bad)  
 18b:	6e                   	outsb  %ds:(%rsi),(%dx)
 18c:	bb 4b 30 84 4f       	mov    $0x4f84304b,%ebx
 191:	9f                   	lahf   
 192:	d8 76 a0             	fdivs  -0x60(%rsi)
 195:	83 bd 00 02 04 03 67 	cmpl   $0x67,0x3040200(%rbp)
 19c:	00 02                	add    %al,(%rdx)
 19e:	04 03                	add    $0x3,%al
 1a0:	ff 00                	incl   (%rax)
 1a2:	02 04 01             	add    (%rcx,%rax,1),%al
 1a5:	06                   	(bad)  
 1a6:	9e                   	sahf   
 1a7:	06                   	(bad)  
 1a8:	6a 08                	pushq  $0x8
 1aa:	13 08                	adc    (%rax),%ecx
 1ac:	75 08                	jne    1b6 <_init-0x400352>
 1ae:	14 68                	adc    $0x68,%al
 1b0:	08 68 00             	or     %ch,0x0(%rax)
 1b3:	02 04 02             	add    (%rdx,%rax,1),%al
 1b6:	46 00 02             	rex.RX add %r8b,(%rdx)
 1b9:	04 01                	add    $0x1,%al
 1bb:	06                   	(bad)  
 1bc:	9e                   	sahf   
 1bd:	06                   	(bad)  
 1be:	6e                   	outsb  %ds:(%rsi),(%dx)
 1bf:	bb 4b 30 84 4f       	mov    $0x4f84304b,%ebx
 1c4:	9f                   	lahf   
 1c5:	d8 76 a0             	fdivs  -0x60(%rsi)
 1c8:	bb 85 00 02 04       	mov    $0x4020085,%ebx
 1cd:	03 68 00             	add    0x0(%rax),%ebp
 1d0:	02 04 03             	add    (%rbx,%rax,1),%al
 1d3:	fe 00                	incb   (%rax)
 1d5:	02 04 01             	add    (%rcx,%rax,1),%al
 1d8:	06                   	(bad)  
 1d9:	9e                   	sahf   
 1da:	06                   	(bad)  
 1db:	6b 08 13             	imul   $0x13,(%rax),%ecx
 1de:	08 75 08             	or     %dh,0x8(%rbp)
 1e1:	14 68                	adc    $0x68,%al
 1e3:	08 ae 00 02 04 02    	or     %ch,0x2040200(%rsi)
 1e9:	46 00 02             	rex.RX add %r8b,(%rdx)
 1ec:	04 01                	add    $0x1,%al
 1ee:	06                   	(bad)  
 1ef:	9e                   	sahf   
 1f0:	06                   	(bad)  
 1f1:	03 09                	add    (%rcx),%ecx
 1f3:	66 bb 4c 30          	mov    $0x304c,%bx
 1f7:	84 4f 9f             	test   %cl,-0x61(%rdi)
 1fa:	d8 76 a0             	fdivs  -0x60(%rsi)
 1fd:	83 bd 00 02 04 03 67 	cmpl   $0x67,0x3040200(%rbp)
 204:	00 02                	add    %al,(%rdx)
 206:	04 03                	add    $0x3,%al
 208:	ff 00                	incl   (%rax)
 20a:	02 04 01             	add    (%rcx,%rax,1),%al
 20d:	06                   	(bad)  
 20e:	9e                   	sahf   
 20f:	06                   	(bad)  
 210:	6a 08                	pushq  $0x8
 212:	13 08                	adc    (%rax),%ecx
 214:	75 08                	jne    21e <_init-0x4002ea>
 216:	14 68                	adc    $0x68,%al
 218:	08 68 00             	or     %ch,0x0(%rax)
 21b:	02 04 02             	add    (%rdx,%rax,1),%al
 21e:	46 00 02             	rex.RX add %r8b,(%rdx)
 221:	04 01                	add    $0x1,%al
 223:	06                   	(bad)  
 224:	9e                   	sahf   
 225:	06                   	(bad)  
 226:	6e                   	outsb  %ds:(%rsi),(%dx)
 227:	bb 4b 31 84 4f       	mov    $0x4f84314b,%ebx
 22c:	9f                   	lahf   
 22d:	d7                   	xlat   %ds:(%rbx)
 22e:	76 a0                	jbe    1d0 <_init-0x400338>
 230:	83 bd 00 02 04 03 68 	cmpl   $0x68,0x3040200(%rbp)
 237:	00 02                	add    %al,(%rdx)
 239:	04 03                	add    $0x3,%al
 23b:	fe 00                	incb   (%rax)
 23d:	02 04 01             	add    (%rcx,%rax,1),%al
 240:	06                   	(bad)  
 241:	9e                   	sahf   
 242:	06                   	(bad)  
 243:	6b 08 13             	imul   $0x13,(%rax),%ecx
 246:	08 59 08             	or     %bl,0x8(%rcx)
 249:	13 08                	adc    (%rax),%ecx
 24b:	13 08                	adc    (%rax),%ecx
 24d:	15 68 08 22 4c       	adc    $0x4c220868,%eax
 252:	08 76 00             	or     %dh,0x0(%rsi)
 255:	02 04 02             	add    (%rdx,%rax,1),%al
 258:	03 78 4a             	add    0x4a(%rax),%edi
 25b:	00 02                	add    %al,(%rdx)
 25d:	04 01                	add    $0x1,%al
 25f:	06                   	(bad)  
 260:	9e                   	sahf   
 261:	06                   	(bad)  
 262:	03 0c 66             	add    (%rsi,%riz,2),%ecx
 265:	bb 4b 31 82 e6       	mov    $0xe682314b,%ebx
 26a:	4c 02 80 01 18 9f d7 	rex.WR add -0x2860e7ff(%rax),%r8b
 271:	76 a1                	jbe    214 <_init-0x4002f4>
 273:	08 76 08             	or     %dh,0x8(%rsi)
 276:	13 08                	adc    (%rax),%ecx
 278:	13 08                	adc    (%rax),%ecx
 27a:	14 68                	adc    $0x68,%al
 27c:	02 2c 14             	add    (%rsp,%rdx,1),%ch
 27f:	00 02                	add    %al,(%rdx)
 281:	04 02                	add    $0x2,%al
 283:	46 00 02             	rex.RX add %r8b,(%rdx)
 286:	04 01                	add    $0x1,%al
 288:	06                   	(bad)  
 289:	9e                   	sahf   
 28a:	06                   	(bad)  
 28b:	6e                   	outsb  %ds:(%rsi),(%dx)
 28c:	bb 00 02 04 01       	mov    $0x1040200,%ebx
 291:	4b 06                	rex.WXB (bad) 
 293:	e4 06                	in     $0x6,%al
 295:	77 82                	ja     219 <_init-0x4002ef>
 297:	e6 4d                	out    %al,$0x4d
 299:	c9                   	leaveq 
 29a:	c9                   	leaveq 
 29b:	c9                   	leaveq 
 29c:	c9                   	leaveq 
 29d:	c9                   	leaveq 
 29e:	c9                   	leaveq 
 29f:	c9                   	leaveq 
 2a0:	ca 00 02             	lret   $0x200
 2a3:	04 03                	add    $0x3,%al
 2a5:	68 00 02 04 03       	pushq  $0x3040200
 2aa:	08 d7                	or     %dl,%bh
 2ac:	00 02                	add    %al,(%rdx)
 2ae:	04 03                	add    $0x3,%al
 2b0:	08 55 00             	or     %dl,0x0(%rbp)
 2b3:	02 04 01             	add    (%rcx,%rax,1),%al
 2b6:	06                   	(bad)  
 2b7:	9e                   	sahf   
 2b8:	06                   	(bad)  
 2b9:	6c                   	insb   (%dx),%es:(%rdi)
 2ba:	9f                   	lahf   
 2bb:	9f                   	lahf   
 2bc:	02 23                	add    (%rbx),%ah
 2be:	13 08                	adc    (%rax),%ecx
 2c0:	91                   	xchg   %eax,%ecx
 2c1:	9f                   	lahf   
 2c2:	02 17                	add    (%rdi),%dl
 2c4:	00 01                	add    %al,(%rcx)
 2c6:	01 d9                	add    %ebx,%ecx
 2c8:	00 00                	add    %al,(%rax)
 2ca:	00 02                	add    %al,(%rdx)
 2cc:	00 5f 00             	add    %bl,0x0(%rdi)
 2cf:	00 00                	add    %al,(%rax)
 2d1:	01 01                	add    %eax,(%rcx)
 2d3:	fb                   	sti    
 2d4:	0e                   	(bad)  
 2d5:	0d 00 01 01 01       	or     $0x1010100,%eax
 2da:	01 00                	add    %eax,(%rax)
 2dc:	00 00                	add    %al,(%rax)
 2de:	01 00                	add    %eax,(%rax)
 2e0:	00 01                	add    %al,(%rcx)
 2e2:	2f                   	(bad)  
 2e3:	75 73                	jne    358 <_init-0x4001b0>
 2e5:	72 2f                	jb     316 <_init-0x4001f2>
 2e7:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
 2ee:	00 2e                	add    %ch,(%rsi)
 2f0:	2e 2f                	cs (bad) 
 2f2:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
 2f9:	2f                   	(bad)  
 2fa:	63 6f 6d             	movslq 0x6d(%rdi),%ebp
 2fd:	6d                   	insl   (%dx),%es:(%rdi)
 2fe:	6f                   	outsl  %ds:(%rsi),(%dx)
 2ff:	6e                   	outsb  %ds:(%rsi),(%dx)
 300:	00 00                	add    %al,(%rax)
 302:	73 79                	jae    37d <_init-0x40018b>
 304:	73 74                	jae    37a <_init-0x40018e>
 306:	65 6d                	gs insl (%dx),%es:(%rdi)
 308:	5f                   	pop    %rdi
 309:	4d                   	rex.WRB
 30a:	4b                   	rex.WXB
 30b:	4c 32 35 5a 34 2e 63 	rex.WR xor 0x632e345a(%rip),%r14b        # 632e376c <__TMC_END__+0x62ce0704>
 312:	00 00                	add    %al,(%rax)
 314:	00 00                	add    %al,(%rax)
 316:	73 74                	jae    38c <_init-0x40017c>
 318:	64 69 6e 74 2e 68 00 	imul   $0x100682e,%fs:0x74(%rsi),%ebp
 31f:	01 
 320:	00 00                	add    %al,(%rax)
 322:	4d                   	rex.WRB
 323:	4b                   	rex.WXB
 324:	4c 32 35 5a 34 2e 68 	rex.WR xor 0x682e345a(%rip),%r14b        # 682e3785 <__TMC_END__+0x67ce071d>
 32b:	00 02                	add    %al,(%rdx)
 32d:	00 00                	add    %al,(%rax)
 32f:	00 00                	add    %al,(%rax)
 331:	09 02                	or     %eax,(%rdx)
 333:	7f 12                	jg     347 <_init-0x4001c1>
 335:	40 00 00             	add    %al,(%rax)
 338:	00 00                	add    %al,(%rax)
 33a:	00 03                	add    %al,(%rbx)
 33c:	f1                   	icebp  
 33d:	00 01                	add    %al,(%rcx)
 33f:	4d 03 9a 01 e4 42 4e 	add    0x4e42e401(%r10),%r11
 346:	08 76 08             	or     %dh,0x8(%rsi)
 349:	68 08 5a 75 08       	pushq  $0x8755a08
 34e:	2f                   	(bad)  
 34f:	08 76 67             	or     %dh,0x67(%rsi)
 352:	30 67 30             	xor    %ah,0x30(%rdi)
 355:	02 22                	add    (%rdx),%ah
 357:	13 3f                	adc    (%rdi),%edi
 359:	02 22                	add    (%rdx),%ah
 35b:	14 08                	adc    $0x8,%al
 35d:	30 77 03             	xor    %dh,0x3(%rdi)
 360:	1a 02                	sbb    (%rdx),%al
 362:	2d 01 03 66 58       	sub    $0x58660301,%eax
 367:	03 1a                	add    (%rdx),%ebx
 369:	08 82 03 66 58 03    	or     %al,0x3586603(%rdx)
 36f:	1a 08                	sbb    (%rax),%cl
 371:	58                   	pop    %rax
 372:	03 68 58             	add    0x58(%rax),%ebp
 375:	f3 5a                	repz pop %rdx
 377:	f3 5a                	repz pop %rdx
 379:	08 21                	or     %ah,(%rcx)
 37b:	5a                   	pop    %rdx
 37c:	f3 5a                	repz pop %rdx
 37e:	bb 5a bb 5a bb       	mov    $0xbb5abb5a,%ebx
 383:	5a                   	pop    %rdx
 384:	bb 5e 08 59 08       	mov    $0x859085e,%ebx
 389:	2f                   	(bad)  
 38a:	08 59 08             	or     %bl,0x8(%rcx)
 38d:	22 08                	and    (%rax),%cl
 38f:	4c 08 2f             	rex.WR or %r13b,(%rdi)
 392:	92                   	xchg   %eax,%edx
 393:	02 22                	add    (%rdx),%ah
 395:	13 08                	adc    (%rax),%ecx
 397:	4c 08 68 79          	rex.WR or %r13b,0x79(%rax)
 39b:	02 23                	add    (%rbx),%ah
 39d:	10 23                	adc    %ah,(%rbx)
 39f:	02 02                	add    (%rdx),%al
 3a1:	00 01                	add    %al,(%rcx)
 3a3:	01 39                	add    %edi,(%rcx)
 3a5:	00 00                	add    %al,(%rax)
 3a7:	00 02                	add    %al,(%rdx)
 3a9:	00 1d 00 00 00 01    	add    %bl,0x1000000(%rip)        # 10003af <__TMC_END__+0x9fd347>
 3af:	01 fb                	add    %edi,%ebx
 3b1:	0e                   	(bad)  
 3b2:	0d 00 01 01 01       	or     $0x1010100,%eax
 3b7:	01 00                	add    %eax,(%rax)
 3b9:	00 00                	add    %al,(%rax)
 3bb:	01 00                	add    %eax,(%rax)
 3bd:	00 01                	add    %al,(%rcx)
 3bf:	00 6d 61             	add    %ch,0x61(%rbp)
 3c2:	69 6e 2e 63 00 00 00 	imul   $0x63,0x2e(%rsi),%ebp
 3c9:	00 00                	add    %al,(%rax)
 3cb:	00 09                	add    %cl,(%rcx)
 3cd:	02 83 15 40 00 00    	add    0x4015(%rbx),%al
 3d3:	00 00                	add    %al,(%rax)
 3d5:	00 03                	add    %al,(%rbx)
 3d7:	0d 01 4c 5a 59       	or     $0x595a4c01,%eax
 3dc:	02 02                	add    (%rdx),%al
 3de:	00 01                	add    %al,(%rcx)
 3e0:	01 54 00 00          	add    %edx,0x0(%rax,%rax,1)
 3e4:	00 02                	add    %al,(%rdx)
 3e6:	00 37                	add    %dh,(%rdi)
 3e8:	00 00                	add    %al,(%rax)
 3ea:	00 01                	add    %al,(%rcx)
 3ec:	01 fb                	add    %edi,%ebx
 3ee:	0e                   	(bad)  
 3ef:	0d 00 01 01 01       	or     $0x1010100,%eax
 3f4:	01 00                	add    %eax,(%rax)
 3f6:	00 00                	add    %al,(%rax)
 3f8:	01 00                	add    %eax,(%rax)
 3fa:	00 01                	add    %al,(%rcx)
 3fc:	2f                   	(bad)  
 3fd:	75 73                	jne    472 <_init-0x400096>
 3ff:	72 2f                	jb     430 <_init-0x4000d8>
 401:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
 408:	00 00                	add    %al,(%rax)
 40a:	64 65 62             	fs gs (bad) 
 40d:	75 67                	jne    476 <_init-0x400092>
 40f:	2e 63 00             	movslq %cs:(%rax),%eax
 412:	00 00                	add    %al,(%rax)
 414:	00 73 74             	add    %dh,0x74(%rbx)
 417:	64 69 6e 74 2e 68 00 	imul   $0x100682e,%fs:0x74(%rsi),%ebp
 41e:	01 
 41f:	00 00                	add    %al,(%rax)
 421:	00 00                	add    %al,(%rax)
 423:	09 02                	or     %eax,(%rdx)
 425:	93                   	xchg   %eax,%ebx
 426:	15 40 00 00 00       	adc    $0x40,%eax
 42b:	00 00                	add    %al,(%rax)
 42d:	03 0d 01 03 10 ac    	add    -0x53effcff(%rip),%ecx        # ffffffffac100734 <__TMC_END__+0xffffffffabafd6cc>
 433:	22 02                	and    (%rdx),%al
 435:	02 00                	add    (%rax),%al
 437:	01 01                	add    %eax,(%rcx)
 439:	44 01 00             	add    %r8d,(%rax)
 43c:	00 02                	add    %al,(%rdx)
 43e:	00 6c 00 00          	add    %ch,0x0(%rax,%rax,1)
 442:	00 01                	add    %al,(%rcx)
 444:	01 fb                	add    %edi,%ebx
 446:	0e                   	(bad)  
 447:	0d 00 01 01 01       	or     $0x1010100,%eax
 44c:	01 00                	add    %eax,(%rax)
 44e:	00 00                	add    %al,(%rax)
 450:	01 00                	add    %eax,(%rax)
 452:	00 01                	add    %al,(%rcx)
 454:	2f                   	(bad)  
 455:	75 73                	jne    4ca <_init-0x40003e>
 457:	72 2f                	jb     488 <_init-0x400080>
 459:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
 460:	00 2f                	add    %ch,(%rdi)
 462:	75 73                	jne    4d7 <_init-0x400031>
 464:	72 2f                	jb     495 <_init-0x400073>
 466:	6c                   	insb   (%dx),%es:(%rdi)
 467:	69 62 2f 67 63 63 2f 	imul   $0x2f636367,0x2f(%rdx),%esp
 46e:	78 38                	js     4a8 <_init-0x400060>
 470:	36 5f                	ss pop %rdi
 472:	36 34 2d             	ss xor $0x2d,%al
 475:	6c                   	insb   (%dx),%es:(%rdi)
 476:	69 6e 75 78 2d 67 6e 	imul   $0x6e672d78,0x75(%rsi),%ebp
 47d:	75 2f                	jne    4ae <_init-0x40005a>
 47f:	35 2f 69 6e 63       	xor    $0x636e692f,%eax
 484:	6c                   	insb   (%dx),%es:(%rdi)
 485:	75 64                	jne    4eb <_init-0x40001d>
 487:	65 00 00             	add    %al,%gs:(%rax)
 48a:	6d                   	insl   (%dx),%es:(%rdi)
 48b:	65 6d                	gs insl (%dx),%es:(%rdi)
 48d:	6f                   	outsl  %ds:(%rsi),(%dx)
 48e:	72 79                	jb     509 <_init-0x3fffff>
 490:	2e 63 00             	movslq %cs:(%rax),%eax
 493:	00 00                	add    %al,(%rax)
 495:	00 73 74             	add    %dh,0x74(%rbx)
 498:	64 69 6e 74 2e 68 00 	imul   $0x100682e,%fs:0x74(%rsi),%ebp
 49f:	01 
 4a0:	00 00                	add    %al,(%rax)
 4a2:	73 74                	jae    518 <_init-0x3ffff0>
 4a4:	64 64 65 66 2e 68 00 	fs fs gs cs pushw $0x200
 4ab:	02 
 4ac:	00 00                	add    %al,(%rax)
 4ae:	00 00                	add    %al,(%rax)
 4b0:	09 02                	or     %eax,(%rdx)
 4b2:	a1 15 40 00 00 00 00 	movabs 0x300000000004015,%eax
 4b9:	00 03 
 4bb:	11 01                	adc    %eax,(%rcx)
 4bd:	08 3f                	or     %bh,(%rdi)
 4bf:	08 59 00             	or     %bl,0x0(%rcx)
 4c2:	02 04 01             	add    (%rcx,%rax,1),%al
 4c5:	06                   	(bad)  
 4c6:	74 06                	je     4ce <_init-0x40003a>
 4c8:	76 9f                	jbe    469 <_init-0x40009f>
 4ca:	a2 00 02 04 02 06 08 	movabs %al,0x9e080602040200
 4d1:	9e 00 
 4d3:	02 04 03             	add    (%rbx,%rax,1),%al
 4d6:	08 2e                	or     %ch,(%rsi)
 4d8:	00 02                	add    %al,(%rdx)
 4da:	04 04                	add    $0x4,%al
 4dc:	74 00                	je     4de <_init-0x40002a>
 4de:	02 04 06             	add    (%rsi,%rax,1),%al
 4e1:	58                   	pop    %rax
 4e2:	00 02                	add    %al,(%rdx)
 4e4:	04 06                	add    $0x6,%al
 4e6:	06                   	(bad)  
 4e7:	75 68                	jne    551 <_init-0x3fffb7>
 4e9:	00 02                	add    %al,(%rdx)
 4eb:	04 03                	add    $0x3,%al
 4ed:	92                   	xchg   %eax,%edx
 4ee:	00 02                	add    %al,(%rdx)
 4f0:	04 03                	add    $0x3,%al
 4f2:	08 d4                	or     %dl,%ah
 4f4:	00 02                	add    %al,(%rdx)
 4f6:	04 01                	add    $0x1,%al
 4f8:	06                   	(bad)  
 4f9:	4a 06                	rex.WX (bad) 
 4fb:	d0 00                	rolb   (%rax)
 4fd:	02 04 03             	add    (%rbx,%rax,1),%al
 500:	bc 00 02 04 03       	mov    $0x3040200,%esp
 505:	08 d4                	or     %dl,%ah
 507:	00 02                	add    %al,(%rdx)
 509:	04 01                	add    $0x1,%al
 50b:	06                   	(bad)  
 50c:	4a 06                	rex.WX (bad) 
 50e:	6d                   	insl   (%dx),%es:(%rdi)
 50f:	4b 32 08             	rex.WXB xor (%r8),%cl
 512:	3e 00 02             	add    %al,%ds:(%rdx)
 515:	04 01                	add    $0x1,%al
 517:	06                   	(bad)  
 518:	74 06                	je     520 <_init-0x3fffe8>
 51a:	76 9f                	jbe    4bb <_init-0x40004d>
 51c:	a2 00 02 04 03 68 00 	movabs %al,0x402006803040200
 523:	02 04 
 525:	03 08                	add    (%rax),%ecx
 527:	9c                   	pushfq 
 528:	00 02                	add    %al,(%rdx)
 52a:	04 01                	add    $0x1,%al
 52c:	06                   	(bad)  
 52d:	9e                   	sahf   
 52e:	06                   	(bad)  
 52f:	a3 4b 31 08 4c 76 9f 	movabs %eax,0xa09f764c08314b
 536:	a0 00 
 538:	02 04 03             	add    (%rbx,%rax,1),%al
 53b:	68 00 02 04 03       	pushq  $0x3040200
 540:	fe 00                	incb   (%rax)
 542:	02 04 01             	add    (%rcx,%rax,1),%al
 545:	06                   	(bad)  
 546:	9e                   	sahf   
 547:	06                   	(bad)  
 548:	a2 4b 31 f3 08 ad 4b 	movabs %al,0xf4314bad08f3314b
 54f:	31 f4 
 551:	76 9f                	jbe    4f2 <_init-0x400016>
 553:	a0 00 02 04 03 68 00 	movabs 0x402006803040200,%al
 55a:	02 04 
 55c:	03 02                	add    (%rdx),%eax
 55e:	2f                   	(bad)  
 55f:	10 00                	adc    %al,(%rax)
 561:	02 04 01             	add    (%rcx,%rax,1),%al
 564:	06                   	(bad)  
 565:	9e                   	sahf   
 566:	06                   	(bad)  
 567:	f6                   	(bad)  
 568:	4b 31 bc 9f c9 9f 3f 	xor    %rdi,-0x44c06037(%r15,%r11,4)
 56f:	bb 
 570:	08 3d 76 e5 77 4b    	or     %bh,0x4b77e576(%rip)        # 4b77eaec <__TMC_END__+0x4b17ba84>
 576:	31 bb 76 9f a0 bb    	xor    %edi,-0x445f608a(%rbx)
 57c:	02 03                	add    (%rbx),%al
 57e:	00 01                	add    %al,(%rcx)
 580:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
   0:	63 68 65             	movslq 0x65(%rax),%ebp
   3:	63 6b 00             	movslq 0x0(%rbx),%ebp
   6:	64 61                	fs (bad) 
   8:	74 61                	je     6b <_init-0x40049d>
   a:	00 75 6e             	add    %dh,0x6e(%rbp)
   d:	73 69                	jae    78 <_init-0x400490>
   f:	67 6e                	outsb  %ds:(%esi),(%dx)
  11:	65 64 20 63 68       	gs and %ah,%fs:0x68(%rbx)
  16:	61                   	(bad)  
  17:	72 00                	jb     19 <_init-0x4004ef>
  19:	6d                   	insl   (%dx),%es:(%rdi)
  1a:	79 5f                	jns    7b <_init-0x40048d>
  1c:	61                   	(bad)  
  1d:	74 6f                	je     8e <_init-0x40047a>
  1f:	69 00 6c 6f 6e 67    	imul   $0x676e6f6c,(%rax),%eax
  25:	20 75 6e             	and    %dh,0x6e(%rbp)
  28:	73 69                	jae    93 <_init-0x400475>
  2a:	67 6e                	outsb  %ds:(%esi),(%dx)
  2c:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
  31:	74 00                	je     33 <_init-0x4004d5>
  33:	73 68                	jae    9d <_init-0x40046b>
  35:	6f                   	outsl  %ds:(%rsi),(%dx)
  36:	72 74                	jb     ac <_init-0x40045c>
  38:	20 75 6e             	and    %dh,0x6e(%rbp)
  3b:	73 69                	jae    a6 <_init-0x400462>
  3d:	67 6e                	outsb  %ds:(%esi),(%dx)
  3f:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
  44:	74 00                	je     46 <_init-0x4004c2>
  46:	2f                   	(bad)  
  47:	68 6f 6d 65 2f       	pushq  $0x2f656d6f
  4c:	73 6f                	jae    bd <_init-0x40044b>
  4e:	77 6d                	ja     bd <_init-0x40044b>
  50:	79 61                	jns    b3 <_init-0x400455>
  52:	2f                   	(bad)  
  53:	50                   	push   %rax
  54:	72 6f                	jb     c5 <_init-0x400443>
  56:	6a 65                	pushq  $0x65
  58:	63 74 31 2d          	movslq 0x2d(%rcx,%rsi,1),%esi
  5c:	66 69 6e 61 6c 2f    	imul   $0x2f6c,0x61(%rsi),%bp
  62:	70 72                	jo     d6 <_init-0x400432>
  64:	6f                   	outsl  %ds:(%rsi),(%dx)
  65:	6a 65                	pushq  $0x65
  67:	63 74 31 2d          	movslq 0x2d(%rcx,%rsi,1),%esi
  6b:	73 72                	jae    df <_init-0x400429>
  6d:	65 65 6c             	gs gs insb (%dx),%es:(%rdi)
  70:	61                   	(bad)  
  71:	2d 73 6f 77 6d       	sub    $0x6d776f73,%eax
  76:	79 61                	jns    d9 <_init-0x40042f>
  78:	2f                   	(bad)  
  79:	50                   	push   %rax
  7a:	72 6f                	jb     eb <_init-0x40041d>
  7c:	6a 65                	pushq  $0x65
  7e:	63 74 31 2f          	movslq 0x2f(%rcx,%rsi,1),%esi
  82:	70 72                	jo     f6 <_init-0x400412>
  84:	6f                   	outsl  %ds:(%rsi),(%dx)
  85:	6a 65                	pushq  $0x65
  87:	63 74 31 66          	movslq 0x66(%rcx,%rsi,1),%esi
  8b:	69 6c 65 73 2f 73 72 	imul   $0x6372732f,0x73(%rbp,%riz,2),%ebp
  92:	63 
  93:	00 47 4e             	add    %al,0x4e(%rdi)
  96:	55                   	push   %rbp
  97:	20 43 39             	and    %al,0x39(%rbx)
  9a:	39 20                	cmp    %esp,(%rax)
  9c:	35 2e 34 2e 30       	xor    $0x302e342e,%eax
  a1:	20 32                	and    %dh,(%rdx)
  a3:	30 31                	xor    %dh,(%rcx)
  a5:	36 30 36             	xor    %dh,%ss:(%rsi)
  a8:	30 39                	xor    %bh,(%rcx)
  aa:	20 2d 6d 74 75 6e    	and    %ch,0x6e75746d(%rip)        # 6e75751d <__TMC_END__+0x6e1544b5>
  b0:	65 3d 67 65 6e 65    	gs cmp $0x656e6567,%eax
  b6:	72 69                	jb     121 <_init-0x4003e7>
  b8:	63 20                	movslq (%rax),%esp
  ba:	2d 6d 61 72 63       	sub    $0x6372616d,%eax
  bf:	68 3d 78 38 36       	pushq  $0x3638783d
  c4:	2d 36 34 20 2d       	sub    $0x2d203436,%eax
  c9:	67 20 2d 4f 30 20 2d 	and    %ch,0x2d20304f(%eip)        # 2d20311f <__TMC_END__+0x2cc000b7>
  d0:	73 74                	jae    146 <_init-0x4003c2>
  d2:	64 3d 63 39 39 20    	fs cmp $0x20393963,%eax
  d8:	2d 66 73 74 61       	sub    $0x61747366,%eax
  dd:	63 6b 2d             	movslq 0x2d(%rbx),%ebp
  e0:	70 72                	jo     154 <_init-0x4003b4>
  e2:	6f                   	outsl  %ds:(%rsi),(%dx)
  e3:	74 65                	je     14a <_init-0x4003be>
  e5:	63 74 6f 72          	movslq 0x72(%rdi,%rbp,2),%esi
  e9:	2d 73 74 72 6f       	sub    $0x6f727473,%eax
  ee:	6e                   	outsb  %ds:(%rsi),(%dx)
  ef:	67 00 62 61          	add    %ah,0x61(%edx)
  f3:	73 65                	jae    15a <_init-0x4003ae>
  f5:	00 75 69             	add    %dh,0x69(%rbp)
  f8:	6e                   	outsb  %ds:(%rsi),(%dx)
  f9:	74 38                	je     133 <_init-0x4003d5>
  fb:	5f                   	pop    %rdi
  fc:	74 00                	je     fe <_init-0x40040a>
  fe:	6e                   	outsb  %ds:(%rsi),(%dx)
  ff:	75 6d                	jne    16e <_init-0x40039a>
 101:	62                   	(bad)  
 102:	65 72 00             	gs jb  105 <_init-0x400403>
 105:	6c                   	insb   (%dx),%es:(%rdi)
 106:	6f                   	outsl  %ds:(%rsi),(%dx)
 107:	6e                   	outsb  %ds:(%rsi),(%dx)
 108:	67 20 6c 6f 6e       	and    %ch,0x6e(%edi,%ebp,2)
 10d:	67 20 69 6e          	and    %ch,0x6e(%ecx)
 111:	74 00                	je     113 <_init-0x4003f5>
 113:	64 69 67 69 74 73 00 	imul   $0x73007374,%fs:0x69(%rdi),%esp
 11a:	73 
 11b:	68 6f 72 74 20       	pushq  $0x2074726f
 120:	69 6e 74 00 62 69 67 	imul   $0x67696200,0x74(%rsi),%ebp
 127:	5f                   	pop    %rdi
 128:	74 6f                	je     199 <_init-0x40036f>
 12a:	5f                   	pop    %rdi
 12b:	6c                   	insb   (%dx),%es:(%rdi)
 12c:	69 74 74 6c 65 33 32 	imul   $0x323365,0x6c(%rsp,%rsi,2),%esi
 133:	00 
 134:	75 69                	jne    19f <_init-0x400369>
 136:	6e                   	outsb  %ds:(%rsi),(%dx)
 137:	74 33                	je     16c <_init-0x40039c>
 139:	32 5f 74             	xor    0x74(%rdi),%bl
 13c:	00 73 69             	add    %dh,0x69(%rbx)
 13f:	67 6e                	outsb  %ds:(%esi),(%dx)
 141:	00 6c 69 74          	add    %ch,0x74(%rcx,%rbp,2)
 145:	74 6c                	je     1b3 <_init-0x400355>
 147:	65 5f                	gs pop %rdi
 149:	74 6f                	je     1ba <_init-0x40034e>
 14b:	5f                   	pop    %rdi
 14c:	62                   	(bad)  
 14d:	69 67 33 32 00 63 6f 	imul   $0x6f630032,0x33(%rdi),%esp
 154:	6e                   	outsb  %ds:(%rsi),(%dx)
 155:	76 65                	jbe    1bc <_init-0x40034c>
 157:	72 73                	jb     1cc <_init-0x40033c>
 159:	69 6f 6e 2e 63 00 6c 	imul   $0x6c00632e,0x6e(%rdi),%ebp
 160:	65 6e                	outsb  %gs:(%rsi),(%dx)
 162:	67 74 68             	addr32 je 1cd <_init-0x40033b>
 165:	00 6d 79             	add    %ch,0x79(%rbp)
 168:	5f                   	pop    %rdi
 169:	69 74 6f 61 00 73 74 	imul   $0x72747300,0x61(%rdi,%rbp,2),%esi
 170:	72 
 171:	69 6e 67 73 69 7a 65 	imul   $0x657a6973,0x67(%rsi),%ebp
 178:	00 76 61             	add    %dh,0x61(%rsi)
 17b:	6c                   	insb   (%dx),%es:(%rdi)
 17c:	75 65                	jne    1e3 <_init-0x400325>
 17e:	00 74 65 73          	add    %dh,0x73(%rbp,%riz,2)
 182:	74 5f                	je     1e3 <_init-0x400325>
 184:	6d                   	insl   (%dx),%es:(%rdi)
 185:	65 6d                	gs insl (%dx),%es:(%rdi)
 187:	63 70 79             	movslq 0x79(%rax),%esi
 18a:	00 70 72             	add    %dh,0x72(%rax)
 18d:	6f                   	outsl  %ds:(%rsi),(%dx)
 18e:	6a 65                	pushq  $0x65
 190:	63 74 31 2e          	movslq 0x2e(%rcx,%rsi,1),%esi
 194:	63 00                	movslq (%rax),%eax
 196:	70 74                	jo     20c <_init-0x4002fc>
 198:	72 62                	jb     1fc <_init-0x40030c>
 19a:	00 72 65             	add    %dh,0x65(%rdx)
 19d:	73 75                	jae    214 <_init-0x4002f4>
 19f:	6c                   	insb   (%dx),%es:(%rdi)
 1a0:	74 73                	je     215 <_init-0x4002f3>
 1a2:	00 74 65 73          	add    %dh,0x73(%rbp,%riz,2)
 1a6:	74 5f                	je     207 <_init-0x400301>
 1a8:	72 65                	jb     20f <_init-0x4002f9>
 1aa:	76 65                	jbe    211 <_init-0x4002f7>
 1ac:	72 73                	jb     221 <_init-0x4002e7>
 1ae:	65 00 70 72          	add    %dh,%gs:0x72(%rax)
 1b2:	6f                   	outsl  %ds:(%rsi),(%dx)
 1b3:	6a 65                	pushq  $0x65
 1b5:	63 74 31 00          	movslq 0x0(%rcx,%rsi,1),%esi
 1b9:	73 69                	jae    224 <_init-0x4002e4>
 1bb:	7a 65                	jp     222 <_init-0x4002e6>
 1bd:	74 79                	je     238 <_init-0x4002d0>
 1bf:	70 65                	jo     226 <_init-0x4002e2>
 1c1:	00 74 65 73          	add    %dh,0x73(%rbp,%riz,2)
 1c5:	74 5f                	je     226 <_init-0x4002e2>
 1c7:	6d                   	insl   (%dx),%es:(%rdi)
 1c8:	65 6d                	gs insl (%dx),%es:(%rdi)
 1ca:	6d                   	insl   (%dx),%es:(%rdi)
 1cb:	6f                   	outsl  %ds:(%rsi),(%dx)
 1cc:	76 65                	jbe    233 <_init-0x4002d5>
 1ce:	31 00                	xor    %eax,(%rax)
 1d0:	74 65                	je     237 <_init-0x4002d1>
 1d2:	73 74                	jae    248 <_init-0x4002c0>
 1d4:	5f                   	pop    %rdi
 1d5:	6d                   	insl   (%dx),%es:(%rdi)
 1d6:	65 6d                	gs insl (%dx),%es:(%rdi)
 1d8:	6d                   	insl   (%dx),%es:(%rdi)
 1d9:	6f                   	outsl  %ds:(%rsi),(%dx)
 1da:	76 65                	jbe    241 <_init-0x4002c7>
 1dc:	32 00                	xor    (%rax),%al
 1de:	70 74                	jo     254 <_init-0x4002b4>
 1e0:	72 61                	jb     243 <_init-0x4002c5>
 1e2:	00 66 61             	add    %ah,0x61(%rsi)
 1e5:	69 6c 65 64 00 74 65 	imul   $0x73657400,0x64(%rbp,%riz,2),%ebp
 1ec:	73 
 1ed:	74 5f                	je     24e <_init-0x4002ba>
 1ef:	6d                   	insl   (%dx),%es:(%rdi)
 1f0:	65 6d                	gs insl (%dx),%es:(%rdi)
 1f2:	73 65                	jae    259 <_init-0x4002af>
 1f4:	74 00                	je     1f6 <_init-0x400312>
 1f6:	74 65                	je     25d <_init-0x4002ab>
 1f8:	73 74                	jae    26e <_init-0x40029a>
 1fa:	5f                   	pop    %rdi
 1fb:	6d                   	insl   (%dx),%es:(%rdi)
 1fc:	65 6d                	gs insl (%dx),%es:(%rdi)
 1fe:	6d                   	insl   (%dx),%es:(%rdi)
 1ff:	6f                   	outsl  %ds:(%rsi),(%dx)
 200:	76 65                	jbe    267 <_init-0x4002a1>
 202:	33 00                	xor    (%rax),%eax
 204:	74 65                	je     26b <_init-0x40029d>
 206:	73 74                	jae    27c <_init-0x40028c>
 208:	5f                   	pop    %rdi
 209:	64 61                	fs (bad) 
 20b:	74 61                	je     26e <_init-0x40029a>
 20d:	31 00                	xor    %eax,(%rax)
 20f:	74 65                	je     276 <_init-0x400292>
 211:	73 74                	jae    287 <_init-0x400281>
 213:	5f                   	pop    %rdi
 214:	64 61                	fs (bad) 
 216:	74 61                	je     279 <_init-0x40028f>
 218:	32 00                	xor    (%rax),%al
 21a:	63 6f 70             	movslq 0x70(%rdi),%ebp
 21d:	79 00                	jns    21f <_init-0x4002e9>
 21f:	53                   	push   %rbx
 220:	4f 50                	rex.WRXB push %r8
 222:	54                   	push   %rsp
 223:	34 00                	xor    $0x0,%al
 225:	53                   	push   %rbx
 226:	4f 50                	rex.WRXB push %r8
 228:	54                   	push   %rsp
 229:	35 00 53 4f 50       	xor    $0x504f5300,%eax
 22e:	54                   	push   %rsp
 22f:	37                   	(bad)  
 230:	00 53 52             	add    %dl,0x52(%rbx)
 233:	56                   	push   %rsi
 234:	43                   	rex.XB
 235:	4f 50                	rex.WRXB push %r8
 237:	00 52 45             	add    %dl,0x45(%rdx)
 23a:	53                   	push   %rbx
 23b:	45 52                	rex.RB push %r10
 23d:	56                   	push   %rsi
 23e:	45                   	rex.RB
 23f:	44 5f                	rex.R pop %rdi
 241:	30 00                	xor    %al,(%rax)
 243:	4d                   	rex.WRB
 244:	43                   	rex.XB
 245:	47 5f                	rex.RXB pop %r15
 247:	54                   	push   %rsp
 248:	79 70                	jns    2ba <_init-0x40024e>
 24a:	65 00 55 49          	add    %dl,%gs:0x49(%rbp)
 24e:	44                   	rex.R
 24f:	4c 00 46 43          	rex.WR add %r8b,0x43(%rsi)
 253:	46                   	rex.RX
 254:	47 31 00             	rex.RXB xor %r8d,(%r8)
 257:	46                   	rex.RX
 258:	43                   	rex.XB
 259:	46                   	rex.RX
 25a:	47 32 00             	rex.RXB xor (%r8),%r8b
 25d:	43                   	rex.XB
 25e:	4f 50                	rex.WRXB push %r8
 260:	43 00 53 4f          	rex.XB add %dl,0x4f(%r11)
 264:	50                   	push   %rax
 265:	54                   	push   %rsp
 266:	31 00                	xor    %eax,(%rax)
 268:	53                   	push   %rbx
 269:	4f 50                	rex.WRXB push %r8
 26b:	54                   	push   %rsp
 26c:	32 00                	xor    (%rax),%al
 26e:	44 69 76 69 64 65 72 	imul   $0x726564,0x69(%rsi),%r14d
 275:	00 
 276:	52                   	push   %rdx
 277:	45 53                	rex.RB push %r11
 279:	45 52                	rex.RB push %r10
 27b:	56                   	push   %rsi
 27c:	45                   	rex.RB
 27d:	44 5f                	rex.R pop %rdi
 27f:	36 00 53 49          	add    %dl,%ss:0x49(%rbx)
 283:	4d 5f                	rex.WRB pop %r15
 285:	54                   	push   %rsp
 286:	79 70                	jns    2f8 <_init-0x400210>
 288:	65 00 73 79          	add    %dh,%gs:0x79(%rbx)
 28c:	73 74                	jae    302 <_init-0x400206>
 28e:	65 6d                	gs insl (%dx),%es:(%rdi)
 290:	5f                   	pop    %rdi
 291:	4d                   	rex.WRB
 292:	4b                   	rex.WXB
 293:	4c 32 35 5a 34 2e 63 	rex.WR xor 0x632e345a(%rip),%r14b        # 632e36f4 <__TMC_END__+0x62ce068c>
 29a:	00 53 79             	add    %dl,0x79(%rbx)
 29d:	73 74                	jae    313 <_init-0x4001f5>
 29f:	65 6d                	gs insl (%dx),%es:(%rdi)
 2a1:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
 2a3:	69 74 00 53 44 49 44 	imul   $0x444944,0x53(%rax,%rax,1),%esi
 2aa:	00 
 2ab:	53                   	push   %rbx
 2ac:	43                   	rex.XB
 2ad:	47                   	rex.RXB
 2ae:	43 34 00             	rex.XB xor $0x0,%al
 2b1:	53                   	push   %rbx
 2b2:	43                   	rex.XB
 2b3:	47                   	rex.RXB
 2b4:	43 35 00 41 54 43    	rex.XB xor $0x43544100,%eax
 2ba:	56                   	push   %rsi
 2bb:	48 00 53 79          	rex.W add %dl,0x79(%rbx)
 2bf:	73 74                	jae    335 <_init-0x4001d3>
 2c1:	65 6d                	gs insl (%dx),%es:(%rdi)
 2c3:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 2c5:	72 65                	jb     32c <_init-0x4001dc>
 2c7:	43 6c                	rex.XB insb (%dx),%es:(%rdi)
 2c9:	6f                   	outsl  %ds:(%rsi),(%dx)
 2ca:	63 6b 00             	movslq 0x0(%rbx),%ebp
 2cd:	53                   	push   %rbx
 2ce:	79 73                	jns    343 <_init-0x4001c5>
 2d0:	74 65                	je     337 <_init-0x4001d1>
 2d2:	6d                   	insl   (%dx),%es:(%rdi)
 2d3:	43 6f                	rex.XB outsl %ds:(%rsi),(%dx)
 2d5:	72 65                	jb     33c <_init-0x4001cc>
 2d7:	43 6c                	rex.XB insb (%dx),%es:(%rdi)
 2d9:	6f                   	outsl  %ds:(%rsi),(%dx)
 2da:	63 6b 55             	movslq 0x55(%rbx),%ebp
 2dd:	70 64                	jo     343 <_init-0x4001c5>
 2df:	61                   	(bad)  
 2e0:	74 65                	je     347 <_init-0x4001c1>
 2e2:	00 4d 43             	add    %cl,0x43(%rbp)
 2e5:	47                   	rex.RXB
 2e6:	4f 55                	rex.WRXB push %r13
 2e8:	54                   	push   %rsp
 2e9:	43 6c                	rex.XB insb (%dx),%es:(%rdi)
 2eb:	6f                   	outsl  %ds:(%rsi),(%dx)
 2ec:	63 6b 00             	movslq 0x0(%rbx),%ebp
 2ef:	41 54                	push   %r12
 2f1:	43 56                	rex.XB push %r14
 2f3:	4c 00 53 4f          	rex.WR add %r10b,0x4f(%rbx)
 2f7:	50                   	push   %rax
 2f8:	54                   	push   %rsp
 2f9:	31 43 46             	xor    %eax,0x46(%rbx)
 2fc:	47 00 75 69          	rex.RXB add %r14b,0x69(%r13)
 300:	6e                   	outsb  %ds:(%rsi),(%dx)
 301:	74 31                	je     334 <_init-0x4001d4>
 303:	36 5f                	ss pop %rdi
 305:	74 00                	je     307 <_init-0x400201>
 307:	53                   	push   %rbx
 308:	43                   	rex.XB
 309:	47                   	rex.RXB
 30a:	43                   	rex.XB
 30b:	36 00 53 43          	add    %dl,%ss:0x43(%rbx)
 30f:	47                   	rex.RXB
 310:	43 37                	rex.XB (bad) 
 312:	00 55 49             	add    %dl,0x49(%rbp)
 315:	44                   	rex.R
 316:	4d                   	rex.WRB
 317:	48 00 55 49          	rex.W add %dl,0x49(%rbp)
 31b:	44                   	rex.R
 31c:	4d                   	rex.WRB
 31d:	4c 00 52 45          	rex.WR add %r10b,0x45(%rdx)
 321:	53                   	push   %rbx
 322:	45 52                	rex.RB push %r10
 324:	56                   	push   %rsi
 325:	45                   	rex.RB
 326:	44 5f                	rex.R pop %rdi
 328:	31 00                	xor    %eax,(%rax)
 32a:	52                   	push   %rdx
 32b:	45 53                	rex.RB push %r11
 32d:	45 52                	rex.RB push %r10
 32f:	56                   	push   %rsi
 330:	45                   	rex.RB
 331:	44 5f                	rex.R pop %rdi
 333:	32 00                	xor    (%rax),%al
 335:	52                   	push   %rdx
 336:	45 53                	rex.RB push %r11
 338:	45 52                	rex.RB push %r10
 33a:	56                   	push   %rsi
 33b:	45                   	rex.RB
 33c:	44 5f                	rex.R pop %rdi
 33e:	33 00                	xor    (%rax),%eax
 340:	52                   	push   %rdx
 341:	45 53                	rex.RB push %r11
 343:	45 52                	rex.RB push %r10
 345:	56                   	push   %rsi
 346:	45                   	rex.RB
 347:	44 5f                	rex.R pop %rdi
 349:	34 00                	xor    $0x0,%al
 34b:	52                   	push   %rdx
 34c:	45 53                	rex.RB push %r11
 34e:	45 52                	rex.RB push %r10
 350:	56                   	push   %rsi
 351:	45                   	rex.RB
 352:	44 5f                	rex.R pop %rdi
 354:	35 00 43 4c 4b       	xor    $0x4b4c4300,%eax
 359:	44                   	rex.R
 35a:	49 56                	rex.WB push %r14
 35c:	31 00                	xor    %eax,(%rax)
 35e:	52                   	push   %rdx
 35f:	45 53                	rex.RB push %r11
 361:	45 52                	rex.RB push %r10
 363:	56                   	push   %rsi
 364:	45                   	rex.RB
 365:	44 5f                	rex.R pop %rdi
 367:	37                   	(bad)  
 368:	00 6d 61             	add    %ch,0x61(%rbp)
 36b:	69 6e 2e 63 00 6d 61 	imul   $0x616d0063,0x2e(%rsi),%ebp
 372:	69 6e 00 70 72 69 6e 	imul   $0x6e697270,0x0(%rsi),%ebp
 379:	74 5f                	je     3da <_init-0x40012e>
 37b:	6d                   	insl   (%dx),%es:(%rdi)
 37c:	65 6d                	gs insl (%dx),%es:(%rdi)
 37e:	6f                   	outsl  %ds:(%rsi),(%dx)
 37f:	72 79                	jb     3fa <_init-0x40010e>
 381:	00 64 65 62          	add    %ah,0x62(%rbp,%riz,2)
 385:	75 67                	jne    3ee <_init-0x40011a>
 387:	2e 63 00             	movslq %cs:(%rax),%eax
 38a:	73 74                	jae    400 <_init-0x400108>
 38c:	61                   	(bad)  
 38d:	72 74                	jb     403 <_init-0x400105>
 38f:	00 66 72             	add    %ah,0x72(%rsi)
 392:	65 65 5f             	gs gs pop %rdi
 395:	77 6f                	ja     406 <_init-0x400102>
 397:	72 64                	jb     3fd <_init-0x40010b>
 399:	73 00                	jae    39b <_init-0x40016d>
 39b:	73 69                	jae    406 <_init-0x400102>
 39d:	7a 65                	jp     404 <_init-0x400104>
 39f:	5f                   	pop    %rdi
 3a0:	74 00                	je     3a2 <_init-0x400166>
 3a2:	73 77                	jae    41b <_init-0x4000ed>
 3a4:	61                   	(bad)  
 3a5:	70 00                	jo     3a7 <_init-0x400161>
 3a7:	5f                   	pop    %rdi
 3a8:	42 6f                	rex.X outsl %ds:(%rsi),(%dx)
 3aa:	6f                   	outsl  %ds:(%rsi),(%dx)
 3ab:	6c                   	insb   (%dx),%es:(%rdi)
 3ac:	00 6d 79             	add    %ch,0x79(%rbp)
 3af:	5f                   	pop    %rdi
 3b0:	6d                   	insl   (%dx),%es:(%rdi)
 3b1:	65 6d                	gs insl (%dx),%es:(%rdi)
 3b3:	7a 65                	jp     41a <_init-0x4000ee>
 3b5:	72 6f                	jb     426 <_init-0x4000e2>
 3b7:	00 66 6c             	add    %ah,0x6c(%rsi)
 3ba:	6f                   	outsl  %ds:(%rsi),(%dx)
 3bb:	61                   	(bad)  
 3bc:	74 00                	je     3be <_init-0x40014a>
 3be:	6d                   	insl   (%dx),%es:(%rdi)
 3bf:	79 5f                	jns    420 <_init-0x4000e8>
 3c1:	6d                   	insl   (%dx),%es:(%rdi)
 3c2:	65 6d                	gs insl (%dx),%es:(%rdi)
 3c4:	63 70 79             	movslq 0x79(%rax),%esi
 3c7:	00 74 65 6d          	add    %dh,0x6d(%rbp,%riz,2)
 3cb:	70 00                	jo     3cd <_init-0x40013b>
 3cd:	6d                   	insl   (%dx),%es:(%rdi)
 3ce:	79 5f                	jns    42f <_init-0x4000d9>
 3d0:	72 65                	jb     437 <_init-0x4000d1>
 3d2:	76 65                	jbe    439 <_init-0x4000cf>
 3d4:	72 73                	jb     449 <_init-0x4000bf>
 3d6:	65 00 64 6f 75       	add    %ah,%gs:0x75(%rdi,%rbp,2)
 3db:	62                   	(bad)  
 3dc:	6c                   	insb   (%dx),%es:(%rdi)
 3dd:	65 00 6f 76          	add    %ch,%gs:0x76(%rdi)
 3e1:	65 72 6c             	gs jb  450 <_init-0x4000b8>
 3e4:	61                   	(bad)  
 3e5:	70 00                	jo     3e7 <_init-0x400121>
 3e7:	72 65                	jb     44e <_init-0x4000ba>
 3e9:	73 65                	jae    450 <_init-0x4000b8>
 3eb:	72 76                	jb     463 <_init-0x4000a5>
 3ed:	65 5f                	gs pop %rdi
 3ef:	77 6f                	ja     460 <_init-0x4000a8>
 3f1:	72 64                	jb     457 <_init-0x4000b1>
 3f3:	73 00                	jae    3f5 <_init-0x400113>
 3f5:	6d                   	insl   (%dx),%es:(%rdi)
 3f6:	79 5f                	jns    457 <_init-0x4000b1>
 3f8:	6d                   	insl   (%dx),%es:(%rdi)
 3f9:	65 6d                	gs insl (%dx),%es:(%rdi)
 3fb:	73 65                	jae    462 <_init-0x4000a6>
 3fd:	74 00                	je     3ff <_init-0x400109>
 3ff:	6d                   	insl   (%dx),%es:(%rdi)
 400:	65 6d                	gs insl (%dx),%es:(%rdi)
 402:	6f                   	outsl  %ds:(%rsi),(%dx)
 403:	72 79                	jb     47e <_init-0x40008a>
 405:	2e 63 00             	movslq %cs:(%rax),%eax
 408:	6d                   	insl   (%dx),%es:(%rdi)
 409:	79 5f                	jns    46a <_init-0x40009e>
 40b:	6d                   	insl   (%dx),%es:(%rdi)
 40c:	65 6d                	gs insl (%dx),%es:(%rdi)
 40e:	6d                   	insl   (%dx),%es:(%rdi)
 40f:	6f                   	outsl  %ds:(%rsi),(%dx)
 410:	76 65                	jbe    477 <_init-0x400091>
	...
